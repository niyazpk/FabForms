{
  "name": "grunt-contrib-uglify",
  "description": "Minify files with UglifyJS.",
  "version": "0.1.1rc5",
  "homepage": "https://github.com/gruntjs/grunt-contrib-uglify",
  "author": {
    "name": "Grunt Team",
    "url": "http://gruntjs.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gruntjs/grunt-contrib-uglify.git"
  },
  "bugs": {
    "url": "https://github.com/gruntjs/grunt-contrib-uglify/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/gruntjs/grunt-contrib-uglify/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "gzip-js": "~0.3.1",
    "uglify-js": "~2.2.1"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1rc5",
    "grunt-contrib-nodeunit": "~0.1.2rc5",
    "grunt-contrib-clean": "~0.4.0rc5",
    "grunt-contrib-internal": "*",
    "grunt": "~0.4.0rc5"
  },
  "keywords": [],
  "contributors": [
    {
      "name": "\"Cowboy\" Ben Alman",
      "url": "http://benalman.com"
    },
    {
      "name": "Tyler Kellen",
      "url": "http://goingslowly.com"
    },
    {
      "name": "Jarrod Overson",
      "url": "http://jarrodoverson.com"
    }
  ],
  "readme": "# grunt-contrib-uglify [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-uglify.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-uglify)\r\n\r\n> Minify files with UglifyJS.\r\n\r\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\r\n\r\n## Getting Started\r\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-contrib-uglify --save-dev\r\n```\r\n\r\n[grunt]: http://gruntjs.com/\r\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\r\n\r\n\r\n## Uglify task\r\n_Run this task with the `grunt uglify` command._\r\n\r\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\r\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\r\n\r\n\r\n### Options\r\n\r\nThis task primarily delegates to [UglifyJS2][], so please consider the [UglifyJS documentation][] as required reading for advanced configuration.\r\n\r\n[UglifyJS2]: https://github.com/mishoo/UglifyJS2\r\n[UglifyJS documentation]: http://lisperator.net/uglifyjs/\r\n\r\n#### mangle\r\nType: `Boolean` `Object`  \r\nDefault: `{}`  \r\n\r\nTurn on or off mangling with default options. If an `Object` is specified, it is passed directly to `ast.mangle_names()` *and* `ast.compute_char_frequency()` (mimicking command line behavior).\r\n\r\n#### compress\r\nType: `Boolean` `Object`  \r\nDefault: `{}`  \r\n\r\nTurn on or off source compression with default options. If an `Object` is specified, it is passed as options to `UglifyJS.Compressor()`.\r\n\r\n#### beautify\r\nType: `Boolean` `Object`  \r\nDefault: `false`  \r\n\r\nTurns on beautification of the generated source code. An `Object` will be merged and passed with the options sent to `UglifyJS.OutputStream()`.\r\n\r\n#### sourceMap\r\nType: `String`  \r\nDefault: `undefined`  \r\n\r\nSpecify the location to output the source map.\r\n\r\n#### sourceMapRoot\r\nType: `String`  \r\nDefault: `undefined`  \r\n\r\nThe location where your source files can be found.\r\n\r\n#### sourceMapIn\r\nType: `String`  \r\nDefault: `undefined`  \r\n\r\nThe location of an input source map from an earlier compilation, e.g. from CoffeeScript.\r\n\r\n#### sourceMappingURL\r\nType: `String`  \r\nDefault: `undefined`  \r\n\r\nThe location of your sourcemap. Defaults to the location you use for sourceMap, override if you need finer control\r\n\r\n#### sourceMapPrefix\r\nType: `Number`  \r\nDefault: `undefined`  \r\n\r\nThe number of directories to drop from the path prefix when declaring files in the source map.\r\n\r\n#### wrap\r\nType: `String`  \r\nDefault: `undefined`  \r\n\r\nWrap all of the code in a closure, an easy way to make sure nothing is leaking.\r\nFor variables that need to be public `exports` and `global` variables are made available.\r\nThe value of wrap is the global variable exports will be available as.\r\n\r\n#### exportAll\r\nType: `Boolean`  \r\nDefault: `false`  \r\n\r\nWhen using `wrap` this will make all global functions and variables available via the export variable.\r\n\r\n#### preserveComments\r\nType: `Boolean` `String` `Function`  \r\nDefault: `undefined`  \r\nOptions: `false` `'all'` `'some'`  \r\n\r\nTurn on preservation of comments.\r\n\r\n- `false` will strip all comments\r\n- `'all'` will preserve all comments in code blocks that have not been squashed or dropped\r\n- `'some'` will preserve all comments that start with a bang (`!`) or include a closure compiler style directive (`@preserve` `@license` `@cc_on`)\r\n- `Function` specify your own comment preservation function. You will be passed the current node and the current comment and are expected to return either `true` or `false`\r\n\r\n#### banner\r\nType: `String`  \r\nDefault: empty string  \r\n\r\nThis string will be prepended to the beginning of the minified output. It is processed using [grunt.template.process][], using the default options.\r\n\r\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\r\n\r\n[grunt.template.process]: https://github.com/gruntjs/grunt/wiki/grunt.template#wiki-grunt-template-process\r\n\r\n\r\n### Usage examples\r\n\r\n#### Basic compression\r\n\r\nIn this example, running `grunt uglify:my_target` (or `grunt uglify` because `uglify` is a [multi task][]) will mangle and compress the input files using the default options.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    my_target: {\r\n      files: {\r\n        'dest/output.min.js': ['src/input1.js', 'src/input2.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### No mangling\r\n\r\nSpecify `mangle: false` to prevent changes to your variable and function names.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    options: {\r\n      mangle: false\r\n    },\r\n    my_target: {\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Reserved identifiers\r\n\r\nYou can specify identifiers to leave untouched with an `except` array in the `mangle` options.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    options: {\r\n      mangle: {\r\n        except: ['jQuery', 'Backbone']\r\n      }\r\n    },\r\n    my_target: {\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Source maps\r\n\r\nConfigure basic source map output by specifying a file path for the `sourceMap` option.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    my_target: {\r\n      options: {\r\n        sourceMap: 'path/to/source-map.js'\r\n      },\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Advanced source maps\r\n\r\nYou can specify the parameters to pass to `UglifyJS.SourceMap()` which will\r\nallow you to configure advanced settings.\r\n\r\nRefer to the [UglifyJS SourceMap Documentation](http://lisperator.net/uglifyjs/codegen#source-map) for more information.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    my_target: {\r\n      options: {\r\n        sourceMap: 'path/to/source-map.js',\r\n        sourceMapRoot: 'http://example.com/path/to/src/', // the location to find your original source\r\n        sourceMapIn: 'example/coffeescript-sourcemap.js', // input sourcemap from a previous compilation\r\n        }\r\n      },\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n\r\n#### Beautify\r\n\r\nSpecify `beautify: true` to beautify your code for debugging/troubleshooting purposes.\r\nPass an object to manually configure any other output options passed directly to `UglifyJS.OutputStream()`.\r\n\r\nSee [UglifyJS Codegen documentation](http://lisperator.net/uglifyjs/codegen) for more information.\r\n\r\n_Note that manual configuration will require you to explicitly set `beautify: true` if you want traditional, beautified output._\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    my_target: {\r\n      options: {\r\n        beautify: true\r\n      },\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    },\r\n    my_advanced_target: {\r\n      options: {\r\n        beautify: {\r\n          width: 80,\r\n          beautify: true\r\n        }\r\n      },\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Banner comments\r\n\r\nIn this example, running `grunt uglify:my_target` will prepend a banner created by interpolating the `banner` template string with the config object. Here, those properties are the values imported from the `package.json` file (which are available via the `pkg` config property) plus today's date.\r\n\r\n_Note: you don't have to use an external JSON file. It's also valid to create the `pkg` object inline in the config. That being said, if you already have a JSON file, you might as well reference it._\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  pkg: grunt.file.readJSON('package.json'),\r\n  uglify: {\r\n    options: {\r\n      banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +\r\n        '<%= grunt.template.today(\"yyyy-mm-dd\") %> */'\r\n    },\r\n    my_target: {\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n\r\n## Release History\r\n\r\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching back to this.files api.\r\n * 2012-11-27   v0.1.0   Work in progress, not yet officially released.\r\n\r\n---\r\n\r\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com)\r\n\r\n*This file was generated on Wed Jan 09 2013 14:12:29.*\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-contrib-uglify@0.1.1rc5",
  "dist": {
    "shasum": "961f7290d4a16f79b198ec02c22fd8fb598dcc12"
  },
  "_from": "grunt-contrib-uglify@git://github.com/gruntjs/grunt-contrib-uglify.git#5f747f628400948c40e036036672743dfb72eb84"
}
