{"version":"0.2.8","files":{"/usr/local/lib/node_modules/grunt-cli/bin/grunt":{"stats":{"percentage":0.9393939393939394,"lines":[{"lineno":20},{"lineno":29}],"missing":2,"seen":31,"total":33,"coverage":{"20":{"partial":false,"source":"  gruntfile = findup('grunt.js', {nocase: true});","missing":[{"startCol":2,"endCol":49},{"startCol":14,"endCol":48}]},"29":{"partial":false,"source":"  require('grunt').cli();","missing":[{"startCol":2,"endCol":24},{"startCol":9,"endCol":18}]}},"source":"\n\n// Nodejs libs.\nvar fs = require('fs');\nvar path = require('path');\n\n// External libs.\nvar _ = require('lodash');\nvar glob = require('glob');\n\n// Especially badass external lib.\nvar findup = require('findup-sync');\n\n// Search for Gruntfile.\nvar gruntfile = findup('Gruntfile.{js,coffee}', {nocase: true});\n\n// Gruntfile not found, look for pre-0.4.0 grunt.js file.\n// TODO: remove, someday.\nif (!gruntfile) {\n  gruntfile = findup('grunt.js', {nocase: true});\n}\n\n// Where might a locally-installed grunt live?\nvar dir = path.resolve(gruntfile, '../node_modules/grunt');\n\n// If we can't find a locally installed grunt, use the built-in one.\n// This will be removed when grunt-init becomes yeoman.\nif (!fs.existsSync(dir)) {\n  require('grunt').cli();\n} else {\n  // Run grunt.\n  require(dir).cli();\n}","blocks":{"total":3,"seen":1,"missing":2,"percentage":0.3333333333333333}},"hash":"926797b9364e473def6c61337e8571f7"},"/usr/local/lib/node_modules/grunt-cli/node_modules/lodash/lodash.js":{"stats":{"percentage":0.8550962893377172,"lines":[{"lineno":177},{"lineno":245},{"lineno":249},{"lineno":460},{"lineno":462},{"lineno":463},{"lineno":466},{"lineno":467},{"lineno":469},{"lineno":472},{"lineno":473},{"lineno":476},{"lineno":478},{"lineno":479},{"lineno":481},{"lineno":494},{"lineno":507},{"lineno":510},{"lineno":511},{"lineno":515},{"lineno":516},{"lineno":517},{"lineno":519},{"lineno":520},{"lineno":523},{"lineno":538},{"lineno":544},{"lineno":550},{"lineno":551},{"lineno":554},{"lineno":557},{"lineno":558},{"lineno":559},{"lineno":561},{"lineno":563},{"lineno":564},{"lineno":568},{"lineno":569},{"lineno":570},{"lineno":571},{"lineno":573},{"lineno":575},{"lineno":590},{"lineno":593},{"lineno":594},{"lineno":598},{"lineno":599},{"lineno":675},{"lineno":695},{"lineno":721},{"lineno":722},{"lineno":792},{"lineno":793},{"lineno":794},{"lineno":799},{"lineno":800},{"lineno":801},{"lineno":806},{"lineno":807},{"lineno":808},{"lineno":810},{"lineno":815},{"lineno":816},{"lineno":818},{"lineno":820},{"lineno":832},{"lineno":833},{"lineno":834},{"lineno":836},{"lineno":897},{"lineno":898},{"lineno":901},{"lineno":904},{"lineno":907},{"lineno":908},{"lineno":909},{"lineno":911},{"lineno":912},{"lineno":915},{"lineno":917},{"lineno":918},{"lineno":919},{"lineno":922},{"lineno":926},{"lineno":930},{"lineno":933},{"lineno":936},{"lineno":937},{"lineno":939},{"lineno":940},{"lineno":941},{"lineno":942},{"lineno":946},{"lineno":950},{"lineno":951},{"lineno":954},{"lineno":955},{"lineno":958},{"lineno":1042},{"lineno":1083},{"lineno":1100},{"lineno":1117},{"lineno":1134},{"lineno":1159},{"lineno":1161},{"lineno":1163},{"lineno":1166},{"lineno":1167},{"lineno":1168},{"lineno":1169},{"lineno":1171},{"lineno":1172},{"lineno":1174},{"lineno":1202},{"lineno":1204},{"lineno":1207},{"lineno":1208},{"lineno":1211},{"lineno":1212},{"lineno":1213},{"lineno":1220},{"lineno":1224},{"lineno":1225},{"lineno":1227},{"lineno":1233},{"lineno":1236},{"lineno":1237},{"lineno":1238},{"lineno":1242},{"lineno":1243},{"lineno":1246},{"lineno":1247},{"lineno":1248},{"lineno":1249},{"lineno":1251},{"lineno":1255},{"lineno":1256},{"lineno":1257},{"lineno":1259},{"lineno":1265},{"lineno":1266},{"lineno":1268},{"lineno":1269},{"lineno":1270},{"lineno":1271},{"lineno":1275},{"lineno":1280},{"lineno":1281},{"lineno":1286},{"lineno":1287},{"lineno":1291},{"lineno":1292},{"lineno":1297},{"lineno":1301},{"lineno":1303},{"lineno":1305},{"lineno":1306},{"lineno":1315},{"lineno":1317},{"lineno":1322},{"lineno":1323},{"lineno":1324},{"lineno":1325},{"lineno":1326},{"lineno":1330},{"lineno":1363},{"lineno":1384},{"lineno":1385},{"lineno":1414},{"lineno":1446},{"lineno":1467},{"lineno":1484},{"lineno":1511},{"lineno":1512},{"lineno":1513},{"lineno":1515},{"lineno":1516},{"lineno":1518},{"lineno":1519},{"lineno":1520},{"lineno":1537},{"lineno":1554},{"lineno":1572},{"lineno":1588},{"lineno":1590},{"lineno":1591},{"lineno":1592},{"lineno":1627},{"lineno":1633},{"lineno":1634},{"lineno":1635},{"lineno":1636},{"lineno":1638},{"lineno":1639},{"lineno":1640},{"lineno":1641},{"lineno":1643},{"lineno":1644},{"lineno":1645},{"lineno":1651},{"lineno":1655},{"lineno":1656},{"lineno":1657},{"lineno":1658},{"lineno":1661},{"lineno":1663},{"lineno":1664},{"lineno":1668},{"lineno":1697},{"lineno":1701},{"lineno":1703},{"lineno":1705},{"lineno":1707},{"lineno":1708},{"lineno":1710},{"lineno":1713},{"lineno":1731},{"lineno":1732},{"lineno":1733},{"lineno":1735},{"lineno":1764},{"lineno":1765},{"lineno":1766},{"lineno":1767},{"lineno":1770},{"lineno":1771},{"lineno":1772},{"lineno":1773},{"lineno":1777},{"lineno":1778},{"lineno":1779},{"lineno":1780},{"lineno":1784},{"lineno":1801},{"lineno":1802},{"lineno":1803},{"lineno":1805},{"lineno":1838},{"lineno":1839},{"lineno":1841},{"lineno":1842},{"lineno":1843},{"lineno":1844},{"lineno":1845},{"lineno":1848},{"lineno":1849},{"lineno":1880},{"lineno":1881},{"lineno":1882},{"lineno":1883},{"lineno":1884},{"lineno":1886},{"lineno":1909},{"lineno":1910},{"lineno":1912},{"lineno":1913},{"lineno":1916},{"lineno":1917},{"lineno":1922},{"lineno":1923},{"lineno":1926},{"lineno":1948},{"lineno":1949},{"lineno":1950},{"lineno":1951},{"lineno":1952},{"lineno":1955},{"lineno":1979},{"lineno":1980},{"lineno":1981},{"lineno":1982},{"lineno":1983},{"lineno":1984},{"lineno":1987},{"lineno":2041},{"lineno":2042},{"lineno":2043},{"lineno":2044},{"lineno":2045},{"lineno":2047},{"lineno":2073},{"lineno":2074},{"lineno":2077},{"lineno":2078},{"lineno":2080},{"lineno":2106},{"lineno":2107},{"lineno":2115},{"lineno":2116},{"lineno":2147},{"lineno":2149},{"lineno":2152},{"lineno":2153},{"lineno":2154},{"lineno":2155},{"lineno":2157},{"lineno":2158},{"lineno":2159},{"lineno":2160},{"lineno":2161},{"lineno":2165},{"lineno":2166},{"lineno":2167},{"lineno":2171},{"lineno":2193},{"lineno":2195},{"lineno":2198},{"lineno":2199},{"lineno":2200},{"lineno":2201},{"lineno":2203},{"lineno":2204},{"lineno":2205},{"lineno":2206},{"lineno":2207},{"lineno":2211},{"lineno":2212},{"lineno":2213},{"lineno":2217},{"lineno":2242},{"lineno":2243},{"lineno":2244},{"lineno":2246},{"lineno":2270},{"lineno":2271},{"lineno":2272},{"lineno":2273},{"lineno":2274},{"lineno":2275},{"lineno":2277},{"lineno":2299},{"lineno":2300},{"lineno":2301},{"lineno":2303},{"lineno":2304},{"lineno":2305},{"lineno":2306},{"lineno":2307},{"lineno":2309},{"lineno":2310},{"lineno":2311},{"lineno":2312},{"lineno":2313},{"lineno":2315},{"lineno":2336},{"lineno":2337},{"lineno":2338},{"lineno":2357},{"lineno":2358},{"lineno":2360},{"lineno":2361},{"lineno":2362},{"lineno":2363},{"lineno":2365},{"lineno":2389},{"lineno":2390},{"lineno":2414},{"lineno":2415},{"lineno":2417},{"lineno":2418},{"lineno":2421},{"lineno":2422},{"lineno":2427},{"lineno":2428},{"lineno":2431},{"lineno":2460},{"lineno":2461},{"lineno":2462},{"lineno":2463},{"lineno":2464},{"lineno":2470},{"lineno":2471},{"lineno":2472},{"lineno":2473},{"lineno":2475},{"lineno":2492},{"lineno":2493},{"lineno":2494},{"lineno":2495},{"lineno":2497},{"lineno":2522},{"lineno":2523},{"lineno":2524},{"lineno":2526},{"lineno":2527},{"lineno":2528},{"lineno":2529},{"lineno":2534},{"lineno":2555},{"lineno":2556},{"lineno":2559},{"lineno":2560},{"lineno":2562},{"lineno":2565},{"lineno":2585},{"lineno":2586},{"lineno":2587},{"lineno":2588},{"lineno":2591},{"lineno":2592},{"lineno":2593},{"lineno":2594},{"lineno":2597},{"lineno":2621},{"lineno":2645},{"lineno":2653},{"lineno":2687},{"lineno":2690},{"lineno":2692},{"lineno":2693},{"lineno":2696},{"lineno":2697},{"lineno":2721},{"lineno":2722},{"lineno":2723},{"lineno":2742},{"lineno":2747},{"lineno":2748},{"lineno":2749},{"lineno":2750},{"lineno":2751},{"lineno":2752},{"lineno":2755},{"lineno":2758},{"lineno":2781},{"lineno":2782},{"lineno":2807},{"lineno":2808},{"lineno":2809},{"lineno":2811},{"lineno":2812},{"lineno":2813},{"lineno":2816},{"lineno":2837},{"lineno":2838},{"lineno":2841},{"lineno":2842},{"lineno":2844},{"lineno":2846},{"lineno":2849},{"lineno":2882},{"lineno":2883},{"lineno":2885},{"lineno":2886},{"lineno":2887},{"lineno":2891},{"lineno":2892},{"lineno":2893},{"lineno":2895},{"lineno":2896},{"lineno":2897},{"lineno":2899},{"lineno":2921},{"lineno":2922},{"lineno":2923},{"lineno":2967},{"lineno":2968},{"lineno":2971},{"lineno":2972},{"lineno":2973},{"lineno":2974},{"lineno":2975},{"lineno":2976},{"lineno":2977},{"lineno":2979},{"lineno":2998},{"lineno":3033},{"lineno":3039},{"lineno":3040},{"lineno":3041},{"lineno":3046},{"lineno":3049},{"lineno":3050},{"lineno":3054},{"lineno":3059},{"lineno":3062},{"lineno":3066},{"lineno":3090},{"lineno":3091},{"lineno":3092},{"lineno":3095},{"lineno":3096},{"lineno":3097},{"lineno":3098},{"lineno":3101},{"lineno":3121},{"lineno":3122},{"lineno":3123},{"lineno":3125},{"lineno":3126},{"lineno":3128},{"lineno":3154},{"lineno":3155},{"lineno":3157},{"lineno":3158},{"lineno":3159},{"lineno":3189},{"lineno":3190},{"lineno":3191},{"lineno":3217},{"lineno":3218},{"lineno":3221},{"lineno":3222},{"lineno":3223},{"lineno":3225},{"lineno":3248},{"lineno":3249},{"lineno":3250},{"lineno":3253},{"lineno":3254},{"lineno":3256},{"lineno":3281},{"lineno":3287},{"lineno":3289},{"lineno":3292},{"lineno":3293},{"lineno":3294},{"lineno":3295},{"lineno":3297},{"lineno":3298},{"lineno":3301},{"lineno":3303},{"lineno":3325},{"lineno":3326},{"lineno":3345},{"lineno":3346},{"lineno":3383},{"lineno":3406},{"lineno":3407},{"lineno":3408},{"lineno":3409},{"lineno":3410},{"lineno":3411},{"lineno":3433},{"lineno":3436},{"lineno":3438},{"lineno":3440},{"lineno":3441},{"lineno":3444},{"lineno":3445},{"lineno":3468},{"lineno":3490},{"lineno":3497},{"lineno":3498},{"lineno":3499},{"lineno":3501},{"lineno":3502},{"lineno":3503},{"lineno":3505},{"lineno":3506},{"lineno":3508},{"lineno":3509},{"lineno":3510},{"lineno":3511},{"lineno":3514},{"lineno":3516},{"lineno":3542},{"lineno":3543},{"lineno":3544},{"lineno":3545},{"lineno":3566},{"lineno":3586},{"lineno":3642},{"lineno":3643},{"lineno":3665},{"lineno":3666},{"lineno":3668},{"lineno":3669},{"lineno":3670},{"lineno":3671},{"lineno":3673},{"lineno":3706},{"lineno":3707},{"lineno":3809},{"lineno":3821},{"lineno":3825},{"lineno":3841},{"lineno":3842},{"lineno":3843},{"lineno":3849},{"lineno":3855},{"lineno":3860},{"lineno":3869},{"lineno":3874},{"lineno":3875},{"lineno":3879},{"lineno":3912},{"lineno":3913},{"lineno":3914},{"lineno":3916},{"lineno":3917},{"lineno":3919},{"lineno":3938},{"lineno":3956},{"lineno":3957},{"lineno":4013},{"lineno":4014},{"lineno":4031},{"lineno":4032},{"lineno":4194},{"lineno":4195},{"lineno":4199},{"lineno":4200},{"lineno":4203},{"lineno":4204},{"lineno":4206},{"lineno":4215},{"lineno":4216},{"lineno":4219},{"lineno":4220},{"lineno":4222},{"lineno":4230},{"lineno":4235},{"lineno":4239},{"lineno":4240},{"lineno":4251},{"lineno":4256}],"missing":617,"seen":3641,"total":4258,"coverage":{"177":{"partial":true,"source":"    var noNodeClass = ({ 'toString': 0 } + '', toString.call(window.document || 0) == objectClass);","missing":[{"startCol":47,"endCol":82},{"startCol":61,"endCol":81}]},"245":{"partial":false,"source":"      return value;","missing":[{"startCol":6,"endCol":19}]},"249":{"partial":false,"source":"      return new lodash(value);","missing":[{"startCol":6,"endCol":31}]},"460":{"partial":false,"source":"    fromIndex || (fromIndex = 0);","missing":[{"startCol":4,"endCol":32}]},"462":{"partial":false,"source":"    var length = array.length,","missing":[{}]},"463":{"partial":false,"source":"        isLarge = (length - fromIndex) >= (largeSize || largeArraySize);","missing":[{},{"startCol":18,"endCol":38},{"startCol":42,"endCol":71}]},"466":{"partial":false,"source":"      var cache = {},","missing":[{}]},"467":{"partial":false,"source":"          index = fromIndex - 1;","missing":[{"startCol":18,"endCol":31},{}]},"469":{"partial":false,"source":"      while (++index < length) {","missing":[{"startCol":13,"endCol":20}]},"472":{"partial":false,"source":"        var key = array[index] + '';","missing":[{"startCol":8,"endCol":36},{"startCol":18,"endCol":35}]},"473":{"partial":false,"source":"        (hasOwnProperty.call(cache, key) ? cache[key] : (cache[key] = [])).push(array[index]);","missing":[{"startCol":8,"endCol":93},{"startCol":9,"endCol":40},{"startCol":43,"endCol":53},{"startCol":56,"endCol":73}]},"476":{"partial":false,"source":"    return function(value) {","missing":[{}]},"477":{"partial":false,"source":"      if (isLarge) {","missing":[{}]},"478":{"partial":false,"source":"        var key = value + '';","missing":[{},{"startCol":8,"endCol":29},{"startCol":18,"endCol":28}]},"479":{"partial":false,"source":"        return hasOwnProperty.call(cache, key) && indexOf(cache[key], value) > -1;","missing":[{},{"startCol":8,"endCol":82},{"startCol":15,"endCol":46},{"startCol":50,"endCol":76}]},"480":{"partial":false,"source":"      }","missing":[{}]},"481":{"partial":false,"source":"      return indexOf(array, value, fromIndex) > -1;","missing":[{"startCol":13,"endCol":45},{},{"startCol":6,"endCol":51}]},"482":{"partial":false,"source":"    }","missing":[{}]},"483":{"partial":false,"source":"  }","missing":[{}]},"494":{"partial":false,"source":"    return value.charCodeAt(0);","missing":[{"startCol":4,"endCol":31},{"startCol":11,"endCol":30}]},"507":{"partial":false,"source":"    var ai = a.index,","missing":[{}]},"508":{"partial":false,"source":"        bi = b.index;","missing":[{}]},"510":{"partial":false,"source":"    a = a.criteria;","missing":[{"startCol":4,"endCol":19}]},"511":{"partial":false,"source":"    b = b.criteria;","missing":[{"startCol":4,"endCol":19}]},"515":{"partial":false,"source":"    if (a !== b) {","missing":[{"startCol":8,"endCol":15}]},"516":{"partial":false,"source":"      if (a > b || a === undefined) {","missing":[{"startCol":10,"endCol":15},{"startCol":19,"endCol":34}]},"517":{"partial":false,"source":"        return 1;","missing":[{"startCol":8,"endCol":17}]},"519":{"partial":false,"source":"      if (a < b || b === undefined) {","missing":[{"startCol":10,"endCol":15},{"startCol":19,"endCol":34}]},"520":{"partial":false,"source":"        return -1;","missing":[{"startCol":8,"endCol":18}]},"523":{"partial":false,"source":"    return ai < bi ? -1 : 1;","missing":[{"startCol":4,"endCol":28},{"startCol":11,"endCol":18},{"startCol":21,"endCol":23},{"startCol":26,"endCol":27}]},"538":{"partial":false,"source":"    var isFunc = isFunction(func),","missing":[{"startCol":17,"endCol":33},{}]},"539":{"partial":false,"source":"        isPartial = !partialArgs,","missing":[{}]},"540":{"partial":false,"source":"        methodName = func;","missing":[{}]},"544":{"partial":false,"source":"      partialArgs = thisArg;","missing":[{"startCol":6,"endCol":28}]},"550":{"partial":false,"source":"      var args = arguments,","missing":[{}]},"551":{"partial":false,"source":"          thisBinding = isPartial ? this : thisArg;","missing":[{"startCol":36,"endCol":40},{"startCol":43,"endCol":50},{}]},"554":{"partial":false,"source":"        func = thisArg[methodName];","missing":[{"startCol":8,"endCol":35}]},"557":{"partial":false,"source":"        args = args.length","missing":[{}]},"558":{"partial":false,"source":"          ? partialArgs.concat(slice.call(args))","missing":[{"startCol":12,"endCol":48},{},{"startCol":31,"endCol":47}]},"559":{"partial":false,"source":"          : partialArgs;","missing":[{},{"startCol":12,"endCol":23}]},"561":{"partial":false,"source":"      if (this instanceof bound) {","missing":[{"startCol":10,"endCol":31}]},"563":{"partial":false,"source":"        noop.prototype = func.prototype;","missing":[{"startCol":8,"endCol":40}]},"564":{"partial":false,"source":"        thisBinding = new noop;","missing":[{"startCol":8,"endCol":31}]},"568":{"partial":false,"source":"        var result = func.apply(thisBinding, args);","missing":[{"startCol":8,"endCol":51},{"startCol":21,"endCol":50}]},"569":{"partial":false,"source":"        return isObject(result)","missing":[{"startCol":15,"endCol":31},{}]},"570":{"partial":false,"source":"          ? result","missing":[{},{"startCol":12,"endCol":18}]},"571":{"partial":false,"source":"          : thisBinding","missing":[{"startCol":12,"endCol":23},{}]},"572":{"partial":false,"source":"      }","missing":[{}]},"573":{"partial":false,"source":"      return func.apply(thisBinding, args);","missing":[{"startCol":6,"endCol":43},{"startCol":13,"endCol":42}]},"575":{"partial":false,"source":"    return bound;","missing":[{"startCol":4,"endCol":17}]},"590":{"partial":false,"source":"      return identity;","missing":[{"startCol":6,"endCol":22}]},"593":{"partial":false,"source":"      return function(object) {","missing":[{}]},"594":{"partial":false,"source":"        return object[func];","missing":[{},{"startCol":8,"endCol":28}]},"595":{"partial":false,"source":"      };","missing":[{}]},"598":{"partial":false,"source":"      return function(value, index, object) {","missing":[{}]},"599":{"partial":false,"source":"        return func.call(thisArg, value, index, object);","missing":[{"startCol":8,"endCol":56},{},{"startCol":15,"endCol":55}]},"600":{"partial":false,"source":"      };","missing":[{}]},"675":{"partial":false,"source":"    return htmlEscapes[match];","missing":[{"startCol":4,"endCol":30}]},"695":{"partial":false,"source":"    return htmlUnescapes[match];","missing":[{"startCol":4,"endCol":32}]},"721":{"partial":false,"source":"    isArguments = function(value) {","missing":[{}]},"722":{"partial":false,"source":"      return value ? hasOwnProperty.call(value, 'callee') : false;","missing":[{},{"startCol":6,"endCol":66},{"startCol":21,"endCol":57},{"startCol":60,"endCol":65}]},"723":{"partial":false,"source":"    };","missing":[{}]},"792":{"partial":false,"source":"    var result = false;","missing":[{"startCol":4,"endCol":23}]},"793":{"partial":false,"source":"    if (!(value && typeof value == 'object') || isArguments(value)) {","missing":[{"startCol":8,"endCol":66},{"startCol":9,"endCol":44},{"startCol":19,"endCol":43},{"startCol":48,"endCol":66}]},"794":{"partial":false,"source":"      return result;","missing":[{"startCol":6,"endCol":20}]},"799":{"partial":false,"source":"    var ctor = value.constructor;","missing":[{"startCol":4,"endCol":33}]},"800":{"partial":false,"source":"    if ((!noNodeClass || !(typeof value.toString != 'function' && typeof (value + '') == 'string')) &&","missing":[{},{"startCol":26,"endCol":98},{"startCol":27,"endCol":62},{"startCol":66,"endCol":97},{"startCol":73,"endCol":85},{"startCol":8,"endCol":99}]},"801":{"partial":false,"source":"        (!isFunction(ctor) || ctor instanceof ctor)) {","missing":[{"startCol":8,"endCol":51},{"startCol":10,"endCol":26},{"startCol":30,"endCol":50},{}]},"806":{"partial":false,"source":"        forIn(value, function(value, key, object) {","missing":[{}]},"807":{"partial":false,"source":"          result = !hasOwnProperty.call(object, key);","missing":[{},{"startCol":20,"endCol":52},{"startCol":10,"endCol":53}]},"808":{"partial":false,"source":"          return false;","missing":[{},{"startCol":10,"endCol":23}]},"809":{"partial":false,"source":"        });","missing":[{}]},"810":{"partial":false,"source":"        return result === false;","missing":[{"startCol":8,"endCol":32},{"startCol":15,"endCol":31}]},"815":{"partial":false,"source":"      forIn(value, function(value, key) {","missing":[{}]},"816":{"partial":false,"source":"        result = key;","missing":[{},{"startCol":8,"endCol":21}]},"817":{"partial":false,"source":"      });","missing":[{}]},"818":{"partial":false,"source":"      return result === false || hasOwnProperty.call(value, result);","missing":[{"startCol":6,"endCol":68},{"startCol":13,"endCol":29},{"startCol":33,"endCol":67}]},"820":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"832":{"partial":false,"source":"    var result = [];","missing":[{"startCol":4,"endCol":20}]},"833":{"partial":false,"source":"    forOwn(object, function(value, key) {","missing":[{}]},"834":{"partial":false,"source":"      result.push(key);","missing":[{"startCol":6,"endCol":22},{}]},"835":{"partial":false,"source":"    });","missing":[{}]},"836":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"897":{"partial":false,"source":"    if (value == null) {","missing":[{"startCol":8,"endCol":21}]},"898":{"partial":false,"source":"      return value;","missing":[{"startCol":6,"endCol":19}]},"901":{"partial":false,"source":"      deep = false;","missing":[{"startCol":6,"endCol":19}]},"904":{"partial":false,"source":"    var isObj = isObject(value);","missing":[{"startCol":4,"endCol":32},{"startCol":16,"endCol":31}]},"907":{"partial":false,"source":"      var className = toString.call(value);","missing":[{"startCol":6,"endCol":43},{"startCol":22,"endCol":42}]},"908":{"partial":false,"source":"      if (!cloneableClasses[className] || (noArgsClass && isArguments(value))) {","missing":[{"startCol":10,"endCol":77},{"startCol":42,"endCol":77},{"startCol":58,"endCol":76}]},"909":{"partial":false,"source":"        return value;","missing":[{"startCol":8,"endCol":21}]},"911":{"partial":false,"source":"      var isArr = className == arrayClass;","missing":[{"startCol":6,"endCol":42},{"startCol":18,"endCol":41}]},"912":{"partial":false,"source":"      isObj = isArr || (className == objectClass ? isPlainObject(value) : isObj);","missing":[{"startCol":6,"endCol":81},{"startCol":14,"endCol":80},{"startCol":24,"endCol":48},{"startCol":51,"endCol":71},{"startCol":74,"endCol":79}]},"915":{"partial":false,"source":"    if (!isObj || !deep) {","missing":[{"startCol":8,"endCol":23}]},"917":{"partial":false,"source":"      return isObj","missing":[{}]},"918":{"partial":false,"source":"        ? (isArr ? slice.call(value) : extend({}, value))","missing":[{"startCol":10,"endCol":57},{"startCol":19,"endCol":36},{},{"startCol":39,"endCol":56}]},"919":{"partial":false,"source":"        : value;","missing":[{},{"startCol":10,"endCol":15}]},"922":{"partial":false,"source":"    var ctor = value.constructor;","missing":[{"startCol":4,"endCol":33}]},"926":{"partial":false,"source":"        return new ctor(+value);","missing":[{"startCol":8,"endCol":32}]},"930":{"partial":false,"source":"        return new ctor(value);","missing":[{"startCol":8,"endCol":31}]},"933":{"partial":false,"source":"        return ctor(value.source, reFlags.exec(value));","missing":[{"startCol":8,"endCol":55},{"startCol":15,"endCol":54},{"startCol":34,"endCol":53}]},"936":{"partial":false,"source":"    stackA || (stackA = []);","missing":[{"startCol":4,"endCol":27}]},"937":{"partial":false,"source":"    stackB || (stackB = []);","missing":[{"startCol":4,"endCol":27}]},"939":{"partial":false,"source":"    var length = stackA.length;","missing":[{"startCol":4,"endCol":31}]},"940":{"partial":false,"source":"    while (length--) {","missing":[{"startCol":11,"endCol":19}]},"941":{"partial":false,"source":"      if (stackA[length] == value) {","missing":[{"startCol":10,"endCol":33}]},"942":{"partial":false,"source":"        return stackB[length];","missing":[{"startCol":8,"endCol":30}]},"946":{"partial":false,"source":"    var result = isArr ? ctor(value.length) : {};","missing":[{"startCol":4,"endCol":49},{"startCol":25,"endCol":43},{"startCol":46,"endCol":48}]},"950":{"partial":false,"source":"    stackA.push(value);","missing":[{"startCol":4,"endCol":22}]},"951":{"partial":false,"source":"    stackB.push(result);","missing":[{"startCol":4,"endCol":23}]},"954":{"partial":false,"source":"    (isArr ? forEach : forOwn)(value, function(objValue, key) {","missing":[{"startCol":13,"endCol":20},{},{"startCol":23,"endCol":29}]},"955":{"partial":false,"source":"      result[key] = clone(objValue, deep, null, stackA, stackB);","missing":[{},{"startCol":6,"endCol":64},{"startCol":20,"endCol":63}]},"956":{"partial":false,"source":"    });","missing":[{}]},"958":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"1042":{"partial":false,"source":"    return object ? hasOwnProperty.call(object, property) : false;","missing":[{"startCol":4,"endCol":66},{"startCol":20,"endCol":57},{"startCol":60,"endCol":65}]},"1083":{"partial":false,"source":"    return toString.call(value) == arrayClass;","missing":[{"startCol":4,"endCol":46},{"startCol":11,"endCol":31}]},"1100":{"partial":false,"source":"    return value === true || value === false || toString.call(value) == boolClass;","missing":[{"startCol":4,"endCol":82},{"startCol":11,"endCol":25},{"startCol":29,"endCol":44},{"startCol":48,"endCol":68}]},"1117":{"partial":false,"source":"    return toString.call(value) == dateClass;","missing":[{"startCol":4,"endCol":45},{"startCol":11,"endCol":31}]},"1134":{"partial":false,"source":"    return value ? value.nodeType === 1 : false;","missing":[{"startCol":4,"endCol":48},{"startCol":19,"endCol":39},{"startCol":42,"endCol":47}]},"1159":{"partial":false,"source":"    var result = true;","missing":[{"startCol":4,"endCol":22}]},"1161":{"partial":false,"source":"      return result;","missing":[{"startCol":6,"endCol":20}]},"1163":{"partial":false,"source":"    var className = toString.call(value),","missing":[{},{"startCol":20,"endCol":40}]},"1164":{"partial":false,"source":"        length = value.length;","missing":[{}]},"1166":{"partial":false,"source":"    if ((className == arrayClass || className == stringClass ||","missing":[{"startCol":9,"endCol":32},{},{"startCol":36,"endCol":60}]},"1167":{"partial":false,"source":"        className == argsClass || (noArgsClass && isArguments(value))) ||","missing":[{},{"startCol":8,"endCol":30},{"startCol":34,"endCol":69},{"startCol":50,"endCol":68}]},"1168":{"partial":false,"source":"        (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {","missing":[{"startCol":8,"endCol":91},{"startCol":9,"endCol":33},{},{"startCol":37,"endCol":62},{"startCol":66,"endCol":90}]},"1169":{"partial":false,"source":"      return !length;","missing":[{"startCol":6,"endCol":21}]},"1171":{"partial":false,"source":"    forOwn(value, function() {","missing":[{}]},"1172":{"partial":false,"source":"      return (result = false);","missing":[{},{"startCol":6,"endCol":30}]},"1173":{"partial":false,"source":"    });","missing":[{}]},"1174":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"1202":{"partial":false,"source":"    if (a === b) {","missing":[{"startCol":8,"endCol":15}]},"1204":{"partial":false,"source":"      return a !== 0 || (1 / a == 1 / b);","missing":[{"startCol":6,"endCol":41},{"startCol":13,"endCol":20},{"startCol":24,"endCol":40},{"startCol":25,"endCol":30},{"startCol":34,"endCol":39}]},"1207":{"partial":false,"source":"    if (a == null || b == null) {","missing":[{"startCol":8,"endCol":17},{"startCol":21,"endCol":30}]},"1208":{"partial":false,"source":"      return a === b;","missing":[{"startCol":6,"endCol":21},{"startCol":13,"endCol":20}]},"1211":{"partial":false,"source":"    var className = toString.call(a);","missing":[{"startCol":4,"endCol":37},{"startCol":20,"endCol":36}]},"1212":{"partial":false,"source":"    if (className != toString.call(b)) {","missing":[{"startCol":8,"endCol":37},{"startCol":21,"endCol":37}]},"1213":{"partial":false,"source":"      return false;","missing":[{"startCol":6,"endCol":19}]},"1220":{"partial":false,"source":"        return +a == +b;","missing":[{"startCol":8,"endCol":24},{"startCol":15,"endCol":23}]},"1224":{"partial":false,"source":"        return a != +a","missing":[{},{"startCol":15,"endCol":22}]},"1225":{"partial":false,"source":"          ? b != +b","missing":[{},{"startCol":12,"endCol":19}]},"1226":{"partial":false,"source":"          // but treat `+0` vs. `-0` as not equal","missing":[{}]},"1227":{"partial":false,"source":"          : (a == 0 ? (1 / a == 1 / b) : a == +b);","missing":[{"startCol":12,"endCol":49},{"startCol":13,"endCol":19},{},{"startCol":22,"endCol":38},{"startCol":23,"endCol":28},{"startCol":32,"endCol":37},{"startCol":41,"endCol":48}]},"1233":{"partial":false,"source":"        return a == b + '';","missing":[{"startCol":8,"endCol":27},{"startCol":15,"endCol":26},{"startCol":20,"endCol":26}]},"1236":{"partial":false,"source":"    var isArr = className == arrayClass || className == argsClass;","missing":[{"startCol":4,"endCol":66},{"startCol":16,"endCol":39},{"startCol":43,"endCol":65}]},"1237":{"partial":false,"source":"    if (noArgsClass && !isArr && (isArr = isArguments(a)) && !isArguments(b)) {","missing":[{"startCol":8,"endCol":29},{"startCol":42,"endCol":56},{"startCol":62,"endCol":76}]},"1238":{"partial":false,"source":"      return false;","missing":[{"startCol":6,"endCol":19}]},"1242":{"partial":false,"source":"      if (a.__wrapped__ || b.__wrapped__) {","missing":[{"startCol":10,"endCol":40}]},"1243":{"partial":false,"source":"        return isEqual(a.__wrapped__ || a, b.__wrapped__ || b);","missing":[{"startCol":8,"endCol":63},{"startCol":15,"endCol":62},{"startCol":23,"endCol":41},{"startCol":43,"endCol":61}]},"1246":{"partial":false,"source":"      if (className != objectClass || (noNodeClass && (","missing":[{"startCol":10,"endCol":34},{}]},"1247":{"partial":false,"source":"          (typeof a.toString != 'function' && typeof (a + '') == 'string') ||","missing":[{"startCol":10,"endCol":74},{"startCol":11,"endCol":42},{},{"startCol":46,"endCol":73},{"startCol":53,"endCol":61}]},"1248":{"partial":false,"source":"          (typeof b.toString != 'function' && typeof (b + '') == 'string')))) {","missing":[{},{"startCol":10,"endCol":74},{"startCol":11,"endCol":42},{"startCol":46,"endCol":73},{"startCol":53,"endCol":61}]},"1249":{"partial":false,"source":"        return false;","missing":[{"startCol":8,"endCol":21}]},"1251":{"partial":false,"source":"      var ctorA = a.constructor,","missing":[{}]},"1252":{"partial":false,"source":"          ctorB = b.constructor;","missing":[{}]},"1255":{"partial":false,"source":"      if (ctorA != ctorB && !(","missing":[{},{"startCol":10,"endCol":24}]},"1256":{"partial":false,"source":"            isFunction(ctorA) && ctorA instanceof ctorA &&","missing":[{},{"startCol":12,"endCol":29},{"startCol":33,"endCol":55}]},"1257":{"partial":false,"source":"            isFunction(ctorB) && ctorB instanceof ctorB","missing":[{"startCol":12,"endCol":29},{},{"startCol":33,"endCol":55}]},"1258":{"partial":false,"source":"          )) {","missing":[{}]},"1259":{"partial":false,"source":"        return false;","missing":[{"startCol":8,"endCol":21}]},"1265":{"partial":false,"source":"    stackA || (stackA = []);","missing":[{"startCol":4,"endCol":27}]},"1266":{"partial":false,"source":"    stackB || (stackB = []);","missing":[{"startCol":4,"endCol":27}]},"1268":{"partial":false,"source":"    var length = stackA.length;","missing":[{"startCol":4,"endCol":31}]},"1269":{"partial":false,"source":"    while (length--) {","missing":[{"startCol":11,"endCol":19}]},"1270":{"partial":false,"source":"      if (stackA[length] == a) {","missing":[{"startCol":10,"endCol":29}]},"1271":{"partial":false,"source":"        return stackB[length] == b;","missing":[{"startCol":8,"endCol":35},{"startCol":15,"endCol":34}]},"1275":{"partial":false,"source":"    var index = -1,","missing":[{}]},"1276":{"partial":false,"source":"        result = true,","missing":[{}]},"1277":{"partial":false,"source":"        size = 0;","missing":[{}]},"1280":{"partial":false,"source":"    stackA.push(a);","missing":[{"startCol":4,"endCol":18}]},"1281":{"partial":false,"source":"    stackB.push(b);","missing":[{"startCol":4,"endCol":18}]},"1286":{"partial":false,"source":"      size = a.length;","missing":[{"startCol":6,"endCol":22}]},"1287":{"partial":false,"source":"      result = size == b.length;","missing":[{"startCol":6,"endCol":32},{"startCol":15,"endCol":31}]},"1291":{"partial":false,"source":"        while (size--) {","missing":[{"startCol":15,"endCol":21}]},"1292":{"partial":false,"source":"          if (!(result = isEqual(a[size], b[size], stackA, stackB))) {","missing":[{"startCol":25,"endCol":66}]},"1297":{"partial":false,"source":"      return result;","missing":[{"startCol":6,"endCol":20}]},"1301":{"partial":false,"source":"      if (hasOwnProperty.call(a, key)) {","missing":[{"startCol":10,"endCol":37}]},"1303":{"partial":false,"source":"        size++;","missing":[{"startCol":8,"endCol":14}]},"1305":{"partial":false,"source":"        if (!(hasOwnProperty.call(b, key) && isEqual(a[key], b[key], stackA, stackB))) {","missing":[{"startCol":13,"endCol":85},{"startCol":14,"endCol":41},{"startCol":45,"endCol":84}]},"1306":{"partial":false,"source":"          return false;","missing":[{"startCol":10,"endCol":23}]},"1315":{"partial":false,"source":"      if (hasOwnProperty.call(b, key) && !(size--)) {","missing":[{"startCol":10,"endCol":37},{"startCol":42,"endCol":50}]},"1317":{"partial":false,"source":"        return false;","missing":[{"startCol":8,"endCol":21}]},"1322":{"partial":false,"source":"      while (++index < 7) {","missing":[{"startCol":13,"endCol":20}]},"1323":{"partial":false,"source":"        key = shadowed[index];","missing":[{"startCol":8,"endCol":30}]},"1324":{"partial":false,"source":"        if (hasOwnProperty.call(a, key) &&","missing":[{},{"startCol":12,"endCol":39}]},"1325":{"partial":false,"source":"            !(hasOwnProperty.call(b, key) && isEqual(a[key], b[key], stackA, stackB))) {","missing":[{},{"startCol":13,"endCol":85},{"startCol":14,"endCol":41},{"startCol":45,"endCol":84}]},"1326":{"partial":false,"source":"          return false;","missing":[{"startCol":10,"endCol":23}]},"1330":{"partial":false,"source":"    return true;","missing":[{"startCol":4,"endCol":16}]},"1363":{"partial":false,"source":"    return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));","missing":[{"startCol":4,"endCol":68},{"startCol":11,"endCol":32},{"startCol":37,"endCol":67},{"startCol":49,"endCol":66}]},"1384":{"partial":false,"source":"    isFunction = function(value) {","missing":[{}]},"1385":{"partial":false,"source":"      return toString.call(value) == funcClass;","missing":[{"startCol":13,"endCol":33},{},{"startCol":6,"endCol":47}]},"1386":{"partial":false,"source":"    };","missing":[{}]},"1414":{"partial":false,"source":"    return value ? objectTypes[typeof value] : false;","missing":[{"startCol":4,"endCol":53},{"startCol":19,"endCol":44},{"startCol":47,"endCol":52}]},"1446":{"partial":false,"source":"    return toString.call(value) == numberClass && value != +value","missing":[{},{"startCol":11,"endCol":31},{"startCol":50,"endCol":65}]},"1447":{"partial":false,"source":"  }","missing":[{}]},"1467":{"partial":false,"source":"    return value === null;","missing":[{"startCol":4,"endCol":26},{"startCol":11,"endCol":25}]},"1484":{"partial":false,"source":"    return toString.call(value) == numberClass;","missing":[{"startCol":4,"endCol":47},{"startCol":11,"endCol":31}]},"1511":{"partial":true,"source":"  var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {","missing":[{"startCol":40,"endCol":57}]},"1512":{"partial":false,"source":"    if (!(value && typeof value == 'object')) {","missing":[{"startCol":9,"endCol":44},{"startCol":19,"endCol":43}]},"1513":{"partial":false,"source":"      return false;","missing":[{"startCol":6,"endCol":19}]},"1515":{"partial":false,"source":"    var valueOf = value.valueOf,","missing":[{}]},"1516":{"partial":false,"source":"        objProto = typeof valueOf == 'function' && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);","missing":[{"startCol":19,"endCol":47},{},{"startCol":63,"endCol":86},{"startCol":91,"endCol":115}]},"1518":{"partial":false,"source":"    return objProto","missing":[{}]},"1519":{"partial":false,"source":"      ? value == objProto || (getPrototypeOf(value) == objProto && !isArguments(value))","missing":[{"startCol":8,"endCol":25},{},{"startCol":29,"endCol":87},{"startCol":30,"endCol":51},{"startCol":68,"endCol":86}]},"1520":{"partial":false,"source":"      : shimIsPlainObject(value);","missing":[{"startCol":8,"endCol":32},{}]},"1537":{"partial":false,"source":"    return toString.call(value) == regexpClass;","missing":[{"startCol":4,"endCol":47},{"startCol":11,"endCol":31}]},"1554":{"partial":false,"source":"    return toString.call(value) == stringClass;","missing":[{"startCol":4,"endCol":47},{"startCol":11,"endCol":31}]},"1572":{"partial":false,"source":"    return value === undefined;","missing":[{"startCol":4,"endCol":31},{"startCol":11,"endCol":30}]},"1588":{"partial":true,"source":"  var keys = !nativeKeys ? shimKeys : function(object) {","missing":[{"startCol":27,"endCol":35}]},"1590":{"partial":false,"source":"    return typeof object == 'function' && propertyIsEnumerable.call(object, 'prototype')","missing":[{"startCol":11,"endCol":38},{"startCol":42,"endCol":88},{}]},"1591":{"partial":false,"source":"      ? shimKeys(object)","missing":[{"startCol":8,"endCol":24},{}]},"1592":{"partial":false,"source":"      : (isObject(object) ? nativeKeys(object) : []);","missing":[{"startCol":8,"endCol":52},{"startCol":9,"endCol":25},{"startCol":28,"endCol":46},{"startCol":49,"endCol":51},{}]},"1627":{"partial":false,"source":"    var args = arguments,","missing":[{}]},"1628":{"partial":false,"source":"        index = 0,","missing":[{}]},"1629":{"partial":false,"source":"        length = 2,","missing":[{}]},"1630":{"partial":false,"source":"        stackA = args[3],","missing":[{}]},"1631":{"partial":false,"source":"        stackB = args[4];","missing":[{}]},"1633":{"partial":false,"source":"    if (indicator !== objectRef) {","missing":[{"startCol":8,"endCol":31}]},"1634":{"partial":false,"source":"      stackA = [];","missing":[{"startCol":6,"endCol":18}]},"1635":{"partial":false,"source":"      stackB = [];","missing":[{"startCol":6,"endCol":18}]},"1636":{"partial":false,"source":"      length = args.length;","missing":[{"startCol":6,"endCol":27}]},"1638":{"partial":false,"source":"    while (++index < length) {","missing":[{"startCol":11,"endCol":18}]},"1639":{"partial":false,"source":"      forOwn(args[index], function(source, key) {","missing":[{}]},"1640":{"partial":false,"source":"        var found, isArr, value;","missing":[{"startCol":8,"endCol":32},{}]},"1641":{"partial":false,"source":"        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {","missing":[{"startCol":12,"endCol":74},{"startCol":22,"endCol":74},{"startCol":32,"endCol":47},{},{"startCol":52,"endCol":73}]},"1642":{"partial":false,"source":"          // avoid merging previously merged cyclic sources","missing":[{}]},"1643":{"partial":false,"source":"          var stackLength = stackA.length;","missing":[{},{"startCol":10,"endCol":42}]},"1644":{"partial":false,"source":"          while (stackLength--) {","missing":[{"startCol":17,"endCol":30},{}]},"1645":{"partial":false,"source":"            found = stackA[stackLength] == source;","missing":[{"startCol":12,"endCol":50},{},{"startCol":20,"endCol":49}]},"1646":{"partial":false,"source":"            if (found) {","missing":[{}]},"1647":{"partial":false,"source":"              break;","missing":[{}]},"1648":{"partial":false,"source":"            }","missing":[{}]},"1649":{"partial":false,"source":"          }","missing":[{}]},"1650":{"partial":false,"source":"          if (found) {","missing":[{}]},"1651":{"partial":false,"source":"            object[key] = stackB[stackLength];","missing":[{"startCol":12,"endCol":46},{}]},"1652":{"partial":false,"source":"          }","missing":[{}]},"1653":{"partial":false,"source":"          else {","missing":[{}]},"1654":{"partial":false,"source":"            // add `source` and associated `value` to the stack of traversed objects","missing":[{}]},"1655":{"partial":false,"source":"            stackA.push(source);","missing":[{},{"startCol":12,"endCol":32}]},"1656":{"partial":false,"source":"            stackB.push(value = (value = object[key], isArr)","missing":[{}]},"1657":{"partial":false,"source":"              ? (isArray(value) ? value : [])","missing":[{"startCol":16,"endCol":45},{},{"startCol":17,"endCol":31},{"startCol":34,"endCol":39},{"startCol":42,"endCol":44}]},"1658":{"partial":false,"source":"              : (isPlainObject(value) ? value : {})","missing":[{},{"startCol":16,"endCol":51},{"startCol":40,"endCol":45},{"startCol":48,"endCol":50},{"startCol":17,"endCol":37}]},"1659":{"partial":false,"source":"            );","missing":[{}]},"1660":{"partial":false,"source":"            // recursively merge objects and arrays (susceptible to call stack limits)","missing":[{}]},"1661":{"partial":false,"source":"            object[key] = merge(value, source, objectRef, stackA, stackB);","missing":[{},{"startCol":12,"endCol":74},{"startCol":26,"endCol":73}]},"1662":{"partial":false,"source":"          }","missing":[{}]},"1663":{"partial":false,"source":"        } else if (source != null) {","missing":[{},{"startCol":19,"endCol":33}]},"1664":{"partial":false,"source":"          object[key] = source;","missing":[{"startCol":10,"endCol":31},{}]},"1665":{"partial":false,"source":"        }","missing":[{}]},"1666":{"partial":false,"source":"      });","missing":[{}]},"1668":{"partial":false,"source":"    return object;","missing":[{"startCol":4,"endCol":18}]},"1697":{"partial":false,"source":"    var isFunc = typeof callback == 'function',","missing":[{"startCol":17,"endCol":46},{}]},"1698":{"partial":false,"source":"        result = {};","missing":[{}]},"1701":{"partial":false,"source":"      callback = createCallback(callback, thisArg);","missing":[{"startCol":6,"endCol":51},{"startCol":17,"endCol":50}]},"1703":{"partial":false,"source":"      var props = concat.apply(arrayRef, arguments);","missing":[{"startCol":6,"endCol":52},{"startCol":18,"endCol":51}]},"1705":{"partial":false,"source":"    forIn(object, function(value, key, object) {","missing":[{}]},"1706":{"partial":false,"source":"      if (isFunc","missing":[{}]},"1707":{"partial":false,"source":"            ? !callback(value, key, object)","missing":[{"startCol":14,"endCol":43},{"startCol":15,"endCol":43},{}]},"1708":{"partial":false,"source":"            : indexOf(props, key, 1) < 0","missing":[{},{"startCol":14,"endCol":36}]},"1709":{"partial":false,"source":"          ) {","missing":[{}]},"1710":{"partial":false,"source":"        result[key] = value;","missing":[{"startCol":8,"endCol":28},{}]},"1711":{"partial":false,"source":"      }","missing":[{}]},"1712":{"partial":false,"source":"    });","missing":[{}]},"1713":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"1731":{"partial":false,"source":"    var result = [];","missing":[{"startCol":4,"endCol":20}]},"1732":{"partial":false,"source":"    forOwn(object, function(value, key) {","missing":[{}]},"1733":{"partial":false,"source":"      result.push([key, value]);","missing":[{"startCol":6,"endCol":31},{}]},"1734":{"partial":false,"source":"    });","missing":[{}]},"1735":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"1764":{"partial":false,"source":"    var result = {};","missing":[{"startCol":4,"endCol":20}]},"1765":{"partial":false,"source":"    if (typeof callback != 'function') {","missing":[{"startCol":8,"endCol":37}]},"1766":{"partial":false,"source":"      var index = 0,","missing":[{}]},"1767":{"partial":false,"source":"          props = concat.apply(arrayRef, arguments),","missing":[{"startCol":18,"endCol":51},{}]},"1768":{"partial":false,"source":"          length = props.length;","missing":[{}]},"1770":{"partial":false,"source":"      while (++index < length) {","missing":[{"startCol":13,"endCol":20}]},"1771":{"partial":false,"source":"        var key = props[index];","missing":[{"startCol":8,"endCol":31}]},"1772":{"partial":false,"source":"        if (key in object) {","missing":[{"startCol":12,"endCol":25}]},"1773":{"partial":false,"source":"          result[key] = object[key];","missing":[{"startCol":10,"endCol":36}]},"1777":{"partial":false,"source":"      callback = createCallback(callback, thisArg);","missing":[{"startCol":6,"endCol":51},{"startCol":17,"endCol":50}]},"1778":{"partial":false,"source":"      forIn(object, function(value, key, object) {","missing":[{}]},"1779":{"partial":false,"source":"        if (callback(value, key, object)) {","missing":[{"startCol":12,"endCol":40},{}]},"1780":{"partial":false,"source":"          result[key] = value;","missing":[{},{"startCol":10,"endCol":30}]},"1781":{"partial":false,"source":"        }","missing":[{}]},"1782":{"partial":false,"source":"      });","missing":[{}]},"1784":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"1801":{"partial":false,"source":"    var result = [];","missing":[{"startCol":4,"endCol":20}]},"1802":{"partial":false,"source":"    forOwn(object, function(value) {","missing":[{}]},"1803":{"partial":false,"source":"      result.push(value);","missing":[{"startCol":6,"endCol":25},{}]},"1804":{"partial":false,"source":"    });","missing":[{}]},"1805":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"1838":{"partial":false,"source":"    var index = -1,","missing":[{}]},"1839":{"partial":false,"source":"        length = collection ? collection.length : 0;","missing":[{"startCol":30,"endCol":47},{"startCol":50,"endCol":51},{}]},"1841":{"partial":false,"source":"    fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;","missing":[{"startCol":4,"endCol":84},{"startCol":16,"endCol":83},{"startCol":17,"endCol":30},{"startCol":33,"endCol":65},{"startCol":46,"endCol":64},{"startCol":68,"endCol":77}]},"1842":{"partial":false,"source":"    if (typeof length == 'number') {","missing":[{"startCol":8,"endCol":33}]},"1843":{"partial":false,"source":"      return (isString(collection)","missing":[{},{"startCol":14,"endCol":34}]},"1844":{"partial":false,"source":"        ? collection.indexOf(target, fromIndex)","missing":[{},{"startCol":10,"endCol":47}]},"1845":{"partial":false,"source":"        : indexOf(collection, target, fromIndex)","missing":[{},{"startCol":10,"endCol":48}]},"1846":{"partial":false,"source":"      ) > -1;","missing":[{}]},"1848":{"partial":false,"source":"    return some(collection, function(value) {","missing":[{}]},"1849":{"partial":false,"source":"      return ++index >= fromIndex && value === target;","missing":[{"startCol":6,"endCol":54},{"startCol":13,"endCol":20},{"startCol":37,"endCol":53},{}]},"1850":{"partial":false,"source":"    });","missing":[{}]},"1880":{"partial":false,"source":"    var result = {};","missing":[{"startCol":4,"endCol":20}]},"1881":{"partial":false,"source":"    callback = createCallback(callback, thisArg);","missing":[{"startCol":4,"endCol":49},{"startCol":15,"endCol":48}]},"1882":{"partial":false,"source":"    forEach(collection, function(value, key, collection) {","missing":[{}]},"1883":{"partial":false,"source":"      key = callback(value, key, collection);","missing":[{"startCol":12,"endCol":44},{},{"startCol":6,"endCol":45}]},"1884":{"partial":false,"source":"      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);","missing":[{"startCol":6,"endCol":75},{"startCol":7,"endCol":39},{},{"startCol":42,"endCol":55},{"startCol":58,"endCol":73}]},"1885":{"partial":false,"source":"    });","missing":[{}]},"1886":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"1909":{"partial":false,"source":"    var result = true;","missing":[{"startCol":4,"endCol":22}]},"1910":{"partial":false,"source":"    callback = createCallback(callback, thisArg);","missing":[{"startCol":4,"endCol":49},{"startCol":15,"endCol":48}]},"1912":{"partial":false,"source":"    if (isArray(collection)) {","missing":[{"startCol":8,"endCol":27}]},"1913":{"partial":false,"source":"      var index = -1,","missing":[{}]},"1914":{"partial":false,"source":"          length = collection.length;","missing":[{}]},"1916":{"partial":false,"source":"      while (++index < length) {","missing":[{"startCol":13,"endCol":20}]},"1917":{"partial":false,"source":"        if (!(result = !!callback(collection[index], index, collection))) {","missing":[{"startCol":25,"endCol":71}]},"1922":{"partial":false,"source":"      forEach(collection, function(value, index, collection) {","missing":[{}]},"1923":{"partial":false,"source":"        return (result = !!callback(value, index, collection));","missing":[{},{"startCol":8,"endCol":63},{"startCol":27,"endCol":61}]},"1924":{"partial":false,"source":"      });","missing":[{}]},"1926":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"1948":{"partial":false,"source":"    var result = [];","missing":[{"startCol":4,"endCol":20}]},"1949":{"partial":false,"source":"    callback = createCallback(callback, thisArg);","missing":[{"startCol":4,"endCol":49},{"startCol":15,"endCol":48}]},"1950":{"partial":false,"source":"    forEach(collection, function(value, index, collection) {","missing":[{}]},"1951":{"partial":false,"source":"      if (callback(value, index, collection)) {","missing":[{"startCol":10,"endCol":44},{}]},"1952":{"partial":false,"source":"        result.push(value);","missing":[{"startCol":8,"endCol":27},{}]},"1953":{"partial":false,"source":"      }","missing":[{}]},"1954":{"partial":false,"source":"    });","missing":[{}]},"1955":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"1979":{"partial":false,"source":"    var result;","missing":[{"startCol":4,"endCol":15}]},"1980":{"partial":false,"source":"    callback = createCallback(callback, thisArg);","missing":[{"startCol":4,"endCol":49},{"startCol":15,"endCol":48}]},"1981":{"partial":false,"source":"    forEach(collection, function(value, index, collection) {","missing":[{}]},"1982":{"partial":false,"source":"      if (callback(value, index, collection)) {","missing":[{},{"startCol":10,"endCol":44}]},"1983":{"partial":false,"source":"        result = value;","missing":[{"startCol":8,"endCol":23},{}]},"1984":{"partial":false,"source":"        return false;","missing":[{},{"startCol":8,"endCol":21}]},"1985":{"partial":false,"source":"      }","missing":[{}]},"1986":{"partial":false,"source":"    });","missing":[{}]},"1987":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2041":{"partial":false,"source":"    var result = {};","missing":[{"startCol":4,"endCol":20}]},"2042":{"partial":false,"source":"    callback = createCallback(callback, thisArg);","missing":[{"startCol":4,"endCol":49},{"startCol":15,"endCol":48}]},"2043":{"partial":false,"source":"    forEach(collection, function(value, key, collection) {","missing":[{}]},"2044":{"partial":false,"source":"      key = callback(value, key, collection);","missing":[{"startCol":6,"endCol":45},{"startCol":12,"endCol":44},{}]},"2045":{"partial":false,"source":"      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);","missing":[{"startCol":6,"endCol":85},{"startCol":7,"endCol":39},{"startCol":42,"endCol":53},{},{"startCol":56,"endCol":72}]},"2046":{"partial":false,"source":"    });","missing":[{}]},"2047":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2073":{"partial":false,"source":"    var args = slice.call(arguments, 2),","missing":[{"startCol":15,"endCol":39},{}]},"2074":{"partial":false,"source":"        isFunc = typeof methodName == 'function',","missing":[{"startCol":17,"endCol":48},{}]},"2075":{"partial":false,"source":"        result = [];","missing":[{}]},"2077":{"partial":false,"source":"    forEach(collection, function(value) {","missing":[{}]},"2078":{"partial":false,"source":"      result.push((isFunc ? methodName : value[methodName]).apply(value, args));","missing":[{},{"startCol":6,"endCol":79},{"startCol":18,"endCol":78},{"startCol":28,"endCol":38},{"startCol":41,"endCol":58}]},"2079":{"partial":false,"source":"    });","missing":[{}]},"2080":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2106":{"partial":true,"source":"        length = collection ? collection.length : 0,","missing":[{"startCol":50,"endCol":51}]},"2107":{"partial":true,"source":"        result = Array(typeof length == 'number' ? length : 0);","missing":[{"startCol":60,"endCol":61}]},"2115":{"partial":false,"source":"      forEach(collection, function(value, key, collection) {","missing":[{}]},"2116":{"partial":false,"source":"        result[++index] = callback(value, key, collection);","missing":[{},{"startCol":8,"endCol":59},{"startCol":15,"endCol":22},{"startCol":26,"endCol":58}]},"2117":{"partial":false,"source":"      });","missing":[{}]},"2147":{"partial":false,"source":"    var computed = -Infinity,","missing":[{}]},"2148":{"partial":false,"source":"        index = -1,","missing":[{}]},"2149":{"partial":false,"source":"        length = collection ? collection.length : 0,","missing":[{},{"startCol":30,"endCol":47},{"startCol":50,"endCol":51}]},"2150":{"partial":false,"source":"        result = computed;","missing":[{}]},"2152":{"partial":false,"source":"    if (callback || !isArray(collection)) {","missing":[{"startCol":8,"endCol":40},{"startCol":21,"endCol":40}]},"2153":{"partial":false,"source":"      callback = !callback && isString(collection)","missing":[{},{"startCol":17,"endCol":50},{"startCol":30,"endCol":50}]},"2154":{"partial":false,"source":"        ? charAtCallback","missing":[{"startCol":10,"endCol":24},{}]},"2155":{"partial":false,"source":"        : createCallback(callback, thisArg);","missing":[{"startCol":10,"endCol":43},{}]},"2157":{"partial":false,"source":"      forEach(collection, function(value, index, collection) {","missing":[{}]},"2158":{"partial":false,"source":"        var current = callback(value, index, collection);","missing":[{},{"startCol":8,"endCol":57},{"startCol":22,"endCol":56}]},"2159":{"partial":false,"source":"        if (current > computed) {","missing":[{},{"startCol":12,"endCol":30}]},"2160":{"partial":false,"source":"          computed = current;","missing":[{},{"startCol":10,"endCol":29}]},"2161":{"partial":false,"source":"          result = value;","missing":[{},{"startCol":10,"endCol":25}]},"2162":{"partial":false,"source":"        }","missing":[{}]},"2163":{"partial":false,"source":"      });","missing":[{}]},"2165":{"partial":false,"source":"      while (++index < length) {","missing":[{"startCol":13,"endCol":20}]},"2166":{"partial":false,"source":"        if (collection[index] > result) {","missing":[{"startCol":12,"endCol":38}]},"2167":{"partial":false,"source":"          result = collection[index];","missing":[{"startCol":10,"endCol":37}]},"2171":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2193":{"partial":false,"source":"    var computed = Infinity,","missing":[{}]},"2194":{"partial":false,"source":"        index = -1,","missing":[{}]},"2195":{"partial":false,"source":"        length = collection ? collection.length : 0,","missing":[{},{"startCol":30,"endCol":47},{"startCol":50,"endCol":51}]},"2196":{"partial":false,"source":"        result = computed;","missing":[{}]},"2198":{"partial":false,"source":"    if (callback || !isArray(collection)) {","missing":[{"startCol":8,"endCol":40},{"startCol":21,"endCol":40}]},"2199":{"partial":false,"source":"      callback = !callback && isString(collection)","missing":[{"startCol":17,"endCol":50},{"startCol":30,"endCol":50},{}]},"2200":{"partial":false,"source":"        ? charAtCallback","missing":[{"startCol":10,"endCol":24},{}]},"2201":{"partial":false,"source":"        : createCallback(callback, thisArg);","missing":[{},{"startCol":10,"endCol":43}]},"2203":{"partial":false,"source":"      forEach(collection, function(value, index, collection) {","missing":[{}]},"2204":{"partial":false,"source":"        var current = callback(value, index, collection);","missing":[{},{"startCol":8,"endCol":57},{"startCol":22,"endCol":56}]},"2205":{"partial":false,"source":"        if (current < computed) {","missing":[{},{"startCol":12,"endCol":30}]},"2206":{"partial":false,"source":"          computed = current;","missing":[{},{"startCol":10,"endCol":29}]},"2207":{"partial":false,"source":"          result = value;","missing":[{},{"startCol":10,"endCol":25}]},"2208":{"partial":false,"source":"        }","missing":[{}]},"2209":{"partial":false,"source":"      });","missing":[{}]},"2211":{"partial":false,"source":"      while (++index < length) {","missing":[{"startCol":13,"endCol":20}]},"2212":{"partial":false,"source":"        if (collection[index] < result) {","missing":[{"startCol":12,"endCol":38}]},"2213":{"partial":false,"source":"          result = collection[index];","missing":[{"startCol":10,"endCol":37}]},"2217":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2242":{"partial":false,"source":"    var result = [];","missing":[{"startCol":4,"endCol":20}]},"2243":{"partial":false,"source":"    forEach(collection, function(value) {","missing":[{}]},"2244":{"partial":false,"source":"      result.push(value[property]);","missing":[{},{"startCol":6,"endCol":34}]},"2245":{"partial":false,"source":"    });","missing":[{}]},"2246":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2270":{"partial":false,"source":"    var noaccum = arguments.length < 3;","missing":[{"startCol":4,"endCol":39},{"startCol":18,"endCol":38}]},"2271":{"partial":false,"source":"    callback = createCallback(callback, thisArg);","missing":[{"startCol":4,"endCol":49},{"startCol":15,"endCol":48}]},"2272":{"partial":false,"source":"    forEach(collection, function(value, index, collection) {","missing":[{}]},"2273":{"partial":false,"source":"      accumulator = noaccum","missing":[{}]},"2274":{"partial":false,"source":"        ? (noaccum = false, value)","missing":[{},{"startCol":10,"endCol":34}]},"2275":{"partial":false,"source":"        : callback(accumulator, value, index, collection)","missing":[{},{"startCol":10,"endCol":57}]},"2276":{"partial":false,"source":"    });","missing":[{}]},"2277":{"partial":false,"source":"    return accumulator;","missing":[{"startCol":4,"endCol":23}]},"2299":{"partial":false,"source":"    var iteratee = collection,","missing":[{}]},"2300":{"partial":false,"source":"        length = collection ? collection.length : 0,","missing":[{"startCol":30,"endCol":47},{},{"startCol":50,"endCol":51}]},"2301":{"partial":false,"source":"        noaccum = arguments.length < 3;","missing":[{},{"startCol":18,"endCol":38}]},"2303":{"partial":false,"source":"    if (typeof length != 'number') {","missing":[{"startCol":8,"endCol":33}]},"2304":{"partial":false,"source":"      var props = keys(collection);","missing":[{"startCol":6,"endCol":35},{"startCol":18,"endCol":34}]},"2305":{"partial":false,"source":"      length = props.length;","missing":[{"startCol":6,"endCol":28}]},"2306":{"partial":false,"source":"    } else if (noCharByIndex && isString(collection)) {","missing":[{"startCol":15,"endCol":52},{"startCol":32,"endCol":52}]},"2307":{"partial":false,"source":"      iteratee = collection.split('');","missing":[{"startCol":6,"endCol":38},{"startCol":17,"endCol":37}]},"2309":{"partial":false,"source":"    forEach(collection, function(value, index, collection) {","missing":[{}]},"2310":{"partial":false,"source":"      index = props ? props[--length] : --length;","missing":[{},{"startCol":40,"endCol":48},{"startCol":28,"endCol":36},{"startCol":22,"endCol":37},{"startCol":6,"endCol":49}]},"2311":{"partial":false,"source":"      accumulator = noaccum","missing":[{}]},"2312":{"partial":false,"source":"        ? (noaccum = false, iteratee[index])","missing":[{},{"startCol":10,"endCol":44}]},"2313":{"partial":false,"source":"        : callback.call(thisArg, accumulator, iteratee[index], index, collection);","missing":[{"startCol":10,"endCol":81},{}]},"2314":{"partial":false,"source":"    });","missing":[{}]},"2315":{"partial":false,"source":"    return accumulator;","missing":[{"startCol":4,"endCol":23}]},"2336":{"partial":false,"source":"    callback = createCallback(callback, thisArg);","missing":[{"startCol":4,"endCol":49},{"startCol":15,"endCol":48}]},"2337":{"partial":false,"source":"    return filter(collection, function(value, index, collection) {","missing":[{}]},"2338":{"partial":false,"source":"      return !callback(value, index, collection);","missing":[{},{"startCol":6,"endCol":49},{"startCol":14,"endCol":48}]},"2339":{"partial":false,"source":"    });","missing":[{}]},"2357":{"partial":false,"source":"    var index = -1,","missing":[{}]},"2358":{"partial":false,"source":"        result = Array(collection ? collection.length : 0);","missing":[{},{"startCol":17,"endCol":58},{"startCol":36,"endCol":53},{"startCol":56,"endCol":57}]},"2360":{"partial":false,"source":"    forEach(collection, function(value) {","missing":[{}]},"2361":{"partial":false,"source":"      var rand = floor(nativeRandom() * (++index + 1));","missing":[{},{"startCol":6,"endCol":55},{"startCol":17,"endCol":54},{"startCol":23,"endCol":37},{"startCol":40,"endCol":53},{"startCol":41,"endCol":48}]},"2362":{"partial":false,"source":"      result[index] = result[rand];","missing":[{"startCol":6,"endCol":35},{}]},"2363":{"partial":false,"source":"      result[rand] = value;","missing":[{},{"startCol":6,"endCol":27}]},"2364":{"partial":false,"source":"    });","missing":[{}]},"2365":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2389":{"partial":false,"source":"    var length = collection ? collection.length : 0;","missing":[{"startCol":4,"endCol":52},{"startCol":30,"endCol":47},{"startCol":50,"endCol":51}]},"2390":{"partial":false,"source":"    return typeof length == 'number' ? length : keys(collection).length;","missing":[{"startCol":4,"endCol":72},{"startCol":11,"endCol":36},{"startCol":39,"endCol":45},{"startCol":52,"endCol":64}]},"2414":{"partial":false,"source":"    var result;","missing":[{"startCol":4,"endCol":15}]},"2415":{"partial":false,"source":"    callback = createCallback(callback, thisArg);","missing":[{"startCol":4,"endCol":49},{"startCol":15,"endCol":48}]},"2417":{"partial":false,"source":"    if (isArray(collection)) {","missing":[{"startCol":8,"endCol":27}]},"2418":{"partial":false,"source":"      var index = -1,","missing":[{}]},"2419":{"partial":false,"source":"          length = collection.length;","missing":[{}]},"2421":{"partial":false,"source":"      while (++index < length) {","missing":[{"startCol":13,"endCol":20}]},"2422":{"partial":false,"source":"        if (result = callback(collection[index], index, collection)) {","missing":[{"startCol":21,"endCol":67}]},"2427":{"partial":false,"source":"      forEach(collection, function(value, index, collection) {","missing":[{}]},"2428":{"partial":false,"source":"        return !(result = callback(value, index, collection));","missing":[{"startCol":8,"endCol":62},{},{"startCol":26,"endCol":60}]},"2429":{"partial":false,"source":"      });","missing":[{}]},"2431":{"partial":false,"source":"    return !!result;","missing":[{"startCol":4,"endCol":20}]},"2460":{"partial":false,"source":"    var result = [];","missing":[{"startCol":4,"endCol":20}]},"2461":{"partial":false,"source":"    callback = createCallback(callback, thisArg);","missing":[{"startCol":4,"endCol":49},{"startCol":15,"endCol":48}]},"2462":{"partial":false,"source":"    forEach(collection, function(value, index, collection) {","missing":[{}]},"2463":{"partial":false,"source":"      result.push({","missing":[{}]},"2464":{"partial":false,"source":"        'criteria': callback(value, index, collection),","missing":[{"startCol":20,"endCol":54},{}]},"2465":{"partial":false,"source":"        'index': index,","missing":[{}]},"2466":{"partial":false,"source":"        'value': value","missing":[{}]},"2467":{"partial":false,"source":"      });","missing":[{}]},"2468":{"partial":false,"source":"    });","missing":[{}]},"2470":{"partial":false,"source":"    var length = result.length;","missing":[{"startCol":4,"endCol":31}]},"2471":{"partial":false,"source":"    result.sort(compareAscending);","missing":[{"startCol":4,"endCol":33}]},"2472":{"partial":false,"source":"    while (length--) {","missing":[{"startCol":11,"endCol":19}]},"2473":{"partial":false,"source":"      result[length] = result[length].value;","missing":[{"startCol":6,"endCol":44}]},"2475":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2492":{"partial":false,"source":"    if (collection && typeof collection.length == 'number') {","missing":[{"startCol":8,"endCol":58},{"startCol":22,"endCol":58}]},"2493":{"partial":false,"source":"      return (noArraySliceOnStrings ? isString(collection) : typeof collection == 'string')","missing":[{"startCol":38,"endCol":58},{},{"startCol":61,"endCol":90}]},"2494":{"partial":false,"source":"        ? collection.split('')","missing":[{},{"startCol":10,"endCol":30}]},"2495":{"partial":false,"source":"        : slice.call(collection);","missing":[{"startCol":10,"endCol":32},{}]},"2497":{"partial":false,"source":"    return values(collection);","missing":[{"startCol":4,"endCol":30},{"startCol":11,"endCol":29}]},"2522":{"partial":false,"source":"    var props = [];","missing":[{"startCol":4,"endCol":19}]},"2523":{"partial":false,"source":"    forIn(properties, function(value, prop) {","missing":[{}]},"2524":{"partial":false,"source":"      props.push(prop);","missing":[{},{"startCol":6,"endCol":22}]},"2525":{"partial":false,"source":"    });","missing":[{}]},"2526":{"partial":false,"source":"    return filter(collection, function(object) {","missing":[{}]},"2527":{"partial":false,"source":"      var length = props.length;","missing":[{},{"startCol":6,"endCol":32}]},"2528":{"partial":false,"source":"      while (length--) {","missing":[{"startCol":13,"endCol":21},{}]},"2529":{"partial":false,"source":"        var result = object[props[length]] === properties[props[length]];","missing":[{},{"startCol":8,"endCol":73},{"startCol":21,"endCol":72}]},"2530":{"partial":false,"source":"        if (!result) {","missing":[{}]},"2531":{"partial":false,"source":"          break;","missing":[{}]},"2532":{"partial":false,"source":"        }","missing":[{}]},"2533":{"partial":false,"source":"      }","missing":[{}]},"2534":{"partial":false,"source":"      return !!result;","missing":[{"startCol":6,"endCol":22},{}]},"2535":{"partial":false,"source":"    });","missing":[{}]},"2555":{"partial":false,"source":"    var index = -1,","missing":[{}]},"2556":{"partial":false,"source":"        length = array ? array.length : 0,","missing":[{"startCol":40,"endCol":41},{},{"startCol":25,"endCol":37}]},"2557":{"partial":false,"source":"        result = [];","missing":[{}]},"2559":{"partial":false,"source":"    while (++index < length) {","missing":[{"startCol":11,"endCol":18}]},"2560":{"partial":false,"source":"      var value = array[index];","missing":[{"startCol":6,"endCol":31}]},"2562":{"partial":false,"source":"        result.push(value);","missing":[{"startCol":8,"endCol":26}]},"2565":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2585":{"partial":false,"source":"    var index = -1,","missing":[{}]},"2586":{"partial":false,"source":"        length = array ? array.length : 0,","missing":[{},{"startCol":25,"endCol":37},{"startCol":40,"endCol":41}]},"2587":{"partial":false,"source":"        flattened = concat.apply(arrayRef, arguments),","missing":[{},{"startCol":20,"endCol":53}]},"2588":{"partial":false,"source":"        contains = cachedContains(flattened, length),","missing":[{},{"startCol":19,"endCol":52}]},"2589":{"partial":false,"source":"        result = [];","missing":[{}]},"2591":{"partial":false,"source":"    while (++index < length) {","missing":[{"startCol":11,"endCol":18}]},"2592":{"partial":false,"source":"      var value = array[index];","missing":[{"startCol":6,"endCol":31}]},"2593":{"partial":false,"source":"      if (!contains(value)) {","missing":[{"startCol":11,"endCol":26}]},"2594":{"partial":false,"source":"        result.push(value);","missing":[{"startCol":8,"endCol":26}]},"2597":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2621":{"partial":false,"source":"      return (n == null || guard) ? array[0] : slice.call(array, 0, n);","missing":[{"startCol":6,"endCol":71},{"startCol":13,"endCol":33},{"startCol":14,"endCol":23},{"startCol":36,"endCol":44},{"startCol":47,"endCol":70}]},"2645":{"partial":true,"source":"        length = array ? array.length : 0,","missing":[{"startCol":40,"endCol":41}]},"2653":{"partial":true,"source":"        push.apply(result, shallow ? value : flatten(value));","missing":[{"startCol":37,"endCol":42}]},"2687":{"partial":true,"source":"        length = array ? array.length : 0;","missing":[{"startCol":40,"endCol":41}]},"2690":{"partial":false,"source":"      index = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0) - 1;","missing":[{"startCol":6,"endCol":86},{"startCol":14,"endCol":85},{"startCol":15,"endCol":28},{"startCol":31,"endCol":63},{"startCol":44,"endCol":62},{"startCol":66,"endCol":80}]},"2692":{"partial":false,"source":"      index = sortedIndex(array, value);","missing":[{"startCol":6,"endCol":40},{"startCol":14,"endCol":39}]},"2693":{"partial":false,"source":"      return array[index] === value ? index : -1;","missing":[{"startCol":6,"endCol":49},{"startCol":13,"endCol":35},{"startCol":38,"endCol":43},{"startCol":46,"endCol":48}]},"2696":{"partial":false,"source":"      if (array[index] === value) {","missing":[{"startCol":10,"endCol":32}]},"2697":{"partial":false,"source":"        return index;","missing":[{"startCol":8,"endCol":21}]},"2721":{"partial":false,"source":"    return array","missing":[{}]},"2722":{"partial":false,"source":"      ? slice.call(array, 0, -((n == null || guard) ? 1 : n))","missing":[{"startCol":8,"endCol":61},{},{"startCol":31,"endCol":51},{"startCol":32,"endCol":41},{"startCol":54,"endCol":55},{"startCol":58,"endCol":59}]},"2723":{"partial":false,"source":"      : [];","missing":[{},{"startCol":8,"endCol":10}]},"2742":{"partial":false,"source":"    var args = arguments,","missing":[{}]},"2743":{"partial":false,"source":"        argsLength = args.length,","missing":[{}]},"2744":{"partial":false,"source":"        cache = {},","missing":[{}]},"2745":{"partial":false,"source":"        result = [];","missing":[{}]},"2747":{"partial":false,"source":"    forEach(array, function(value) {","missing":[{}]},"2748":{"partial":false,"source":"      if (indexOf(result, value) < 0) {","missing":[{},{"startCol":10,"endCol":32}]},"2749":{"partial":false,"source":"        var length = argsLength;","missing":[{},{"startCol":8,"endCol":32}]},"2750":{"partial":false,"source":"        while (--length) {","missing":[{},{"startCol":15,"endCol":23}]},"2751":{"partial":false,"source":"          if (!(cache[length] || (cache[length] = cachedContains(args[length])))(value)) {","missing":[{},{"startCol":15,"endCol":87},{"startCol":50,"endCol":78}]},"2752":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19},{}]},"2753":{"partial":false,"source":"          }","missing":[{}]},"2754":{"partial":false,"source":"        }","missing":[{}]},"2755":{"partial":false,"source":"        result.push(value);","missing":[{"startCol":8,"endCol":27},{}]},"2756":{"partial":false,"source":"      }","missing":[{}]},"2757":{"partial":false,"source":"    });","missing":[{}]},"2758":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2781":{"partial":false,"source":"      var length = array.length;","missing":[{"startCol":6,"endCol":32}]},"2782":{"partial":false,"source":"      return (n == null || guard) ? array[length - 1] : slice.call(array, -n || length);","missing":[{"startCol":6,"endCol":88},{"startCol":13,"endCol":33},{"startCol":14,"endCol":23},{"startCol":36,"endCol":53},{"startCol":42,"endCol":52},{"startCol":56,"endCol":87},{"startCol":74,"endCol":86}]},"2807":{"partial":false,"source":"    var index = array ? array.length : 0;","missing":[{"startCol":4,"endCol":41},{"startCol":24,"endCol":36},{"startCol":39,"endCol":40}]},"2808":{"partial":false,"source":"    if (typeof fromIndex == 'number') {","missing":[{"startCol":8,"endCol":36}]},"2809":{"partial":false,"source":"      index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;","missing":[{"startCol":6,"endCol":102},{"startCol":14,"endCol":101},{"startCol":15,"endCol":28},{"startCol":31,"endCol":62},{"startCol":44,"endCol":61},{"startCol":65,"endCol":96},{"startCol":86,"endCol":95}]},"2811":{"partial":false,"source":"    while (index--) {","missing":[{"startCol":11,"endCol":18}]},"2812":{"partial":false,"source":"      if (array[index] === value) {","missing":[{"startCol":10,"endCol":32}]},"2813":{"partial":false,"source":"        return index;","missing":[{"startCol":8,"endCol":21}]},"2816":{"partial":false,"source":"    return -1;","missing":[{"startCol":4,"endCol":14}]},"2837":{"partial":false,"source":"    var index = -1,","missing":[{}]},"2838":{"partial":false,"source":"        length = keys ? keys.length : 0,","missing":[{},{"startCol":24,"endCol":35},{"startCol":38,"endCol":39}]},"2839":{"partial":false,"source":"        result = {};","missing":[{}]},"2841":{"partial":false,"source":"    while (++index < length) {","missing":[{"startCol":11,"endCol":18}]},"2842":{"partial":false,"source":"      var key = keys[index];","missing":[{"startCol":6,"endCol":28}]},"2844":{"partial":false,"source":"        result[key] = values[index];","missing":[{"startCol":8,"endCol":36}]},"2846":{"partial":false,"source":"        result[key[0]] = key[1];","missing":[{"startCol":8,"endCol":32}]},"2849":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2882":{"partial":false,"source":"    start = +start || 0;","missing":[{"startCol":4,"endCol":24},{"startCol":12,"endCol":23}]},"2883":{"partial":false,"source":"    step = +step || 1;","missing":[{"startCol":4,"endCol":22},{"startCol":11,"endCol":21}]},"2885":{"partial":false,"source":"    if (end == null) {","missing":[{"startCol":8,"endCol":19}]},"2886":{"partial":false,"source":"      end = start;","missing":[{"startCol":6,"endCol":18}]},"2887":{"partial":false,"source":"      start = 0;","missing":[{"startCol":6,"endCol":16}]},"2891":{"partial":false,"source":"    var index = -1,","missing":[{}]},"2892":{"partial":false,"source":"        length = nativeMax(0, ceil((end - start) / step)),","missing":[{"startCol":17,"endCol":57},{"startCol":30,"endCol":56},{"startCol":35,"endCol":48},{}]},"2893":{"partial":false,"source":"        result = Array(length);","missing":[{},{"startCol":17,"endCol":30}]},"2895":{"partial":false,"source":"    while (++index < length) {","missing":[{"startCol":11,"endCol":18}]},"2896":{"partial":false,"source":"      result[index] = start;","missing":[{"startCol":6,"endCol":28}]},"2897":{"partial":false,"source":"      start += step;","missing":[{"startCol":6,"endCol":20}]},"2899":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"2921":{"partial":false,"source":"    return array","missing":[{}]},"2922":{"partial":false,"source":"      ? slice.call(array, (n == null || guard) ? 1 : n)","missing":[{},{"startCol":53,"endCol":54},{"startCol":26,"endCol":46},{"startCol":8,"endCol":55},{"startCol":27,"endCol":36},{"startCol":49,"endCol":50}]},"2923":{"partial":false,"source":"      : [];","missing":[{},{"startCol":8,"endCol":10}]},"2967":{"partial":false,"source":"    var low = 0,","missing":[{}]},"2968":{"partial":false,"source":"        high = array ? array.length : low;","missing":[{"startCol":23,"endCol":35},{"startCol":38,"endCol":41},{}]},"2971":{"partial":false,"source":"    callback = callback ? createCallback(callback, thisArg) : identity;","missing":[{"startCol":4,"endCol":71},{"startCol":26,"endCol":59},{"startCol":62,"endCol":70}]},"2972":{"partial":false,"source":"    value = callback(value);","missing":[{"startCol":4,"endCol":28},{"startCol":12,"endCol":27}]},"2973":{"partial":false,"source":"    while (low < high) {","missing":[{"startCol":11,"endCol":21}]},"2974":{"partial":false,"source":"      var mid = (low + high) >>> 1;","missing":[{"startCol":6,"endCol":35},{"startCol":16,"endCol":28}]},"2975":{"partial":false,"source":"      callback(array[mid]) < value","missing":[{},{"startCol":6,"endCol":26}]},"2976":{"partial":false,"source":"        ? low = mid + 1","missing":[{"startCol":10,"endCol":23},{},{"startCol":16,"endCol":23}]},"2977":{"partial":false,"source":"        : high = mid;","missing":[{},{"startCol":10,"endCol":20}]},"2979":{"partial":false,"source":"    return low;","missing":[{"startCol":4,"endCol":15}]},"2998":{"partial":false,"source":"    return uniq(concat.apply(arrayRef, arguments));","missing":[{"startCol":4,"endCol":51},{"startCol":11,"endCol":50},{"startCol":16,"endCol":49}]},"3033":{"partial":true,"source":"        length = array ? array.length : 0,","missing":[{"startCol":40,"endCol":41}]},"3039":{"partial":false,"source":"      thisArg = callback;","missing":[{"startCol":6,"endCol":25}]},"3040":{"partial":false,"source":"      callback = isSorted;","missing":[{"startCol":6,"endCol":26}]},"3041":{"partial":false,"source":"      isSorted = false;","missing":[{"startCol":6,"endCol":23}]},"3046":{"partial":false,"source":"      var cache = {};","missing":[{"startCol":6,"endCol":21}]},"3049":{"partial":false,"source":"      seen = [];","missing":[{"startCol":6,"endCol":16}]},"3050":{"partial":false,"source":"      callback = createCallback(callback, thisArg);","missing":[{"startCol":6,"endCol":51},{"startCol":17,"endCol":50}]},"3054":{"partial":true,"source":"          computed = callback ? callback(value, index, array) : value;","missing":[{"startCol":32,"endCol":61}]},"3059":{"partial":false,"source":"        seen = hasOwnProperty.call(cache, computed + '') ? cache[computed] : (cache[computed] = []);","missing":[{"startCol":8,"endCol":100},{"startCol":15,"endCol":56},{"startCol":42,"endCol":55},{"startCol":59,"endCol":74},{"startCol":77,"endCol":99}]},"3062":{"partial":false,"source":"            ? !index || seen[seen.length - 1] !== computed","missing":[{"startCol":14,"endCol":58},{"startCol":24,"endCol":58},{"startCol":29,"endCol":44}]},"3066":{"partial":false,"source":"          seen.push(computed);","missing":[{"startCol":10,"endCol":29}]},"3090":{"partial":false,"source":"    var index = -1,","missing":[{}]},"3091":{"partial":false,"source":"        length = array ? array.length : 0,","missing":[{"startCol":25,"endCol":37},{"startCol":40,"endCol":41},{}]},"3092":{"partial":false,"source":"        contains = cachedContains(arguments, 1, 20),","missing":[{"startCol":19,"endCol":51},{}]},"3093":{"partial":false,"source":"        result = [];","missing":[{}]},"3095":{"partial":false,"source":"    while (++index < length) {","missing":[{"startCol":11,"endCol":18}]},"3096":{"partial":false,"source":"      var value = array[index];","missing":[{"startCol":6,"endCol":31}]},"3097":{"partial":false,"source":"      if (!contains(value)) {","missing":[{"startCol":11,"endCol":26}]},"3098":{"partial":false,"source":"        result.push(value);","missing":[{"startCol":8,"endCol":26}]},"3101":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"3121":{"partial":false,"source":"    var index = -1,","missing":[{}]},"3122":{"partial":false,"source":"        length = array ? max(pluck(arguments, 'length')) : 0,","missing":[{"startCol":25,"endCol":56},{"startCol":29,"endCol":55},{},{"startCol":59,"endCol":60}]},"3123":{"partial":false,"source":"        result = Array(length);","missing":[{},{"startCol":17,"endCol":30}]},"3125":{"partial":false,"source":"    while (++index < length) {","missing":[{"startCol":11,"endCol":18}]},"3126":{"partial":false,"source":"      result[index] = pluck(arguments, index);","missing":[{"startCol":6,"endCol":46},{"startCol":22,"endCol":45}]},"3128":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"3154":{"partial":false,"source":"    if (n < 1) {","missing":[{"startCol":8,"endCol":13}]},"3155":{"partial":false,"source":"      return func();","missing":[{"startCol":6,"endCol":20},{"startCol":13,"endCol":19}]},"3157":{"partial":false,"source":"    return function() {","missing":[{}]},"3158":{"partial":false,"source":"      if (--n < 1) {","missing":[{"startCol":10,"endCol":13},{}]},"3159":{"partial":false,"source":"        return func.apply(this, arguments);","missing":[{"startCol":8,"endCol":43},{"startCol":15,"endCol":42},{}]},"3160":{"partial":false,"source":"      }","missing":[{}]},"3161":{"partial":false,"source":"    };","missing":[{}]},"3189":{"partial":false,"source":"    return isBindFast || (nativeBind && arguments.length > 2)","missing":[{"startCol":11,"endCol":61},{"startCol":25,"endCol":61},{},{"startCol":40,"endCol":60}]},"3190":{"partial":false,"source":"      ? nativeBind.call.apply(nativeBind, arguments)","missing":[{"startCol":8,"endCol":52},{}]},"3191":{"partial":false,"source":"      : createBound(func, thisArg, slice.call(arguments, 2));","missing":[{"startCol":8,"endCol":60},{"startCol":35,"endCol":59},{}]},"3217":{"partial":false,"source":"    var funcs = arguments,","missing":[{}]},"3218":{"partial":false,"source":"        index = funcs.length > 1 ? 0 : (funcs = functions(object), -1),","missing":[{"startCol":16,"endCol":32},{},{"startCol":35,"endCol":36},{"startCol":39,"endCol":70},{"startCol":48,"endCol":65}]},"3219":{"partial":false,"source":"        length = funcs.length;","missing":[{}]},"3221":{"partial":false,"source":"    while (++index < length) {","missing":[{"startCol":11,"endCol":18}]},"3222":{"partial":false,"source":"      var key = funcs[index];","missing":[{"startCol":6,"endCol":29}]},"3223":{"partial":false,"source":"      object[key] = bind(object[key], object);","missing":[{"startCol":6,"endCol":46},{"startCol":20,"endCol":45}]},"3225":{"partial":false,"source":"    return object;","missing":[{"startCol":4,"endCol":18}]},"3248":{"partial":false,"source":"    var funcs = arguments;","missing":[{"startCol":4,"endCol":26}]},"3249":{"partial":false,"source":"    return function() {","missing":[{}]},"3250":{"partial":false,"source":"      var args = arguments,","missing":[{}]},"3251":{"partial":false,"source":"          length = funcs.length;","missing":[{}]},"3252":{"partial":false,"source":"","missing":[{}]},"3253":{"partial":false,"source":"      while (length--) {","missing":[{},{"startCol":13,"endCol":21}]},"3254":{"partial":false,"source":"        args = [funcs[length].apply(this, args)];","missing":[{"startCol":16,"endCol":47},{},{"startCol":8,"endCol":49}]},"3255":{"partial":false,"source":"      }","missing":[{}]},"3256":{"partial":false,"source":"      return args[0];","missing":[{"startCol":6,"endCol":21},{}]},"3257":{"partial":false,"source":"    };","missing":[{}]},"3281":{"partial":false,"source":"    var args,","missing":[{}]},"3282":{"partial":false,"source":"        result,","missing":[{}]},"3283":{"partial":false,"source":"        thisArg,","missing":[{}]},"3284":{"partial":false,"source":"        timeoutId;","missing":[{}]},"3287":{"partial":false,"source":"      timeoutId = null;","missing":[{"startCol":6,"endCol":23}]},"3289":{"partial":false,"source":"        result = func.apply(thisArg, args);","missing":[{"startCol":8,"endCol":43},{"startCol":17,"endCol":42}]},"3292":{"partial":false,"source":"    return function() {","missing":[{}]},"3293":{"partial":false,"source":"      var isImmediate = immediate && !timeoutId;","missing":[{"startCol":6,"endCol":48},{"startCol":24,"endCol":47},{}]},"3294":{"partial":false,"source":"      args = arguments;","missing":[{},{"startCol":6,"endCol":23}]},"3295":{"partial":false,"source":"      thisArg = this;","missing":[{},{"startCol":6,"endCol":21}]},"3296":{"partial":false,"source":"","missing":[{}]},"3297":{"partial":false,"source":"      clearTimeout(timeoutId);","missing":[{},{"startCol":6,"endCol":29}]},"3298":{"partial":false,"source":"      timeoutId = setTimeout(delayed, wait);","missing":[{},{"startCol":6,"endCol":44},{"startCol":18,"endCol":43}]},"3299":{"partial":false,"source":"","missing":[{}]},"3300":{"partial":false,"source":"      if (isImmediate) {","missing":[{}]},"3301":{"partial":false,"source":"        result = func.apply(thisArg, args);","missing":[{},{"startCol":8,"endCol":43},{"startCol":17,"endCol":42}]},"3302":{"partial":false,"source":"      }","missing":[{}]},"3303":{"partial":false,"source":"      return result;","missing":[{"startCol":6,"endCol":20},{}]},"3304":{"partial":false,"source":"    };","missing":[{}]},"3325":{"partial":false,"source":"    var args = slice.call(arguments, 2);","missing":[{"startCol":4,"endCol":40},{"startCol":15,"endCol":39}]},"3326":{"partial":false,"source":"    return setTimeout(function() { func.apply(undefined, args); }, wait);","missing":[{"startCol":4,"endCol":73},{"startCol":11,"endCol":72},{"startCol":35,"endCol":62}]},"3345":{"partial":false,"source":"    var args = slice.call(arguments, 1);","missing":[{"startCol":4,"endCol":40},{"startCol":15,"endCol":39}]},"3346":{"partial":false,"source":"    return setTimeout(function() { func.apply(undefined, args); }, 1);","missing":[{"startCol":4,"endCol":70},{"startCol":11,"endCol":69},{"startCol":35,"endCol":62}]},"3383":{"partial":false,"source":"    return createBound(methodName, object, slice.call(arguments, 2));","missing":[{"startCol":4,"endCol":69},{"startCol":11,"endCol":68},{"startCol":43,"endCol":67}]},"3406":{"partial":false,"source":"    var cache = {};","missing":[{"startCol":4,"endCol":19}]},"3407":{"partial":false,"source":"    return function() {","missing":[{}]},"3408":{"partial":false,"source":"      var key = resolver ? resolver.apply(this, arguments) : arguments[0];","missing":[{"startCol":6,"endCol":74},{},{"startCol":27,"endCol":58},{"startCol":61,"endCol":73}]},"3409":{"partial":false,"source":"      return hasOwnProperty.call(cache, key)","missing":[{"startCol":13,"endCol":44},{}]},"3410":{"partial":false,"source":"        ? cache[key]","missing":[{"startCol":10,"endCol":20},{}]},"3411":{"partial":false,"source":"        : (cache[key] = func.apply(this, arguments));","missing":[{"startCol":10,"endCol":52},{"startCol":24,"endCol":51},{}]},"3412":{"partial":false,"source":"    };","missing":[{}]},"3433":{"partial":false,"source":"    var result,","missing":[{}]},"3434":{"partial":false,"source":"        ran = false;","missing":[{}]},"3436":{"partial":false,"source":"    return function() {","missing":[{}]},"3437":{"partial":false,"source":"      if (ran) {","missing":[{}]},"3438":{"partial":false,"source":"        return result;","missing":[{},{"startCol":8,"endCol":22}]},"3439":{"partial":false,"source":"      }","missing":[{}]},"3440":{"partial":false,"source":"      ran = true;","missing":[{"startCol":6,"endCol":17},{}]},"3441":{"partial":false,"source":"      result = func.apply(this, arguments);","missing":[{"startCol":15,"endCol":42},{},{"startCol":6,"endCol":43}]},"3442":{"partial":false,"source":"","missing":[{}]},"3443":{"partial":false,"source":"      // clear the `func` variable so the function may be garbage collected","missing":[{}]},"3444":{"partial":false,"source":"      func = null;","missing":[{},{"startCol":6,"endCol":18}]},"3445":{"partial":false,"source":"      return result;","missing":[{},{"startCol":6,"endCol":20}]},"3446":{"partial":false,"source":"    };","missing":[{}]},"3468":{"partial":false,"source":"    return createBound(func, slice.call(arguments, 1));","missing":[{"startCol":4,"endCol":55},{"startCol":11,"endCol":54},{"startCol":29,"endCol":53}]},"3490":{"partial":false,"source":"    var args,","missing":[{}]},"3491":{"partial":false,"source":"        result,","missing":[{}]},"3492":{"partial":false,"source":"        thisArg,","missing":[{}]},"3493":{"partial":false,"source":"        timeoutId,","missing":[{}]},"3494":{"partial":false,"source":"        lastCalled = 0;","missing":[{}]},"3497":{"partial":false,"source":"      lastCalled = new Date;","missing":[{"startCol":6,"endCol":28}]},"3498":{"partial":false,"source":"      timeoutId = null;","missing":[{"startCol":6,"endCol":23}]},"3499":{"partial":false,"source":"      result = func.apply(thisArg, args);","missing":[{"startCol":6,"endCol":41},{"startCol":15,"endCol":40}]},"3501":{"partial":false,"source":"    return function() {","missing":[{}]},"3502":{"partial":false,"source":"      var now = new Date,","missing":[{}]},"3503":{"partial":false,"source":"          remaining = wait - (now - lastCalled);","missing":[{"startCol":29,"endCol":47},{},{"startCol":22,"endCol":47}]},"3504":{"partial":false,"source":"","missing":[{}]},"3505":{"partial":false,"source":"      args = arguments;","missing":[{},{"startCol":6,"endCol":23}]},"3506":{"partial":false,"source":"      thisArg = this;","missing":[{},{"startCol":6,"endCol":21}]},"3507":{"partial":false,"source":"","missing":[{}]},"3508":{"partial":false,"source":"      if (remaining <= 0) {","missing":[{},{"startCol":10,"endCol":24}]},"3509":{"partial":false,"source":"        clearTimeout(timeoutId);","missing":[{"startCol":8,"endCol":32},{}]},"3510":{"partial":false,"source":"        lastCalled = now;","missing":[{"startCol":8,"endCol":25},{}]},"3511":{"partial":false,"source":"        result = func.apply(thisArg, args);","missing":[{"startCol":8,"endCol":43},{"startCol":17,"endCol":42},{}]},"3512":{"partial":false,"source":"      }","missing":[{}]},"3513":{"partial":false,"source":"      else if (!timeoutId) {","missing":[{}]},"3514":{"partial":false,"source":"        timeoutId = setTimeout(trailingCall, remaining);","missing":[{"startCol":20,"endCol":55},{},{"startCol":8,"endCol":56}]},"3515":{"partial":false,"source":"      }","missing":[{}]},"3516":{"partial":false,"source":"      return result;","missing":[{},{"startCol":6,"endCol":20}]},"3517":{"partial":false,"source":"    };","missing":[{}]},"3542":{"partial":false,"source":"    return function() {","missing":[{}]},"3543":{"partial":false,"source":"      var args = [value];","missing":[{"startCol":6,"endCol":25},{}]},"3544":{"partial":false,"source":"      push.apply(args, arguments);","missing":[{"startCol":6,"endCol":33},{}]},"3545":{"partial":false,"source":"      return wrapper.apply(this, args);","missing":[{"startCol":6,"endCol":39},{},{"startCol":13,"endCol":38}]},"3546":{"partial":false,"source":"    };","missing":[{}]},"3566":{"partial":false,"source":"    return string == null ? '' : (string + '').replace(reUnescapedHtml, escapeHtmlChar);","missing":[{"startCol":4,"endCol":88},{"startCol":11,"endCol":25},{"startCol":28,"endCol":30},{"startCol":33,"endCol":46}]},"3586":{"partial":false,"source":"    return value;","missing":[{"startCol":4,"endCol":17}]},"3642":{"partial":false,"source":"    window._ = oldDash;","missing":[{"startCol":4,"endCol":23}]},"3643":{"partial":false,"source":"    return this;","missing":[{"startCol":4,"endCol":16}]},"3665":{"partial":false,"source":"    if (min == null && max == null) {","missing":[{"startCol":8,"endCol":19},{"startCol":23,"endCol":34}]},"3666":{"partial":false,"source":"      max = 1;","missing":[{"startCol":6,"endCol":14}]},"3668":{"partial":false,"source":"    min = +min || 0;","missing":[{"startCol":4,"endCol":20},{"startCol":10,"endCol":19}]},"3669":{"partial":false,"source":"    if (max == null) {","missing":[{"startCol":8,"endCol":19}]},"3670":{"partial":false,"source":"      max = min;","missing":[{"startCol":6,"endCol":16}]},"3671":{"partial":false,"source":"      min = 0;","missing":[{"startCol":6,"endCol":14}]},"3673":{"partial":false,"source":"    return min + floor(nativeRandom() * ((+max || 0) - min + 1));","missing":[{"startCol":4,"endCol":65},{"startCol":11,"endCol":64},{"startCol":17,"endCol":64},{"startCol":23,"endCol":37},{"startCol":40,"endCol":63},{"startCol":41,"endCol":52}]},"3706":{"partial":false,"source":"    var value = object ? object[property] : null;","missing":[{"startCol":4,"endCol":49},{"startCol":25,"endCol":41},{"startCol":44,"endCol":48}]},"3707":{"partial":false,"source":"    return isFunction(value) ? object[property]() : value;","missing":[{"startCol":4,"endCol":58},{"startCol":11,"endCol":28},{"startCol":31,"endCol":49},{"startCol":52,"endCol":57}]},"3809":{"partial":true,"source":"      (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +","missing":[{"startCol":54,"endCol":63}]},"3821":{"partial":false,"source":"        escapeValue ? \"' +\\n__e(\" + escapeValue + \") +\\n'\" :","missing":[{"startCol":22,"endCol":47}]},"3825":{"partial":true,"source":"      isEvaluating || (isEvaluating = evaluateValue || reComplexDelimiter.test(escapeValue || interpolateValue));","missing":[{"startCol":55,"endCol":111},{"startCol":79,"endCol":110}]},"3841":{"partial":false,"source":"        var reDoubleVariable = RegExp('(\\\\(\\\\s*)' + variable + '\\\\.' + variable + '\\\\b', 'g');","missing":[{"startCol":8,"endCol":94},{"startCol":31,"endCol":93},{"startCol":38,"endCol":60}]},"3842":{"partial":false,"source":"        source = source","missing":[{}]},"3843":{"partial":false,"source":"          .replace(reInsertVariable, '$&' + variable + '.')","missing":[{"startCol":18,"endCol":59},{"startCol":37,"endCol":58},{}]},"3844":{"partial":false,"source":"          .replace(reDoubleVariable, '$1__d');","missing":[{}]},"3849":{"partial":true,"source":"    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)","missing":[{"startCol":72,"endCol":78}]},"3855":{"partial":true,"source":"      (hasVariable ? '' : variable + ' || (' + variable + ' = {});\\n') +","missing":[{"startCol":21,"endCol":23}]},"3860":{"partial":false,"source":"        : (hasVariable ? '' : ', __d = ' + variable + '.' + variable + ' || ' + variable) + ';\\n'","missing":[{"startCol":10,"endCol":97},{"startCol":25,"endCol":27},{"startCol":30,"endCol":51}]},"3869":{"partial":false,"source":"      : '';","missing":[{"startCol":8,"endCol":10}]},"3874":{"partial":false,"source":"      e.source = source;","missing":[{"startCol":6,"endCol":24}]},"3875":{"partial":false,"source":"      throw e;","missing":[{"startCol":6,"endCol":14}]},"3879":{"partial":false,"source":"      return result(data);","missing":[{"startCol":6,"endCol":26},{"startCol":13,"endCol":25}]},"3912":{"partial":false,"source":"    n = +n || 0;","missing":[{"startCol":4,"endCol":16},{"startCol":8,"endCol":15}]},"3913":{"partial":false,"source":"    var index = -1,","missing":[{}]},"3914":{"partial":false,"source":"        result = Array(n);","missing":[{},{"startCol":17,"endCol":25}]},"3916":{"partial":false,"source":"    while (++index < n) {","missing":[{"startCol":11,"endCol":18}]},"3917":{"partial":false,"source":"      result[index] = callback.call(thisArg, index);","missing":[{"startCol":6,"endCol":52},{"startCol":22,"endCol":51}]},"3919":{"partial":false,"source":"    return result;","missing":[{"startCol":4,"endCol":18}]},"3938":{"partial":false,"source":"    return string == null ? '' : (string + '').replace(reEscapedHtml, unescapeHtmlChar);","missing":[{"startCol":4,"endCol":88},{"startCol":11,"endCol":25},{"startCol":28,"endCol":30},{"startCol":33,"endCol":46}]},"3956":{"partial":false,"source":"    var id = idCounter++;","missing":[{"startCol":4,"endCol":25},{"startCol":13,"endCol":24}]},"3957":{"partial":false,"source":"    return prefix ? prefix + id : id;","missing":[{"startCol":4,"endCol":37},{"startCol":20,"endCol":31},{"startCol":34,"endCol":36}]},"4013":{"partial":false,"source":"    interceptor(value);","missing":[{"startCol":4,"endCol":22}]},"4014":{"partial":false,"source":"    return value;","missing":[{"startCol":4,"endCol":17}]},"4031":{"partial":false,"source":"    this.__chain__ = true;","missing":[{"startCol":4,"endCol":26}]},"4032":{"partial":false,"source":"    return this;","missing":[{"startCol":4,"endCol":16}]},"4194":{"partial":false,"source":"      var value = this.__wrapped__;","missing":[{"startCol":6,"endCol":35}]},"4195":{"partial":false,"source":"      func.apply(value, arguments);","missing":[{"startCol":6,"endCol":34}]},"4199":{"partial":false,"source":"      if (hasObjectSpliceBug && value.length === 0) {","missing":[{"startCol":10,"endCol":50},{"startCol":32,"endCol":50}]},"4200":{"partial":false,"source":"        delete value[0];","missing":[{"startCol":8,"endCol":24}]},"4203":{"partial":false,"source":"        value = new lodash(value);","missing":[{"startCol":8,"endCol":34}]},"4204":{"partial":false,"source":"        value.__chain__ = true;","missing":[{"startCol":8,"endCol":31}]},"4206":{"partial":false,"source":"      return value;","missing":[{"startCol":6,"endCol":19}]},"4215":{"partial":false,"source":"      var value = this.__wrapped__,","missing":[{}]},"4216":{"partial":false,"source":"          result = func.apply(value, arguments);","missing":[{"startCol":19,"endCol":47},{}]},"4219":{"partial":false,"source":"        result = new lodash(result);","missing":[{"startCol":8,"endCol":36}]},"4220":{"partial":false,"source":"        result.__chain__ = true;","missing":[{"startCol":8,"endCol":32}]},"4222":{"partial":false,"source":"      return result;","missing":[{"startCol":6,"endCol":20}]},"4230":{"partial":true,"source":"  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {","missing":[{"startCol":37,"endCol":66}]},"4235":{"partial":false,"source":"    window._ = lodash;","missing":[{"startCol":4,"endCol":22}]},"4239":{"partial":false,"source":"    define(function() {","missing":[{}]},"4240":{"partial":false,"source":"      return lodash;","missing":[{"startCol":6,"endCol":20},{}]},"4241":{"partial":false,"source":"    });","missing":[{}]},"4251":{"partial":false,"source":"      freeExports._ = lodash;","missing":[{"startCol":6,"endCol":29}]},"4256":{"partial":false,"source":"    window._ = lodash;","missing":[{"startCol":4,"endCol":22}]}},"source":"/*!\n * Lo-Dash v0.9.2 <http://lodash.com>\n * (c) 2012 John-David Dalton <http://allyoucanleet.com/>\n * Based on Underscore.js 1.4.2 <http://underscorejs.org>\n * (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.\n * Available under MIT license <http://lodash.com/license>\n */\n;(function(window, undefined) {\n\n  /** Detect free variable `exports` */\n  var freeExports = typeof exports == 'object' && exports;\n\n  /** Detect free variable `global` and use it as `window` */\n  var freeGlobal = typeof global == 'object' && global;\n  if (freeGlobal.global === freeGlobal) {\n    window = freeGlobal;\n  }\n\n  /** Used for array and object method references */\n  var arrayRef = [],\n      // avoid a Closure Compiler bug by creatively creating an object\n      objectRef = new function(){};\n\n  /** Used to generate unique IDs */\n  var idCounter = 0;\n\n  /** Used internally to indicate various things */\n  var indicatorObject = objectRef;\n\n  /** Used by `cachedContains` as the default size when optimizations are enabled for large arrays */\n  var largeArraySize = 30;\n\n  /** Used to restore the original `_` reference in `noConflict` */\n  var oldDash = window._;\n\n  /** Used to detect template delimiter values that require a with-statement */\n  var reComplexDelimiter = /[-?+=!~*%&^<>|{(\\/]|\\[\\D|\\b(?:delete|in|instanceof|new|typeof|void)\\b/;\n\n  /** Used to match HTML entities */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#x27);/g;\n\n  /** Used to match empty string literals in compiled template source */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match regexp flags from their coerced string values */\n  var reFlags = /\\w*$/;\n\n  /** Used to insert the data object variable into compiled template source */\n  var reInsertVariable = /(?:__e|__t = )\\(\\s*(?![\\d\\s\"']|this\\.)/g;\n\n  /** Used to detect if a method is native */\n  var reNative = RegExp('^' +\n    (objectRef.valueOf + '')\n      .replace(/[.*+?^=!:${}()|[\\]\\/\\\\]/g, '\\\\$&')\n      .replace(/valueOf|for [^\\]]+/g, '.+?') + '$'\n  );\n\n  /**\n   * Used to match ES6 template delimiters\n   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6\n   */\n  var reEsTemplate = /\\$\\{((?:(?=\\\\?)\\\\?[\\s\\S])*?)}/g;\n\n  /** Used to match \"interpolate\" template delimiters */\n  var reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to ensure capturing order of template delimiters */\n  var reNoMatch = /($^)/;\n\n  /** Used to match HTML characters */\n  var reUnescapedHtml = /[&<>\"']/g;\n\n  /** Used to match unescaped characters in compiled string literals */\n  var reUnescapedString = /['\\n\\r\\t\\u2028\\u2029\\\\]/g;\n\n  /** Used to fix the JScript [[DontEnum]] bug */\n  var shadowed = [\n    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',\n    'toLocaleString', 'toString', 'valueOf'\n  ];\n\n  /** Used to make template sourceURLs easier to identify */\n  var templateCounter = 0;\n\n  /** Native method shortcuts */\n  var ceil = Math.ceil,\n      concat = arrayRef.concat,\n      floor = Math.floor,\n      getPrototypeOf = reNative.test(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,\n      hasOwnProperty = objectRef.hasOwnProperty,\n      push = arrayRef.push,\n      propertyIsEnumerable = objectRef.propertyIsEnumerable,\n      slice = arrayRef.slice,\n      toString = objectRef.toString;\n\n  /* Native method shortcuts for methods with the same name as other `lodash` methods */\n  var nativeBind = reNative.test(nativeBind = slice.bind) && nativeBind,\n      nativeIsArray = reNative.test(nativeIsArray = Array.isArray) && nativeIsArray,\n      nativeIsFinite = window.isFinite,\n      nativeIsNaN = window.isNaN,\n      nativeKeys = reNative.test(nativeKeys = Object.keys) && nativeKeys,\n      nativeMax = Math.max,\n      nativeMin = Math.min,\n      nativeRandom = Math.random;\n\n  /** `Object#toString` result shortcuts */\n  var argsClass = '[object Arguments]',\n      arrayClass = '[object Array]',\n      boolClass = '[object Boolean]',\n      dateClass = '[object Date]',\n      funcClass = '[object Function]',\n      numberClass = '[object Number]',\n      objectClass = '[object Object]',\n      regexpClass = '[object RegExp]',\n      stringClass = '[object String]';\n\n  /**\n   * Detect the JScript [[DontEnum]] bug:\n   *\n   * In IE < 9 an objects own properties, shadowing non-enumerable ones, are\n   * made non-enumerable as well.\n   */\n  var hasDontEnumBug;\n\n  /** Detect if own properties are iterated after inherited properties (IE < 9) */\n  var iteratesOwnLast;\n\n  /**\n   * Detect if `Array#shift` and `Array#splice` augment array-like objects\n   * incorrectly:\n   *\n   * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`\n   * and `splice()` functions that fail to remove the last element, `value[0]`,\n   * of array-like objects even though the `length` property is set to `0`.\n   * The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`\n   * is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.\n   */\n  var hasObjectSpliceBug = (hasObjectSpliceBug = { '0': 1, 'length': 1 },\n    arrayRef.splice.call(hasObjectSpliceBug, 0, 1), hasObjectSpliceBug[0]);\n\n  /** Detect if an `arguments` object's indexes are non-enumerable (IE < 9) */\n  var noArgsEnum = true;\n\n  (function() {\n    var props = [];\n    function ctor() { this.x = 1; }\n    ctor.prototype = { 'valueOf': 1, 'y': 1 };\n    for (var prop in new ctor) { props.push(prop); }\n    for (prop in arguments) { noArgsEnum = !prop; }\n\n    hasDontEnumBug = !/valueOf/.test(props);\n    iteratesOwnLast = props[0] != 'x';\n  }(1));\n\n  /** Detect if an `arguments` object's [[Class]] is unresolvable (Firefox < 4, IE < 9) */\n  var noArgsClass = !isArguments(arguments);\n\n  /** Detect if `Array#slice` cannot be used to convert strings to arrays (Opera < 10.52) */\n  var noArraySliceOnStrings = slice.call('x')[0] != 'x';\n\n  /**\n   * Detect lack of support for accessing string characters by index:\n   *\n   * IE < 8 can't access characters by index and IE 8 can only access\n   * characters by index on string literals.\n   */\n  var noCharByIndex = ('x'[0] + Object('x')[0]) != 'xx';\n\n  /**\n   * Detect if a node's [[Class]] is unresolvable (IE < 9)\n   * and that the JS engine won't error when attempting to coerce an object to\n   * a string without a `toString` property value of `typeof` \"function\".\n   */\n  try {\n    var noNodeClass = ({ 'toString': 0 } + '', toString.call(window.document || 0) == objectClass);\n  } catch(e) { }\n\n  /* Detect if `Function#bind` exists and is inferred to be fast (all but V8) */\n  var isBindFast = nativeBind && /\\n|Opera/.test(nativeBind + toString.call(window.opera));\n\n  /* Detect if `Object.keys` exists and is inferred to be fast (IE, Opera, V8) */\n  var isKeysFast = nativeKeys && /^.+$|true/.test(nativeKeys + !!window.attachEvent);\n\n  /**\n   * Detect if sourceURL syntax is usable without erroring:\n   *\n   * The JS engine in Adobe products, like InDesign, will throw a syntax error\n   * when it encounters a single line comment beginning with the `@` symbol.\n   *\n   * The JS engine in Narwhal will generate the function `function anonymous(){//}`\n   * and throw a syntax error.\n   *\n   * Avoid comments beginning `@` symbols in IE because they are part of its\n   * non-standard conditional compilation support.\n   * http://msdn.microsoft.com/en-us/library/121hztk3(v=vs.94).aspx\n   */\n  try {\n    var useSourceURL = (Function('//@')(), !window.attachEvent);\n  } catch(e) { }\n\n  /** Used to identify object classifications that `_.clone` supports */\n  var cloneableClasses = {};\n  cloneableClasses[argsClass] = cloneableClasses[funcClass] = false;\n  cloneableClasses[arrayClass] = cloneableClasses[boolClass] = cloneableClasses[dateClass] =\n  cloneableClasses[numberClass] = cloneableClasses[objectClass] = cloneableClasses[regexpClass] =\n  cloneableClasses[stringClass] = true;\n\n  /** Used to determine if values are of the language type Object */\n  var objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\t': 't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The `lodash` function.\n   *\n   * @name _\n   * @constructor\n   * @category Chaining\n   * @param {Mixed} value The value to wrap in a `lodash` instance.\n   * @returns {Object} Returns a `lodash` instance.\n   */\n  function lodash(value) {\n    // exit early if already wrapped\n    if (value && value.__wrapped__) {\n      return value;\n    }\n    // allow invoking `lodash` without the `new` operator\n    if (!(this instanceof lodash)) {\n      return new lodash(value);\n    }\n    this.__wrapped__ = value;\n  }\n\n  /**\n   * By default, the template delimiters used by Lo-Dash are similar to those in\n   * embedded Ruby (ERB). Change the following template settings to use alternative\n   * delimiters.\n   *\n   * @static\n   * @memberOf _\n   * @type Object\n   */\n  lodash.templateSettings = {\n\n    /**\n     * Used to detect `data` property values to be HTML-escaped.\n     *\n     * @static\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'escape': /<%-([\\s\\S]+?)%>/g,\n\n    /**\n     * Used to detect code to be evaluated.\n     *\n     * @static\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'evaluate': /<%([\\s\\S]+?)%>/g,\n\n    /**\n     * Used to detect `data` property values to inject.\n     *\n     * @static\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'interpolate': reInterpolate,\n\n    /**\n     * Used to reference the data object in the template text.\n     *\n     * @static\n     * @memberOf _.templateSettings\n     * @type String\n     */\n    'variable': ''\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The template used to create iterator functions.\n   *\n   * @private\n   * @param {Obect} data The data object used to populate the text.\n   * @returns {String} Returns the interpolated text.\n   */\n  var iteratorTemplate = template(\n    // conditional strict mode\n    '<% if (obj.useStrict) { %>\\'use strict\\';\\n<% } %>' +\n\n    // the `iteratee` may be reassigned by the `top` snippet\n    'var index, value, iteratee = <%= firstArg %>, ' +\n    // assign the `result` variable an initial value\n    'result = <%= firstArg %>;\\n' +\n    // exit early if the first argument is falsey\n    'if (!<%= firstArg %>) return result;\\n' +\n    // add code before the iteration branches\n    '<%= top %>;\\n' +\n\n    // array-like iteration:\n    '<% if (arrayLoop) { %>' +\n    'var length = iteratee.length; index = -1;\\n' +\n    'if (typeof length == \\'number\\') {' +\n\n    // add support for accessing string characters by index if needed\n    '  <% if (noCharByIndex) { %>\\n' +\n    '  if (isString(iteratee)) {\\n' +\n    '    iteratee = iteratee.split(\\'\\')\\n' +\n    '  }' +\n    '  <% } %>\\n' +\n\n    // iterate over the array-like value\n    '  while (++index < length) {\\n' +\n    '    value = iteratee[index];\\n' +\n    '    <%= arrayLoop %>\\n' +\n    '  }\\n' +\n    '}\\n' +\n    'else {' +\n\n    // object iteration:\n    // add support for iterating over `arguments` objects if needed\n    '  <%  } else if (noArgsEnum) { %>\\n' +\n    '  var length = iteratee.length; index = -1;\\n' +\n    '  if (length && isArguments(iteratee)) {\\n' +\n    '    while (++index < length) {\\n' +\n    '      value = iteratee[index += \\'\\'];\\n' +\n    '      <%= objectLoop %>\\n' +\n    '    }\\n' +\n    '  } else {' +\n    '  <% } %>' +\n\n    // Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1\n    // (if the prototype or a property on the prototype has been set)\n    // incorrectly sets a function's `prototype` property [[Enumerable]]\n    // value to `true`. Because of this Lo-Dash standardizes on skipping\n    // the the `prototype` property of functions regardless of its\n    // [[Enumerable]] value.\n    '  <% if (!hasDontEnumBug) { %>\\n' +\n    '  var skipProto = typeof iteratee == \\'function\\' && \\n' +\n    '    propertyIsEnumerable.call(iteratee, \\'prototype\\');\\n' +\n    '  <% } %>' +\n\n    // iterate own properties using `Object.keys` if it's fast\n    '  <% if (isKeysFast && useHas) { %>\\n' +\n    '  var ownIndex = -1,\\n' +\n    '      ownProps = objectTypes[typeof iteratee] ? nativeKeys(iteratee) : [],\\n' +\n    '      length = ownProps.length;\\n\\n' +\n    '  while (++ownIndex < length) {\\n' +\n    '    index = ownProps[ownIndex];\\n' +\n    '    <% if (!hasDontEnumBug) { %>if (!(skipProto && index == \\'prototype\\')) {\\n  <% } %>' +\n    '    value = iteratee[index];\\n' +\n    '    <%= objectLoop %>\\n' +\n    '    <% if (!hasDontEnumBug) { %>}\\n<% } %>' +\n    '  }' +\n\n    // else using a for-in loop\n    '  <% } else { %>\\n' +\n    '  for (index in iteratee) {<%' +\n    '    if (!hasDontEnumBug || useHas) { %>\\n    if (<%' +\n    '      if (!hasDontEnumBug) { %>!(skipProto && index == \\'prototype\\')<% }' +\n    '      if (!hasDontEnumBug && useHas) { %> && <% }' +\n    '      if (useHas) { %>hasOwnProperty.call(iteratee, index)<% }' +\n    '    %>) {' +\n    '    <% } %>\\n' +\n    '    value = iteratee[index];\\n' +\n    '    <%= objectLoop %>;' +\n    '    <% if (!hasDontEnumBug || useHas) { %>\\n    }<% } %>\\n' +\n    '  }' +\n    '  <% } %>' +\n\n    // Because IE < 9 can't set the `[[Enumerable]]` attribute of an\n    // existing property and the `constructor` property of a prototype\n    // defaults to non-enumerable, Lo-Dash skips the `constructor`\n    // property when it infers it's iterating over a `prototype` object.\n    '  <% if (hasDontEnumBug) { %>\\n\\n' +\n    '  var ctor = iteratee.constructor;\\n' +\n    '    <% for (var k = 0; k < 7; k++) { %>\\n' +\n    '  index = \\'<%= shadowed[k] %>\\';\\n' +\n    '  if (<%' +\n    '      if (shadowed[k] == \\'constructor\\') {' +\n    '        %>!(ctor && ctor.prototype === iteratee) && <%' +\n    '      } %>hasOwnProperty.call(iteratee, index)) {\\n' +\n    '    value = iteratee[index];\\n' +\n    '    <%= objectLoop %>\\n' +\n    '  }' +\n    '    <% } %>' +\n    '  <% } %>' +\n    '  <% if (arrayLoop || noArgsEnum) { %>\\n}<% } %>\\n' +\n\n    // add code to the bottom of the iteration function\n    '<%= bottom %>;\\n' +\n    // finally, return the `result`\n    'return result'\n  );\n\n  /**\n   * Reusable iterator options shared by `forEach`, `forIn`, and `forOwn`.\n   */\n  var forEachIteratorOptions = {\n    'args': 'collection, callback, thisArg',\n    'top': 'callback = createCallback(callback, thisArg)',\n    'arrayLoop': 'if (callback(value, index, collection) === false) return result',\n    'objectLoop': 'if (callback(value, index, collection) === false) return result'\n  };\n\n  /** Reusable iterator options for `defaults`, and `extend` */\n  var extendIteratorOptions = {\n    'useHas': false,\n    'args': 'object',\n    'top':\n      'for (var argsIndex = 1, argsLength = arguments.length; argsIndex < argsLength; argsIndex++) {\\n' +\n      '  if (iteratee = arguments[argsIndex]) {',\n    'objectLoop': 'result[index] = value',\n    'bottom': '  }\\n}'\n  };\n\n  /** Reusable iterator options for `forIn` and `forOwn` */\n  var forOwnIteratorOptions = {\n    'arrayLoop': null\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a function optimized to search large arrays for a given `value`,\n   * starting at `fromIndex`, using strict equality for comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Number} [fromIndex=0] The index to search from.\n   * @param {Number} [largeSize=30] The length at which an array is considered large.\n   * @returns {Boolean} Returns `true` if `value` is found, else `false`.\n   */\n  function cachedContains(array, fromIndex, largeSize) {\n    fromIndex || (fromIndex = 0);\n\n    var length = array.length,\n        isLarge = (length - fromIndex) >= (largeSize || largeArraySize);\n\n    if (isLarge) {\n      var cache = {},\n          index = fromIndex - 1;\n\n      while (++index < length) {\n        // manually coerce `value` to a string because `hasOwnProperty`, in some\n        // older versions of Firefox, coerces objects incorrectly\n        var key = array[index] + '';\n        (hasOwnProperty.call(cache, key) ? cache[key] : (cache[key] = [])).push(array[index]);\n      }\n    }\n    return function(value) {\n      if (isLarge) {\n        var key = value + '';\n        return hasOwnProperty.call(cache, key) && indexOf(cache[key], value) > -1;\n      }\n      return indexOf(array, value, fromIndex) > -1;\n    }\n  }\n\n  /**\n   * Used by `_.max` and `_.min` as the default `callback` when a given\n   * `collection` is a string value.\n   *\n   * @private\n   * @param {String} value The character to inspect.\n   * @returns {Number} Returns the code unit of given character.\n   */\n  function charAtCallback(value) {\n    return value.charCodeAt(0);\n  }\n\n  /**\n   * Used by `sortBy` to compare transformed `collection` values, stable sorting\n   * them in ascending order.\n   *\n   * @private\n   * @param {Object} a The object to compare to `b`.\n   * @param {Object} b The object to compare to `a`.\n   * @returns {Number} Returns the sort order indicator of `1` or `-1`.\n   */\n  function compareAscending(a, b) {\n    var ai = a.index,\n        bi = b.index;\n\n    a = a.criteria;\n    b = b.criteria;\n\n    // ensure a stable sort in V8 and other engines\n    // http://code.google.com/p/v8/issues/detail?id=90\n    if (a !== b) {\n      if (a > b || a === undefined) {\n        return 1;\n      }\n      if (a < b || b === undefined) {\n        return -1;\n      }\n    }\n    return ai < bi ? -1 : 1;\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with the `this`\n   * binding of `thisArg` and prepends any `partailArgs` to the arguments passed\n   * to the bound function.\n   *\n   * @private\n   * @param {Function|String} func The function to bind or the method name.\n   * @param {Mixed} [thisArg] The `this` binding of `func`.\n   * @param {Array} partialArgs An array of arguments to be partially applied.\n   * @returns {Function} Returns the new bound function.\n   */\n  function createBound(func, thisArg, partialArgs) {\n    var isFunc = isFunction(func),\n        isPartial = !partialArgs,\n        methodName = func;\n\n    // juggle arguments\n    if (isPartial) {\n      partialArgs = thisArg;\n    }\n\n    function bound() {\n      // `Function#bind` spec\n      // http://es5.github.com/#x15.3.4.5\n      var args = arguments,\n          thisBinding = isPartial ? this : thisArg;\n\n      if (!isFunc) {\n        func = thisArg[methodName];\n      }\n      if (partialArgs.length) {\n        args = args.length\n          ? partialArgs.concat(slice.call(args))\n          : partialArgs;\n      }\n      if (this instanceof bound) {\n        // get `func` instance if `bound` is invoked in a `new` expression\n        noop.prototype = func.prototype;\n        thisBinding = new noop;\n\n        // mimic the constructor's `return` behavior\n        // http://es5.github.com/#x13.2.2\n        var result = func.apply(thisBinding, args);\n        return isObject(result)\n          ? result\n          : thisBinding\n      }\n      return func.apply(thisBinding, args);\n    }\n    return bound;\n  }\n\n  /**\n   * Produces an iteration callback bound to an optional `thisArg`. If `func` is\n   * a property name, the callback will return the property value for a given element.\n   *\n   * @private\n   * @param {Function|String} [func=identity|property] The function called per\n   * iteration or property name to query.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Function} Returns a callback function.\n   */\n  function createCallback(func, thisArg) {\n    if (!func) {\n      return identity;\n    }\n    if (typeof func != 'function') {\n      return function(object) {\n        return object[func];\n      };\n    }\n    if (thisArg !== undefined) {\n      return function(value, index, object) {\n        return func.call(thisArg, value, index, object);\n      };\n    }\n    return func;\n  }\n\n  /**\n   * Creates compiled iteration functions.\n   *\n   * @private\n   * @param {Object} [options1, options2, ...] The compile options object(s).\n   *  useHas - A boolean to specify using `hasOwnProperty` checks in the object loop.\n   *  args - A string of comma separated arguments the iteration function will accept.\n   *  top - A string of code to execute before the iteration branches.\n   *  arrayLoop - A string of code to execute in the array loop.\n   *  objectLoop - A string of code to execute in the object loop.\n   *  bottom - A string of code to execute after the iteration branches.\n   *\n   * @returns {Function} Returns the compiled function.\n   */\n  function createIterator() {\n    var data = {\n      'arrayLoop': '',\n      'bottom': '',\n      'hasDontEnumBug': hasDontEnumBug,\n      'isKeysFast': isKeysFast,\n      'objectLoop': '',\n      'noArgsEnum': noArgsEnum,\n      'noCharByIndex': noCharByIndex,\n      'shadowed': shadowed,\n      'top': '',\n      'useHas': true\n    };\n\n    // merge options into a template data object\n    for (var object, index = 0; object = arguments[index]; index++) {\n      for (var key in object) {\n        data[key] = object[key];\n      }\n    }\n    var args = data.args;\n    data.firstArg = /^[^,]+/.exec(args)[0];\n\n    // create the function factory\n    var factory = Function(\n        'createCallback, hasOwnProperty, isArguments, isString, objectTypes, ' +\n        'nativeKeys, propertyIsEnumerable',\n      'return function(' + args + ') {\\n' + iteratorTemplate(data) + '\\n}'\n    );\n    // return the compiled function\n    return factory(\n      createCallback, hasOwnProperty, isArguments, isString, objectTypes,\n      nativeKeys, propertyIsEnumerable\n    );\n  }\n\n  /**\n   * Used by `template` to escape characters for inclusion in compiled\n   * string literals.\n   *\n   * @private\n   * @param {String} match The matched character to escape.\n   * @returns {String} Returns the escaped character.\n   */\n  function escapeStringChar(match) {\n    return '\\\\' + stringEscapes[match];\n  }\n\n  /**\n   * Used by `escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {String} match The matched character to escape.\n   * @returns {String} Returns the escaped character.\n   */\n  function escapeHtmlChar(match) {\n    return htmlEscapes[match];\n  }\n\n  /**\n   * A no-operation function.\n   *\n   * @private\n   */\n  function noop() {\n    // no operation performed\n  }\n\n  /**\n   * Used by `unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {String} match The matched character to unescape.\n   * @returns {String} Returns the unescaped character.\n   */\n  function unescapeHtmlChar(match) {\n    return htmlUnescapes[match];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Checks if `value` is an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is an `arguments` object, else `false`.\n   * @example\n   *\n   * (function() { return _.isArguments(arguments); })(1, 2, 3);\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  function isArguments(value) {\n    return toString.call(value) == argsClass;\n  }\n  // fallback for browsers that can't detect `arguments` objects by [[Class]]\n  if (noArgsClass) {\n    isArguments = function(value) {\n      return value ? hasOwnProperty.call(value, 'callee') : false;\n    };\n  }\n\n  /**\n   * Iterates over `object`'s own and inherited enumerable properties, executing\n   * the `callback` for each property. The `callback` is bound to `thisArg` and\n   * invoked with three arguments; (value, key, object). Callbacks may exit iteration\n   * early by explicitly returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * function Dog(name) {\n   *   this.name = name;\n   * }\n   *\n   * Dog.prototype.bark = function() {\n   *   alert('Woof, woof!');\n   * };\n   *\n   * _.forIn(new Dog('Dagny'), function(value, key) {\n   *   alert(key);\n   * });\n   * // => alerts 'name' and 'bark' (order is not guaranteed)\n   */\n  var forIn = createIterator(forEachIteratorOptions, forOwnIteratorOptions, {\n    'useHas': false\n  });\n\n  /**\n   * Iterates over `object`'s own enumerable properties, executing the `callback`\n   * for each property. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, key, object). Callbacks may exit iteration early by explicitly\n   * returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n   *   alert(key);\n   * });\n   * // => alerts '0', '1', and 'length' (order is not guaranteed)\n   */\n  var forOwn = createIterator(forEachIteratorOptions, forOwnIteratorOptions);\n\n  /**\n   * A fallback implementation of `isPlainObject` that checks if a given `value`\n   * is an object created by the `Object` constructor, assuming objects created\n   * by the `Object` constructor have no inherited enumerable properties and that\n   * there are no `Object.prototype` extensions.\n   *\n   * @private\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if `value` is a plain object, else `false`.\n   */\n  function shimIsPlainObject(value) {\n    // avoid non-objects and false positives for `arguments` objects\n    var result = false;\n    if (!(value && typeof value == 'object') || isArguments(value)) {\n      return result;\n    }\n    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`\n    // methods that are `typeof` \"string\" and still can coerce nodes to strings.\n    // Also check that the constructor is `Object` (i.e. `Object instanceof Object`)\n    var ctor = value.constructor;\n    if ((!noNodeClass || !(typeof value.toString != 'function' && typeof (value + '') == 'string')) &&\n        (!isFunction(ctor) || ctor instanceof ctor)) {\n      // IE < 9 iterates inherited properties before own properties. If the first\n      // iterated property is an object's own property then there are no inherited\n      // enumerable properties.\n      if (iteratesOwnLast) {\n        forIn(value, function(value, key, object) {\n          result = !hasOwnProperty.call(object, key);\n          return false;\n        });\n        return result === false;\n      }\n      // In most environments an object's own properties are iterated before\n      // its inherited properties. If the last iterated property is an object's\n      // own property then there are no inherited enumerable properties.\n      forIn(value, function(value, key) {\n        result = key;\n      });\n      return result === false || hasOwnProperty.call(value, result);\n    }\n    return result;\n  }\n\n  /**\n   * A fallback implementation of `Object.keys` that produces an array of the\n   * given object's own enumerable property names.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names.\n   */\n  function shimKeys(object) {\n    var result = [];\n    forOwn(object, function(value, key) {\n      result.push(key);\n    });\n    return result;\n  }\n\n  /**\n   * Used to convert characters to HTML entities:\n   *\n   * Though the `>` character is escaped for symmetry, characters like `>` and `/`\n   * don't require escaping in HTML and have no special meaning unless they're part\n   * of a tag or an unquoted attribute value.\n   * http://mathiasbynens.be/notes/ambiguous-ampersands (under \"semi-related fun fact\")\n   */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;'\n  };\n\n  /** Used to convert HTML entities to characters */\n  var htmlUnescapes = invert(htmlEscapes);\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a clone of `value`. If `deep` is `true`, all nested objects will\n   * also be cloned otherwise they will be assigned by reference. Functions, DOM\n   * nodes, `arguments` objects, and objects created by constructors other than\n   * `Object` are **not** cloned.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to clone.\n   * @param {Boolean} deep A flag to indicate a deep clone.\n   * @param- {Object} [guard] Internally used to allow this method to work with\n   *  others like `_.map` without using their callback `index` argument for `deep`.\n   * @param- {Array} [stackA=[]] Internally used to track traversed source objects.\n   * @param- {Array} [stackB=[]] Internally used to associate clones with their\n   *  source counterparts.\n   * @returns {Mixed} Returns the cloned `value`.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 },\n   *   { 'name': 'curly', 'age': 60 }\n   * ];\n   *\n   * _.clone({ 'name': 'moe' });\n   * // => { 'name': 'moe' }\n   *\n   * var shallow = _.clone(stooges);\n   * shallow[0] === stooges[0];\n   * // => true\n   *\n   * var deep = _.clone(stooges, true);\n   * shallow[0] === stooges[0];\n   * // => false\n   */\n  function clone(value, deep, guard, stackA, stackB) {\n    if (value == null) {\n      return value;\n    }\n    if (guard) {\n      deep = false;\n    }\n    // inspect [[Class]]\n    var isObj = isObject(value);\n    if (isObj) {\n      // don't clone `arguments` objects, functions, or non-object Objects\n      var className = toString.call(value);\n      if (!cloneableClasses[className] || (noArgsClass && isArguments(value))) {\n        return value;\n      }\n      var isArr = className == arrayClass;\n      isObj = isArr || (className == objectClass ? isPlainObject(value) : isObj);\n    }\n    // shallow clone\n    if (!isObj || !deep) {\n      // don't clone functions\n      return isObj\n        ? (isArr ? slice.call(value) : extend({}, value))\n        : value;\n    }\n\n    var ctor = value.constructor;\n    switch (className) {\n      case boolClass:\n      case dateClass:\n        return new ctor(+value);\n\n      case numberClass:\n      case stringClass:\n        return new ctor(value);\n\n      case regexpClass:\n        return ctor(value.source, reFlags.exec(value));\n    }\n    // check for circular references and return corresponding clone\n    stackA || (stackA = []);\n    stackB || (stackB = []);\n\n    var length = stackA.length;\n    while (length--) {\n      if (stackA[length] == value) {\n        return stackB[length];\n      }\n    }\n    // init cloned object\n    var result = isArr ? ctor(value.length) : {};\n\n    // add the source value to the stack of traversed objects\n    // and associate it with its clone\n    stackA.push(value);\n    stackB.push(result);\n\n    // recursively populate clone (susceptible to call stack limits)\n    (isArr ? forEach : forOwn)(value, function(objValue, key) {\n      result[key] = clone(objValue, deep, null, stackA, stackB);\n    });\n\n    return result;\n  }\n\n  /**\n   * Assigns enumerable properties of the default object(s) to the `destination`\n   * object for all `destination` properties that resolve to `null`/`undefined`.\n   * Once a property is set, additional defaults of the same property will be\n   * ignored.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [default1, default2, ...] The default objects.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * var iceCream = { 'flavor': 'chocolate' };\n   * _.defaults(iceCream, { 'flavor': 'vanilla', 'sprinkles': 'rainbow' });\n   * // => { 'flavor': 'chocolate', 'sprinkles': 'rainbow' }\n   */\n  var defaults = createIterator(extendIteratorOptions, {\n    'objectLoop': 'if (result[index] == null) ' + extendIteratorOptions.objectLoop\n  });\n\n  /**\n   * Assigns enumerable properties of the source object(s) to the `destination`\n   * object. Subsequent sources will overwrite propery assignments of previous\n   * sources.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ...] The source objects.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * _.extend({ 'name': 'moe' }, { 'age': 40 });\n   * // => { 'name': 'moe', 'age': 40 }\n   */\n  var extend = createIterator(extendIteratorOptions);\n\n  /**\n   * Creates a sorted array of all enumerable properties, own and inherited,\n   * of `object` that have function values.\n   *\n   * @static\n   * @memberOf _\n   * @alias methods\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names that have function values.\n   * @example\n   *\n   * _.functions(_);\n   * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]\n   */\n  function functions(object) {\n    var result = [];\n    forIn(object, function(value, key) {\n      if (isFunction(value)) {\n        result.push(key);\n      }\n    });\n    return result.sort();\n  }\n\n  /**\n   * Checks if the specified object `property` exists and is a direct property,\n   * instead of an inherited property.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to check.\n   * @param {String} property The property to check for.\n   * @returns {Boolean} Returns `true` if key is a direct property, else `false`.\n   * @example\n   *\n   * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n   * // => true\n   */\n  function has(object, property) {\n    return object ? hasOwnProperty.call(object, property) : false;\n  }\n\n  /**\n   * Creates an object composed of the inverted keys and values of the given `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to invert.\n   * @returns {Object} Returns the created inverted object.\n   * @example\n   *\n   *  _.invert({ 'first': 'Moe', 'second': 'Larry', 'third': 'Curly' });\n   * // => { 'Moe': 'first', 'Larry': 'second', 'Curly': 'third' } (order is not guaranteed)\n   */\n  function invert(object) {\n    var result = {};\n    forOwn(object, function(value, key) {\n      result[value] = key;\n    });\n    return result;\n  }\n\n  /**\n   * Checks if `value` is an array.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is an array, else `false`.\n   * @example\n   *\n   * (function() { return _.isArray(arguments); })();\n   * // => false\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   */\n  var isArray = nativeIsArray || function(value) {\n    return toString.call(value) == arrayClass;\n  };\n\n  /**\n   * Checks if `value` is a boolean (`true` or `false`) value.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a boolean value, else `false`.\n   * @example\n   *\n   * _.isBoolean(null);\n   * // => false\n   */\n  function isBoolean(value) {\n    return value === true || value === false || toString.call(value) == boolClass;\n  }\n\n  /**\n   * Checks if `value` is a date.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a date, else `false`.\n   * @example\n   *\n   * _.isDate(new Date);\n   * // => true\n   */\n  function isDate(value) {\n    return toString.call(value) == dateClass;\n  }\n\n  /**\n   * Checks if `value` is a DOM element.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a DOM element, else `false`.\n   * @example\n   *\n   * _.isElement(document.body);\n   * // => true\n   */\n  function isElement(value) {\n    return value ? value.nodeType === 1 : false;\n  }\n\n  /**\n   * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\n   * length of `0` and objects with no own enumerable properties are considered\n   * \"empty\".\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Array|Object|String} value The value to inspect.\n   * @returns {Boolean} Returns `true` if the `value` is empty, else `false`.\n   * @example\n   *\n   * _.isEmpty([1, 2, 3]);\n   * // => false\n   *\n   * _.isEmpty({});\n   * // => true\n   *\n   * _.isEmpty('');\n   * // => true\n   */\n  function isEmpty(value) {\n    var result = true;\n    if (!value) {\n      return result;\n    }\n    var className = toString.call(value),\n        length = value.length;\n\n    if ((className == arrayClass || className == stringClass ||\n        className == argsClass || (noArgsClass && isArguments(value))) ||\n        (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {\n      return !length;\n    }\n    forOwn(value, function() {\n      return (result = false);\n    });\n    return result;\n  }\n\n  /**\n   * Performs a deep comparison between two values to determine if they are\n   * equivalent to each other.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} a The value to compare.\n   * @param {Mixed} b The other value to compare.\n   * @param- {Object} [stackA=[]] Internally used track traversed `a` objects.\n   * @param- {Object} [stackB=[]] Internally used track traversed `b` objects.\n   * @returns {Boolean} Returns `true` if the values are equvalent, else `false`.\n   * @example\n   *\n   * var moe = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };\n   * var clone = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };\n   *\n   * moe == clone;\n   * // => false\n   *\n   * _.isEqual(moe, clone);\n   * // => true\n   */\n  function isEqual(a, b, stackA, stackB) {\n    // exit early for identical values\n    if (a === b) {\n      // treat `+0` vs. `-0` as not equal\n      return a !== 0 || (1 / a == 1 / b);\n    }\n    // a strict comparison is necessary because `null == undefined`\n    if (a == null || b == null) {\n      return a === b;\n    }\n    // compare [[Class]] names\n    var className = toString.call(a);\n    if (className != toString.call(b)) {\n      return false;\n    }\n    switch (className) {\n      case boolClass:\n      case dateClass:\n        // coerce dates and booleans to numbers, dates to milliseconds and booleans\n        // to `1` or `0`, treating invalid dates coerced to `NaN` as not equal\n        return +a == +b;\n\n      case numberClass:\n        // treat `NaN` vs. `NaN` as equal\n        return a != +a\n          ? b != +b\n          // but treat `+0` vs. `-0` as not equal\n          : (a == 0 ? (1 / a == 1 / b) : a == +b);\n\n      case regexpClass:\n      case stringClass:\n        // coerce regexes to strings (http://es5.github.com/#x15.10.6.4)\n        // treat string primitives and their corresponding object instances as equal\n        return a == b + '';\n    }\n    // exit early, in older browsers, if `a` is array-like but not `b`\n    var isArr = className == arrayClass || className == argsClass;\n    if (noArgsClass && !isArr && (isArr = isArguments(a)) && !isArguments(b)) {\n      return false;\n    }\n    if (!isArr) {\n      // unwrap any `lodash` wrapped values\n      if (a.__wrapped__ || b.__wrapped__) {\n        return isEqual(a.__wrapped__ || a, b.__wrapped__ || b);\n      }\n      // exit for functions and DOM nodes\n      if (className != objectClass || (noNodeClass && (\n          (typeof a.toString != 'function' && typeof (a + '') == 'string') ||\n          (typeof b.toString != 'function' && typeof (b + '') == 'string')))) {\n        return false;\n      }\n      var ctorA = a.constructor,\n          ctorB = b.constructor;\n\n      // non `Object` object instances with different constructors are not equal\n      if (ctorA != ctorB && !(\n            isFunction(ctorA) && ctorA instanceof ctorA &&\n            isFunction(ctorB) && ctorB instanceof ctorB\n          )) {\n        return false;\n      }\n    }\n    // assume cyclic structures are equal\n    // the algorithm for detecting cyclic structures is adapted from ES 5.1\n    // section 15.12.3, abstract operation `JO` (http://es5.github.com/#x15.12.3)\n    stackA || (stackA = []);\n    stackB || (stackB = []);\n\n    var length = stackA.length;\n    while (length--) {\n      if (stackA[length] == a) {\n        return stackB[length] == b;\n      }\n    }\n\n    var index = -1,\n        result = true,\n        size = 0;\n\n    // add `a` and `b` to the stack of traversed objects\n    stackA.push(a);\n    stackB.push(b);\n\n    // recursively compare objects and arrays (susceptible to call stack limits)\n    if (isArr) {\n      // compare lengths to determine if a deep comparison is necessary\n      size = a.length;\n      result = size == b.length;\n\n      if (result) {\n        // deep compare the contents, ignoring non-numeric properties\n        while (size--) {\n          if (!(result = isEqual(a[size], b[size], stackA, stackB))) {\n            break;\n          }\n        }\n      }\n      return result;\n    }\n    // deep compare objects\n    for (var key in a) {\n      if (hasOwnProperty.call(a, key)) {\n        // count the number of properties.\n        size++;\n        // deep compare each property value.\n        if (!(hasOwnProperty.call(b, key) && isEqual(a[key], b[key], stackA, stackB))) {\n          return false;\n        }\n      }\n    }\n    // ensure both objects have the same number of properties\n    for (key in b) {\n      // The JS engine in Adobe products, like InDesign, has a bug that causes\n      // `!size--` to throw an error so it must be wrapped in parentheses.\n      // https://github.com/documentcloud/underscore/issues/355\n      if (hasOwnProperty.call(b, key) && !(size--)) {\n        // `size` will be `-1` if `b` has more properties than `a`\n        return false;\n      }\n    }\n    // handle JScript [[DontEnum]] bug\n    if (hasDontEnumBug) {\n      while (++index < 7) {\n        key = shadowed[index];\n        if (hasOwnProperty.call(a, key) &&\n            !(hasOwnProperty.call(b, key) && isEqual(a[key], b[key], stackA, stackB))) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Checks if `value` is, or can be coerced to, a finite number.\n   *\n   * Note: This is not the same as native `isFinite`, which will return true for\n   * booleans and empty strings. See http://es5.github.com/#x15.1.2.5.\n   *\n   * @deprecated\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a finite number, else `false`.\n   * @example\n   *\n   * _.isFinite(-101);\n   * // => true\n   *\n   * _.isFinite('10');\n   * // => true\n   *\n   * _.isFinite(true);\n   * // => false\n   *\n   * _.isFinite('');\n   * // => false\n   *\n   * _.isFinite(Infinity);\n   * // => false\n   */\n  function isFinite(value) {\n    return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));\n  }\n\n  /**\n   * Checks if `value` is a function.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   */\n  function isFunction(value) {\n    return typeof value == 'function';\n  }\n  // fallback for older versions of Chrome and Safari\n  if (isFunction(/x/)) {\n    isFunction = function(value) {\n      return toString.call(value) == funcClass;\n    };\n  }\n\n  /**\n   * Checks if `value` is the language type of Object.\n   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(1);\n   * // => false\n   */\n  function isObject(value) {\n    // check if the value is the ECMAScript language type of Object\n    // http://es5.github.com/#x8\n    // and avoid a V8 bug\n    // http://code.google.com/p/v8/issues/detail?id=2291\n    return value ? objectTypes[typeof value] : false;\n  }\n\n  /**\n   * Checks if `value` is `NaN`.\n   *\n   * Note: This is not the same as native `isNaN`, which will return true for\n   * `undefined` and other values. See http://es5.github.com/#x15.1.2.4.\n   *\n   * @deprecated\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is `NaN`, else `false`.\n   * @example\n   *\n   * _.isNaN(NaN);\n   * // => true\n   *\n   * _.isNaN(new Number(NaN));\n   * // => true\n   *\n   * isNaN(undefined);\n   * // => true\n   *\n   * _.isNaN(undefined);\n   * // => false\n   */\n  function isNaN(value) {\n    // `NaN` as a primitive is the only value that is not equal to itself\n    // (perform the [[Class]] check first to avoid errors with some host objects in IE)\n    return toString.call(value) == numberClass && value != +value\n  }\n\n  /**\n   * Checks if `value` is `null`.\n   *\n   * @deprecated\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is `null`, else `false`.\n   * @example\n   *\n   * _.isNull(null);\n   * // => true\n   *\n   * _.isNull(undefined);\n   * // => false\n   */\n  function isNull(value) {\n    return value === null;\n  }\n\n  /**\n   * Checks if `value` is a number.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a number, else `false`.\n   * @example\n   *\n   * _.isNumber(8.4 * 5);\n   * // => true\n   */\n  function isNumber(value) {\n    return toString.call(value) == numberClass;\n  }\n\n  /**\n   * Checks if a given `value` is an object created by the `Object` constructor.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if `value` is a plain object, else `false`.\n   * @example\n   *\n   * function Stooge(name, age) {\n   *   this.name = name;\n   *   this.age = age;\n   * }\n   *\n   * _.isPlainObject(new Stooge('moe', 40));\n   * // => false\n   *\n   * _.isPlainObject([1, 2, 3]);\n   * // => false\n   *\n   * _.isPlainObject({ 'name': 'moe', 'age': 40 });\n   * // => true\n   */\n  var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {\n    if (!(value && typeof value == 'object')) {\n      return false;\n    }\n    var valueOf = value.valueOf,\n        objProto = typeof valueOf == 'function' && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);\n\n    return objProto\n      ? value == objProto || (getPrototypeOf(value) == objProto && !isArguments(value))\n      : shimIsPlainObject(value);\n  };\n\n  /**\n   * Checks if `value` is a regular expression.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a regular expression, else `false`.\n   * @example\n   *\n   * _.isRegExp(/moe/);\n   * // => true\n   */\n  function isRegExp(value) {\n    return toString.call(value) == regexpClass;\n  }\n\n  /**\n   * Checks if `value` is a string.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a string, else `false`.\n   * @example\n   *\n   * _.isString('moe');\n   * // => true\n   */\n  function isString(value) {\n    return toString.call(value) == stringClass;\n  }\n\n  /**\n   * Checks if `value` is `undefined`.\n   *\n   * @deprecated\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is `undefined`, else `false`.\n   * @example\n   *\n   * _.isUndefined(void 0);\n   * // => true\n   */\n  function isUndefined(value) {\n    return value === undefined;\n  }\n\n  /**\n   * Creates an array composed of the own enumerable property names of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names.\n   * @example\n   *\n   * _.keys({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => ['one', 'two', 'three'] (order is not guaranteed)\n   */\n  var keys = !nativeKeys ? shimKeys : function(object) {\n    // avoid iterating over the `prototype` property\n    return typeof object == 'function' && propertyIsEnumerable.call(object, 'prototype')\n      ? shimKeys(object)\n      : (isObject(object) ? nativeKeys(object) : []);\n  };\n\n  /**\n   * Merges enumerable properties of the source object(s) into the `destination`\n   * object. Subsequent sources will overwrite propery assignments of previous\n   * sources.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ...] The source objects.\n   * @param- {Object} [indicator] Internally used to indicate that the `stack`\n   *  argument is an array of traversed objects instead of another source object.\n   * @param- {Array} [stackA=[]] Internally used to track traversed source objects.\n   * @param- {Array} [stackB=[]] Internally used to associate values with their\n   *  source counterparts.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe' },\n   *   { 'name': 'larry' }\n   * ];\n   *\n   * var ages = [\n   *   { 'age': 40 },\n   *   { 'age': 50 }\n   * ];\n   *\n   * _.merge(stooges, ages);\n   * // => [{ 'name': 'moe', 'age': 40 }, { 'name': 'larry', 'age': 50 }]\n   */\n  function merge(object, source, indicator) {\n    var args = arguments,\n        index = 0,\n        length = 2,\n        stackA = args[3],\n        stackB = args[4];\n\n    if (indicator !== objectRef) {\n      stackA = [];\n      stackB = [];\n      length = args.length;\n    }\n    while (++index < length) {\n      forOwn(args[index], function(source, key) {\n        var found, isArr, value;\n        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {\n          // avoid merging previously merged cyclic sources\n          var stackLength = stackA.length;\n          while (stackLength--) {\n            found = stackA[stackLength] == source;\n            if (found) {\n              break;\n            }\n          }\n          if (found) {\n            object[key] = stackB[stackLength];\n          }\n          else {\n            // add `source` and associated `value` to the stack of traversed objects\n            stackA.push(source);\n            stackB.push(value = (value = object[key], isArr)\n              ? (isArray(value) ? value : [])\n              : (isPlainObject(value) ? value : {})\n            );\n            // recursively merge objects and arrays (susceptible to call stack limits)\n            object[key] = merge(value, source, objectRef, stackA, stackB);\n          }\n        } else if (source != null) {\n          object[key] = source;\n        }\n      });\n    }\n    return object;\n  }\n\n  /**\n   * Creates a shallow clone of `object` excluding the specified properties.\n   * Property names may be specified as individual arguments or as arrays of\n   * property names. If `callback` is passed, it will be executed for each property\n   * in the `object`, omitting the properties `callback` returns truthy for. The\n   * `callback` is bound to `thisArg` and invoked with three arguments; (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The source object.\n   * @param {Function|String} callback|[prop1, prop2, ...] The properties to omit\n   *  or the function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns an object without the omitted properties.\n   * @example\n   *\n   * _.omit({ 'name': 'moe', 'age': 40, 'userid': 'moe1' }, 'userid');\n   * // => { 'name': 'moe', 'age': 40 }\n   *\n   * _.omit({ 'name': 'moe', '_hint': 'knucklehead', '_seed': '96c4eb' }, function(value, key) {\n   *   return key.charAt(0) == '_';\n   * });\n   * // => { 'name': 'moe' }\n   */\n  function omit(object, callback, thisArg) {\n    var isFunc = typeof callback == 'function',\n        result = {};\n\n    if (isFunc) {\n      callback = createCallback(callback, thisArg);\n    } else {\n      var props = concat.apply(arrayRef, arguments);\n    }\n    forIn(object, function(value, key, object) {\n      if (isFunc\n            ? !callback(value, key, object)\n            : indexOf(props, key, 1) < 0\n          ) {\n        result[key] = value;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Creates a two dimensional array of the given object's key-value pairs,\n   * i.e. `[[key1, value1], [key2, value2]]`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns new array of key-value pairs.\n   * @example\n   *\n   * _.pairs({ 'moe': 30, 'larry': 40, 'curly': 50 });\n   * // => [['moe', 30], ['larry', 40], ['curly', 50]] (order is not guaranteed)\n   */\n  function pairs(object) {\n    var result = [];\n    forOwn(object, function(value, key) {\n      result.push([key, value]);\n    });\n    return result;\n  }\n\n  /**\n   * Creates a shallow clone of `object` composed of the specified properties.\n   * Property names may be specified as individual arguments or as arrays of\n   * property names. If `callback` is passed, it will be executed for each property\n   * in the `object`, picking the properties `callback` returns truthy for. The\n   * `callback` is bound to `thisArg` and invoked with three arguments; (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The source object.\n   * @param {Function|String} callback|[prop1, prop2, ...] The properties to pick\n   *  or the function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns an object composed of the picked properties.\n   * @example\n   *\n   * _.pick({ 'name': 'moe', 'age': 40, 'userid': 'moe1' }, 'name', 'age');\n   * // => { 'name': 'moe', 'age': 40 }\n   *\n   * _.pick({ 'name': 'moe', '_hint': 'knucklehead', '_seed': '96c4eb' }, function(value, key) {\n   *   return key.charAt(0) != '_';\n   * });\n   * // => { 'name': 'moe' }\n   */\n  function pick(object, callback, thisArg) {\n    var result = {};\n    if (typeof callback != 'function') {\n      var index = 0,\n          props = concat.apply(arrayRef, arguments),\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n        if (key in object) {\n          result[key] = object[key];\n        }\n      }\n    } else {\n      callback = createCallback(callback, thisArg);\n      forIn(object, function(value, key, object) {\n        if (callback(value, key, object)) {\n          result[key] = value;\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array composed of the own enumerable property values of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property values.\n   * @example\n   *\n   * _.values({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => [1, 2, 3]\n   */\n  function values(object) {\n    var result = [];\n    forOwn(object, function(value) {\n      result.push(value);\n    });\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Checks if a given `target` element is present in a `collection` using strict\n   * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n   * as the offset from the end of the collection.\n   *\n   * @static\n   * @memberOf _\n   * @alias include\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Mixed} target The value to check for.\n   * @param {Number} [fromIndex=0] The index to search from.\n   * @returns {Boolean} Returns `true` if the `target` element is found, else `false`.\n   * @example\n   *\n   * _.contains([1, 2, 3], 1);\n   * // => true\n   *\n   * _.contains([1, 2, 3], 1, 2);\n   * // => false\n   *\n   * _.contains({ 'name': 'moe', 'age': 40 }, 'moe');\n   * // => true\n   *\n   * _.contains('curly', 'ur');\n   * // => true\n   */\n  function contains(collection, target, fromIndex) {\n    var index = -1,\n        length = collection ? collection.length : 0;\n\n    fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;\n    if (typeof length == 'number') {\n      return (isString(collection)\n        ? collection.indexOf(target, fromIndex)\n        : indexOf(collection, target, fromIndex)\n      ) > -1;\n    }\n    return some(collection, function(value) {\n      return ++index >= fromIndex && value === target;\n    });\n  }\n\n  /**\n   * Creates an object composed of keys returned from running each element of\n   * `collection` through a `callback`. The corresponding value of each key is\n   * the number of times the key was returned by `callback`. The `callback` is\n   * bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n   * The `callback` argument may also be the name of a property to count by (e.g. 'length').\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|String} callback|property The function called per iteration\n   *  or property name to count by.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns the composed aggregate object.\n   * @example\n   *\n   * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });\n   * // => { '4': 1, '6': 2 }\n   *\n   * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n   * // => { '4': 1, '6': 2 }\n   *\n   * _.countBy(['one', 'two', 'three'], 'length');\n   * // => { '3': 2, '5': 1 }\n   */\n  function countBy(collection, callback, thisArg) {\n    var result = {};\n    callback = createCallback(callback, thisArg);\n    forEach(collection, function(value, key, collection) {\n      key = callback(value, key, collection);\n      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);\n    });\n    return result;\n  }\n\n  /**\n   * Checks if the `callback` returns a truthy value for **all** elements of a\n   * `collection`. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @alias all\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Boolean} Returns `true` if all elements pass the callback check,\n   *  else `false`.\n   * @example\n   *\n   * _.every([true, 1, null, 'yes'], Boolean);\n   * // => false\n   */\n  function every(collection, callback, thisArg) {\n    var result = true;\n    callback = createCallback(callback, thisArg);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        if (!(result = !!callback(collection[index], index, collection))) {\n          break;\n        }\n      }\n    } else {\n      forEach(collection, function(value, index, collection) {\n        return (result = !!callback(value, index, collection));\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Examines each element in a `collection`, returning an array of all elements\n   * the `callback` returns truthy for. The `callback` is bound to `thisArg` and\n   * invoked with three arguments; (value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @alias select\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of elements that passed the callback check.\n   * @example\n   *\n   * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => [2, 4, 6]\n   */\n  function filter(collection, callback, thisArg) {\n    var result = [];\n    callback = createCallback(callback, thisArg);\n    forEach(collection, function(value, index, collection) {\n      if (callback(value, index, collection)) {\n        result.push(value);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Examines each element in a `collection`, returning the first one the `callback`\n   * returns truthy for. The function returns as soon as it finds an acceptable\n   * element, and does not iterate over the entire `collection`. The `callback` is\n   * bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @alias detect\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the element that passed the callback check,\n   *  else `undefined`.\n   * @example\n   *\n   * var even = _.find([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => 2\n   */\n  function find(collection, callback, thisArg) {\n    var result;\n    callback = createCallback(callback, thisArg);\n    forEach(collection, function(value, index, collection) {\n      if (callback(value, index, collection)) {\n        result = value;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Iterates over a `collection`, executing the `callback` for each element in\n   * the `collection`. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection). Callbacks may exit iteration early\n   * by explicitly returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias each\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array|Object|String} Returns `collection`.\n   * @example\n   *\n   * _([1, 2, 3]).forEach(alert).join(',');\n   * // => alerts each number and returns '1,2,3'\n   *\n   * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, alert);\n   * // => alerts each number (order is not guaranteed)\n   */\n  var forEach = createIterator(forEachIteratorOptions);\n\n  /**\n   * Creates an object composed of keys returned from running each element of\n   * `collection` through a `callback`. The corresponding value of each key is an\n   * array of elements passed to `callback` that returned the key. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n   * The `callback` argument may also be the name of a property to group by (e.g. 'length').\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|String} callback|property The function called per iteration\n   *  or property name to group by.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns the composed aggregate object.\n   * @example\n   *\n   * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });\n   * // => { '4': [4.2], '6': [6.1, 6.4] }\n   *\n   * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n   * // => { '4': [4.2], '6': [6.1, 6.4] }\n   *\n   * _.groupBy(['one', 'two', 'three'], 'length');\n   * // => { '3': ['one', 'two'], '5': ['three'] }\n   */\n  function groupBy(collection, callback, thisArg) {\n    var result = {};\n    callback = createCallback(callback, thisArg);\n    forEach(collection, function(value, key, collection) {\n      key = callback(value, key, collection);\n      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);\n    });\n    return result;\n  }\n\n  /**\n   * Invokes the method named by `methodName` on each element in the `collection`,\n   * returning an array of the results of each invoked method. Additional arguments\n   * will be passed to each invoked method. If `methodName` is a function it will\n   * be invoked for, and `this` bound to, each element in the `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|String} methodName The name of the method to invoke or\n   *  the function invoked per iteration.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the method with.\n   * @returns {Array} Returns a new array of the results of each invoked method.\n   * @example\n   *\n   * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n   * // => [[1, 5, 7], [1, 2, 3]]\n   *\n   * _.invoke([123, 456], String.prototype.split, '');\n   * // => [['1', '2', '3'], ['4', '5', '6']]\n   */\n  function invoke(collection, methodName) {\n    var args = slice.call(arguments, 2),\n        isFunc = typeof methodName == 'function',\n        result = [];\n\n    forEach(collection, function(value) {\n      result.push((isFunc ? methodName : value[methodName]).apply(value, args));\n    });\n    return result;\n  }\n\n  /**\n   * Creates an array of values by running each element in the `collection`\n   * through a `callback`. The `callback` is bound to `thisArg` and invoked with\n   * three arguments; (value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @alias collect\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of the results of each `callback` execution.\n   * @example\n   *\n   * _.map([1, 2, 3], function(num) { return num * 3; });\n   * // => [3, 6, 9]\n   *\n   * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n   * // => [3, 6, 9] (order is not guaranteed)\n   */\n  function map(collection, callback, thisArg) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    callback = createCallback(callback, thisArg);\n    if (isArray(collection)) {\n      while (++index < length) {\n        result[index] = callback(collection[index], index, collection);\n      }\n    } else {\n      forEach(collection, function(value, key, collection) {\n        result[++index] = callback(value, key, collection);\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the maximum value of an `array`. If `callback` is passed,\n   * it will be executed for each value in the `array` to generate the\n   * criterion by which the value is ranked. The `callback` is bound to\n   * `thisArg` and invoked with three arguments; (value, index, collection).\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the maximum value.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 },\n   *   { 'name': 'curly', 'age': 60 }\n   * ];\n   *\n   * _.max(stooges, function(stooge) { return stooge.age; });\n   * // => { 'name': 'curly', 'age': 60 };\n   */\n  function max(collection, callback, thisArg) {\n    var computed = -Infinity,\n        index = -1,\n        length = collection ? collection.length : 0,\n        result = computed;\n\n    if (callback || !isArray(collection)) {\n      callback = !callback && isString(collection)\n        ? charAtCallback\n        : createCallback(callback, thisArg);\n\n      forEach(collection, function(value, index, collection) {\n        var current = callback(value, index, collection);\n        if (current > computed) {\n          computed = current;\n          result = value;\n        }\n      });\n    } else {\n      while (++index < length) {\n        if (collection[index] > result) {\n          result = collection[index];\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the minimum value of an `array`. If `callback` is passed,\n   * it will be executed for each value in the `array` to generate the\n   * criterion by which the value is ranked. The `callback` is bound to `thisArg`\n   * and invoked with three arguments; (value, index, collection).\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the minimum value.\n   * @example\n   *\n   * _.min([10, 5, 100, 2, 1000]);\n   * // => 2\n   */\n  function min(collection, callback, thisArg) {\n    var computed = Infinity,\n        index = -1,\n        length = collection ? collection.length : 0,\n        result = computed;\n\n    if (callback || !isArray(collection)) {\n      callback = !callback && isString(collection)\n        ? charAtCallback\n        : createCallback(callback, thisArg);\n\n      forEach(collection, function(value, index, collection) {\n        var current = callback(value, index, collection);\n        if (current < computed) {\n          computed = current;\n          result = value;\n        }\n      });\n    } else {\n      while (++index < length) {\n        if (collection[index] < result) {\n          result = collection[index];\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the value of a specified property from all elements in\n   * the `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {String} property The property to pluck.\n   * @returns {Array} Returns a new array of property values.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 },\n   *   { 'name': 'curly', 'age': 60 }\n   * ];\n   *\n   * _.pluck(stooges, 'name');\n   * // => ['moe', 'larry', 'curly']\n   */\n  function pluck(collection, property) {\n    var result = [];\n    forEach(collection, function(value) {\n      result.push(value[property]);\n    });\n    return result;\n  }\n\n  /**\n   * Boils down a `collection` to a single value. The initial state of the\n   * reduction is `accumulator` and each successive step of it should be returned\n   * by the `callback`. The `callback` is bound to `thisArg` and invoked with 4\n   * arguments; for arrays they are (accumulator, value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @alias foldl, inject\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [accumulator] Initial value of the accumulator.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the accumulated value.\n   * @example\n   *\n   * var sum = _.reduce([1, 2, 3], function(memo, num) { return memo + num; });\n   * // => 6\n   */\n  function reduce(collection, callback, accumulator, thisArg) {\n    var noaccum = arguments.length < 3;\n    callback = createCallback(callback, thisArg);\n    forEach(collection, function(value, index, collection) {\n      accumulator = noaccum\n        ? (noaccum = false, value)\n        : callback(accumulator, value, index, collection)\n    });\n    return accumulator;\n  }\n\n  /**\n   * The right-associative version of `_.reduce`.\n   *\n   * @static\n   * @memberOf _\n   * @alias foldr\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [accumulator] Initial value of the accumulator.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the accumulated value.\n   * @example\n   *\n   * var list = [[0, 1], [2, 3], [4, 5]];\n   * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n   * // => [4, 5, 2, 3, 0, 1]\n   */\n  function reduceRight(collection, callback, accumulator, thisArg) {\n    var iteratee = collection,\n        length = collection ? collection.length : 0,\n        noaccum = arguments.length < 3;\n\n    if (typeof length != 'number') {\n      var props = keys(collection);\n      length = props.length;\n    } else if (noCharByIndex && isString(collection)) {\n      iteratee = collection.split('');\n    }\n    forEach(collection, function(value, index, collection) {\n      index = props ? props[--length] : --length;\n      accumulator = noaccum\n        ? (noaccum = false, iteratee[index])\n        : callback.call(thisArg, accumulator, iteratee[index], index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The opposite of `_.filter`, this method returns the values of a\n   * `collection` that `callback` does **not** return truthy for.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of elements that did **not** pass the\n   *  callback check.\n   * @example\n   *\n   * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => [1, 3, 5]\n   */\n  function reject(collection, callback, thisArg) {\n    callback = createCallback(callback, thisArg);\n    return filter(collection, function(value, index, collection) {\n      return !callback(value, index, collection);\n    });\n  }\n\n  /**\n   * Creates an array of shuffled `array` values, using a version of the\n   * Fisher-Yates shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to shuffle.\n   * @returns {Array} Returns a new shuffled collection.\n   * @example\n   *\n   * _.shuffle([1, 2, 3, 4, 5, 6]);\n   * // => [4, 1, 6, 3, 5, 2]\n   */\n  function shuffle(collection) {\n    var index = -1,\n        result = Array(collection ? collection.length : 0);\n\n    forEach(collection, function(value) {\n      var rand = floor(nativeRandom() * (++index + 1));\n      result[index] = result[rand];\n      result[rand] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Gets the size of the `collection` by returning `collection.length` for arrays\n   * and array-like objects or the number of own enumerable properties for objects.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to inspect.\n   * @returns {Number} Returns `collection.length` or number of own enumerable properties.\n   * @example\n   *\n   * _.size([1, 2]);\n   * // => 2\n   *\n   * _.size({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => 3\n   *\n   * _.size('curly');\n   * // => 5\n   */\n  function size(collection) {\n    var length = collection ? collection.length : 0;\n    return typeof length == 'number' ? length : keys(collection).length;\n  }\n\n  /**\n   * Checks if the `callback` returns a truthy value for **any** element of a\n   * `collection`. The function returns as soon as it finds passing value, and\n   * does not iterate over the entire `collection`. The `callback` is bound to\n   * `thisArg` and invoked with three arguments; (value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @alias any\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Boolean} Returns `true` if any element passes the callback check,\n   *  else `false`.\n   * @example\n   *\n   * _.some([null, 0, 'yes', false]);\n   * // => true\n   */\n  function some(collection, callback, thisArg) {\n    var result;\n    callback = createCallback(callback, thisArg);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        if (result = callback(collection[index], index, collection)) {\n          break;\n        }\n      }\n    } else {\n      forEach(collection, function(value, index, collection) {\n        return !(result = callback(value, index, collection));\n      });\n    }\n    return !!result;\n  }\n\n  /**\n   * Creates an array, stable sorted in ascending order by the results of\n   * running each element of `collection` through a `callback`. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n   * The `callback` argument may also be the name of a property to sort by (e.g. 'length').\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|String} callback|property The function called per iteration\n   *  or property name to sort by.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of sorted elements.\n   * @example\n   *\n   * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });\n   * // => [3, 1, 2]\n   *\n   * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);\n   * // => [3, 1, 2]\n   *\n   * _.sortBy(['larry', 'brendan', 'moe'], 'length');\n   * // => ['moe', 'larry', 'brendan']\n   */\n  function sortBy(collection, callback, thisArg) {\n    var result = [];\n    callback = createCallback(callback, thisArg);\n    forEach(collection, function(value, index, collection) {\n      result.push({\n        'criteria': callback(value, index, collection),\n        'index': index,\n        'value': value\n      });\n    });\n\n    var length = result.length;\n    result.sort(compareAscending);\n    while (length--) {\n      result[length] = result[length].value;\n    }\n    return result;\n  }\n\n  /**\n   * Converts the `collection`, to an array.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to convert.\n   * @returns {Array} Returns the new converted array.\n   * @example\n   *\n   * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n   * // => [2, 3, 4]\n   */\n  function toArray(collection) {\n    if (collection && typeof collection.length == 'number') {\n      return (noArraySliceOnStrings ? isString(collection) : typeof collection == 'string')\n        ? collection.split('')\n        : slice.call(collection);\n    }\n    return values(collection);\n  }\n\n  /**\n   * Examines each element in a `collection`, returning an array of all elements\n   * that contain the given `properties`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Object} properties The object of property values to filter by.\n   * @returns {Array} Returns a new array of elements that contain the given `properties`.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 },\n   *   { 'name': 'curly', 'age': 60 }\n   * ];\n   *\n   * _.where(stooges, { 'age': 40 });\n   * // => [{ 'name': 'moe', 'age': 40 }]\n   */\n  function where(collection, properties) {\n    var props = [];\n    forIn(properties, function(value, prop) {\n      props.push(prop);\n    });\n    return filter(collection, function(object) {\n      var length = props.length;\n      while (length--) {\n        var result = object[props[length]] === properties[props[length]];\n        if (!result) {\n          break;\n        }\n      }\n      return !!result;\n    });\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates an array with all falsey values of `array` removed. The values\n   * `false`, `null`, `0`, `\"\"`, `undefined` and `NaN` are all falsey.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to compact.\n   * @returns {Array} Returns a new filtered array.\n   * @example\n   *\n   * _.compact([0, 1, false, 2, '', 3]);\n   * // => [1, 2, 3]\n   */\n  function compact(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array of `array` elements not present in the other arrays\n   * using strict equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to process.\n   * @param {Array} [array1, array2, ...] Arrays to check.\n   * @returns {Array} Returns a new array of `array` elements not present in the\n   *  other arrays.\n   * @example\n   *\n   * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n   * // => [1, 3, 4]\n   */\n  function difference(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        flattened = concat.apply(arrayRef, arguments),\n        contains = cachedContains(flattened, length),\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (!contains(value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the first element of the `array`. Pass `n` to return the first `n`\n   * elements of the `array`.\n   *\n   * @static\n   * @memberOf _\n   * @alias head, take\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Number} [n] The number of elements to return.\n   * @param- {Object} [guard] Internally used to allow this method to work with\n   *  others like `_.map` without using their callback `index` argument for `n`.\n   * @returns {Mixed} Returns the first element or an array of the first `n`\n   *  elements of `array`.\n   * @example\n   *\n   * _.first([5, 4, 3, 2, 1]);\n   * // => 5\n   */\n  function first(array, n, guard) {\n    if (array) {\n      return (n == null || guard) ? array[0] : slice.call(array, 0, n);\n    }\n  }\n\n  /**\n   * Flattens a nested array (the nesting can be to any depth). If `shallow` is\n   * truthy, `array` will only be flattened a single level.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to compact.\n   * @param {Boolean} shallow A flag to indicate only flattening a single level.\n   * @returns {Array} Returns a new flattened array.\n   * @example\n   *\n   * _.flatten([1, [2], [3, [[4]]]]);\n   * // => [1, 2, 3, 4];\n   *\n   * _.flatten([1, [2], [3, [[4]]]], true);\n   * // => [1, 2, 3, [[4]]];\n   */\n  function flatten(array, shallow) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n\n      // recursively flatten arrays (susceptible to call stack limits)\n      if (isArray(value)) {\n        push.apply(result, shallow ? value : flatten(value));\n      } else {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the index at which the first occurrence of `value` is found using\n   * strict equality for comparisons, i.e. `===`. If the `array` is already\n   * sorted, passing `true` for `fromIndex` will run a faster binary search.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Boolean|Number} [fromIndex=0] The index to search from or `true` to\n   *  perform a binary search on a sorted `array`.\n   * @returns {Number} Returns the index of the matched value or `-1`.\n   * @example\n   *\n   * _.indexOf([1, 2, 3, 1, 2, 3], 2);\n   * // => 1\n   *\n   * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n   * // => 4\n   *\n   * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n   * // => 2\n   */\n  function indexOf(array, value, fromIndex) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    if (typeof fromIndex == 'number') {\n      index = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0) - 1;\n    } else if (fromIndex) {\n      index = sortedIndex(array, value);\n      return array[index] === value ? index : -1;\n    }\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Gets all but the last element of `array`. Pass `n` to exclude the last `n`\n   * elements from the result.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Number} [n=1] The number of elements to exclude.\n   * @param- {Object} [guard] Internally used to allow this method to work with\n   *  others like `_.map` without using their callback `index` argument for `n`.\n   * @returns {Array} Returns all but the last element or `n` elements of `array`.\n   * @example\n   *\n   * _.initial([3, 2, 1]);\n   * // => [3, 2]\n   */\n  function initial(array, n, guard) {\n    return array\n      ? slice.call(array, 0, -((n == null || guard) ? 1 : n))\n      : [];\n  }\n\n  /**\n   * Computes the intersection of all the passed-in arrays using strict equality\n   * for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of unique elements, in order, that are\n   *  present in **all** of the arrays.\n   * @example\n   *\n   * _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n   * // => [1, 2]\n   */\n  function intersection(array) {\n    var args = arguments,\n        argsLength = args.length,\n        cache = {},\n        result = [];\n\n    forEach(array, function(value) {\n      if (indexOf(result, value) < 0) {\n        var length = argsLength;\n        while (--length) {\n          if (!(cache[length] || (cache[length] = cachedContains(args[length])))(value)) {\n            return;\n          }\n        }\n        result.push(value);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Gets the last element of the `array`. Pass `n` to return the last `n`\n   * elements of the `array`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Number} [n] The number of elements to return.\n   * @param- {Object} [guard] Internally used to allow this method to work with\n   *  others like `_.map` without using their callback `index` argument for `n`.\n   * @returns {Mixed} Returns the last element or an array of the last `n`\n   *  elements of `array`.\n   * @example\n   *\n   * _.last([3, 2, 1]);\n   * // => 1\n   */\n  function last(array, n, guard) {\n    if (array) {\n      var length = array.length;\n      return (n == null || guard) ? array[length - 1] : slice.call(array, -n || length);\n    }\n  }\n\n  /**\n   * Gets the index at which the last occurrence of `value` is found using strict\n   * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n   * as the offset from the end of the collection.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Number} [fromIndex=array.length-1] The index to search from.\n   * @returns {Number} Returns the index of the matched value or `-1`.\n   * @example\n   *\n   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n   * // => 4\n   *\n   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n   * // => 1\n   */\n  function lastIndexOf(array, value, fromIndex) {\n    var index = array ? array.length : 0;\n    if (typeof fromIndex == 'number') {\n      index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;\n    }\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Creates an object composed from arrays of `keys` and `values`. Pass either\n   * a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`, or\n   * two arrays, one of `keys` and one of corresponding `values`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} keys The array of keys.\n   * @param {Array} [values=[]] The array of values.\n   * @returns {Object} Returns an object composed of the given keys and\n   *  corresponding values.\n   * @example\n   *\n   * _.object(['moe', 'larry', 'curly'], [30, 40, 50]);\n   * // => { 'moe': 30, 'larry': 40, 'curly': 50 }\n   */\n  function object(keys, values) {\n    var index = -1,\n        length = keys ? keys.length : 0,\n        result = {};\n\n    while (++index < length) {\n      var key = keys[index];\n      if (values) {\n        result[key] = values[index];\n      } else {\n        result[key[0]] = key[1];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array of numbers (positive and/or negative) progressing from\n   * `start` up to but not including `stop`. This method is a port of Python's\n   * `range()` function. See http://docs.python.org/library/functions.html#range.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Number} [start=0] The start of the range.\n   * @param {Number} end The end of the range.\n   * @param {Number} [step=1] The value to increment or descrement by.\n   * @returns {Array} Returns a new range array.\n   * @example\n   *\n   * _.range(10);\n   * // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n   *\n   * _.range(1, 11);\n   * // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n   *\n   * _.range(0, 30, 5);\n   * // => [0, 5, 10, 15, 20, 25]\n   *\n   * _.range(0, -10, -1);\n   * // => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n   *\n   * _.range(0);\n   * // => []\n   */\n  function range(start, end, step) {\n    start = +start || 0;\n    step = +step || 1;\n\n    if (end == null) {\n      end = start;\n      start = 0;\n    }\n    // use `Array(length)` so V8 will avoid the slower \"dictionary\" mode\n    // http://www.youtube.com/watch?v=XAqIpGU8ZZk#t=16m27s\n    var index = -1,\n        length = nativeMax(0, ceil((end - start) / step)),\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = start;\n      start += step;\n    }\n    return result;\n  }\n\n  /**\n   * The opposite of `_.initial`, this method gets all but the first value of\n   * `array`. Pass `n` to exclude the first `n` values from the result.\n   *\n   * @static\n   * @memberOf _\n   * @alias drop, tail\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Number} [n=1] The number of elements to exclude.\n   * @param- {Object} [guard] Internally used to allow this method to work with\n   *  others like `_.map` without using their callback `index` argument for `n`.\n   * @returns {Array} Returns all but the first value or `n` values of `array`.\n   * @example\n   *\n   * _.rest([3, 2, 1]);\n   * // => [2, 1]\n   */\n  function rest(array, n, guard) {\n    return array\n      ? slice.call(array, (n == null || guard) ? 1 : n)\n      : [];\n  }\n\n  /**\n   * Uses a binary search to determine the smallest index at which the `value`\n   * should be inserted into `array` in order to maintain the sort order of the\n   * sorted `array`. If `callback` is passed, it will be executed for `value` and\n   * each element in `array` to compute their sort ranking. The `callback` is\n   * bound to `thisArg` and invoked with one argument; (value). The `callback`\n   * argument may also be the name of a property to order by.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to iterate over.\n   * @param {Mixed} value The value to evaluate.\n   * @param {Function|String} [callback=identity|property] The function called\n   *  per iteration or property name to order by.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Number} Returns the index at which the value should be inserted\n   *  into `array`.\n   * @example\n   *\n   * _.sortedIndex([20, 30, 50], 40);\n   * // => 2\n   *\n   * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n   * // => 2\n   *\n   * var dict = {\n   *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }\n   * };\n   *\n   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n   *   return dict.wordToNumber[word];\n   * });\n   * // => 2\n   *\n   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n   *   return this.wordToNumber[word];\n   * }, dict);\n   * // => 2\n   */\n  function sortedIndex(array, value, callback, thisArg) {\n    var low = 0,\n        high = array ? array.length : low;\n\n    // explicitly reference `identity` for better engine inlining\n    callback = callback ? createCallback(callback, thisArg) : identity;\n    value = callback(value);\n    while (low < high) {\n      var mid = (low + high) >>> 1;\n      callback(array[mid]) < value\n        ? low = mid + 1\n        : high = mid;\n    }\n    return low;\n  }\n\n  /**\n   * Computes the union of the passed-in arrays using strict equality for\n   * comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of unique values, in order, that are\n   *  present in one or more of the arrays.\n   * @example\n   *\n   * _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n   * // => [1, 2, 3, 101, 10]\n   */\n  function union() {\n    return uniq(concat.apply(arrayRef, arguments));\n  }\n\n  /**\n   * Creates a duplicate-value-free version of the `array` using strict equality\n   * for comparisons, i.e. `===`. If the `array` is already sorted, passing `true`\n   * for `isSorted` will run a faster algorithm. If `callback` is passed, each\n   * element of `array` is passed through a callback` before uniqueness is computed.\n   * The `callback` is bound to `thisArg` and invoked with three arguments; (value, index, array).\n   *\n   * @static\n   * @memberOf _\n   * @alias unique\n   * @category Arrays\n   * @param {Array} array The array to process.\n   * @param {Boolean} [isSorted=false] A flag to indicate that the `array` is already sorted.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a duplicate-value-free array.\n   * @example\n   *\n   * _.uniq([1, 2, 1, 3, 1]);\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 1, 2, 2, 3], true);\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return Math.floor(num); });\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return this.floor(num); }, Math);\n   * // => [1, 2, 3]\n   */\n  function uniq(array, isSorted, callback, thisArg) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [],\n        seen = result;\n\n    // juggle arguments\n    if (typeof isSorted == 'function') {\n      thisArg = callback;\n      callback = isSorted;\n      isSorted = false;\n    }\n    // init value cache for large arrays\n    var isLarge = !isSorted && length > 74;\n    if (isLarge) {\n      var cache = {};\n    }\n    if (callback) {\n      seen = [];\n      callback = createCallback(callback, thisArg);\n    }\n    while (++index < length) {\n      var value = array[index],\n          computed = callback ? callback(value, index, array) : value;\n\n      if (isLarge) {\n        // manually coerce `computed` to a string because `hasOwnProperty`, in\n        // some older versions of Firefox, coerces objects incorrectly\n        seen = hasOwnProperty.call(cache, computed + '') ? cache[computed] : (cache[computed] = []);\n      }\n      if (isSorted\n            ? !index || seen[seen.length - 1] !== computed\n            : indexOf(seen, computed) < 0\n          ) {\n        if (callback || isLarge) {\n          seen.push(computed);\n        }\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array with all occurrences of the passed values removed using\n   * strict equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to filter.\n   * @param {Mixed} [value1, value2, ...] Values to remove.\n   * @returns {Array} Returns a new filtered array.\n   * @example\n   *\n   * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n   * // => [2, 3, 4]\n   */\n  function without(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        contains = cachedContains(arguments, 1, 20),\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (!contains(value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Groups the elements of each array at their corresponding indexes. Useful for\n   * separate data sources that are coordinated through matching array indexes.\n   * For a matrix of nested arrays, `_.zip.apply(...)` can transpose the matrix\n   * in a similar fashion.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of grouped elements.\n   * @example\n   *\n   * _.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);\n   * // => [['moe', 30, true], ['larry', 40, false], ['curly', 50, false]]\n   */\n  function zip(array) {\n    var index = -1,\n        length = array ? max(pluck(arguments, 'length')) : 0,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = pluck(arguments, index);\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a function that is restricted to executing `func` only after it is\n   * called `n` times. The `func` is executed with the `this` binding of the\n   * created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Number} n The number of times the function must be called before\n   * it is executed.\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * var renderNotes = _.after(notes.length, render);\n   * _.forEach(notes, function(note) {\n   *   note.asyncSave({ 'success': renderNotes });\n   * });\n   * // `renderNotes` is run once, after all notes have saved\n   */\n  function after(n, func) {\n    if (n < 1) {\n      return func();\n    }\n    return function() {\n      if (--n < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with the `this`\n   * binding of `thisArg` and prepends any additional `bind` arguments to those\n   * passed to the bound function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to bind.\n   * @param {Mixed} [thisArg] The `this` binding of `func`.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new bound function.\n   * @example\n   *\n   * var func = function(greeting) {\n   *   return greeting + ' ' + this.name;\n   * };\n   *\n   * func = _.bind(func, { 'name': 'moe' }, 'hi');\n   * func();\n   * // => 'hi moe'\n   */\n  function bind(func, thisArg) {\n    // use `Function#bind` if it exists and is fast\n    // (in V8 `Function#bind` is slower except when partially applied)\n    return isBindFast || (nativeBind && arguments.length > 2)\n      ? nativeBind.call.apply(nativeBind, arguments)\n      : createBound(func, thisArg, slice.call(arguments, 2));\n  }\n\n  /**\n   * Binds methods on `object` to `object`, overwriting the existing method.\n   * If no method names are provided, all the function properties of `object`\n   * will be bound.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Object} object The object to bind and assign the bound methods to.\n   * @param {String} [methodName1, methodName2, ...] Method names on the object to bind.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * var buttonView = {\n   *  'label': 'lodash',\n   *  'onClick': function() { alert('clicked: ' + this.label); }\n   * };\n   *\n   * _.bindAll(buttonView);\n   * jQuery('#lodash_button').on('click', buttonView.onClick);\n   * // => When the button is clicked, `this.label` will have the correct value\n   */\n  function bindAll(object) {\n    var funcs = arguments,\n        index = funcs.length > 1 ? 0 : (funcs = functions(object), -1),\n        length = funcs.length;\n\n    while (++index < length) {\n      var key = funcs[index];\n      object[key] = bind(object[key], object);\n    }\n    return object;\n  }\n\n  /**\n   * Creates a function that is the composition of the passed functions,\n   * where each function consumes the return value of the function that follows.\n   * In math terms, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} [func1, func2, ...] Functions to compose.\n   * @returns {Function} Returns the new composed function.\n   * @example\n   *\n   * var greet = function(name) { return 'hi: ' + name; };\n   * var exclaim = function(statement) { return statement + '!'; };\n   * var welcome = _.compose(exclaim, greet);\n   * welcome('moe');\n   * // => 'hi: moe!'\n   */\n  function compose() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments,\n          length = funcs.length;\n\n      while (length--) {\n        args = [funcs[length].apply(this, args)];\n      }\n      return args[0];\n    };\n  }\n\n  /**\n   * Creates a function that will delay the execution of `func` until after\n   * `wait` milliseconds have elapsed since the last time it was invoked. Pass\n   * `true` for `immediate` to cause debounce to invoke `func` on the leading,\n   * instead of the trailing, edge of the `wait` timeout. Subsequent calls to\n   * the debounced function will return the result of the last `func` call.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to debounce.\n   * @param {Number} wait The number of milliseconds to delay.\n   * @param {Boolean} immediate A flag to indicate execution is on the leading\n   *  edge of the timeout.\n   * @returns {Function} Returns the new debounced function.\n   * @example\n   *\n   * var lazyLayout = _.debounce(calculateLayout, 300);\n   * jQuery(window).on('resize', lazyLayout);\n   */\n  function debounce(func, wait, immediate) {\n    var args,\n        result,\n        thisArg,\n        timeoutId;\n\n    function delayed() {\n      timeoutId = null;\n      if (!immediate) {\n        result = func.apply(thisArg, args);\n      }\n    }\n    return function() {\n      var isImmediate = immediate && !timeoutId;\n      args = arguments;\n      thisArg = this;\n\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(delayed, wait);\n\n      if (isImmediate) {\n        result = func.apply(thisArg, args);\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Executes the `func` function after `wait` milliseconds. Additional arguments\n   * will be passed to `func` when it is invoked.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to delay.\n   * @param {Number} wait The number of milliseconds to delay execution.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n   * @returns {Number} Returns the `setTimeout` timeout id.\n   * @example\n   *\n   * var log = _.bind(console.log, console);\n   * _.delay(log, 1000, 'logged later');\n   * // => 'logged later' (Appears after one second.)\n   */\n  function delay(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function() { func.apply(undefined, args); }, wait);\n  }\n\n  /**\n   * Defers executing the `func` function until the current call stack has cleared.\n   * Additional arguments will be passed to `func` when it is invoked.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to defer.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n   * @returns {Number} Returns the `setTimeout` timeout id.\n   * @example\n   *\n   * _.defer(function() { alert('deferred'); });\n   * // returns from the function before `alert` is called\n   */\n  function defer(func) {\n    var args = slice.call(arguments, 1);\n    return setTimeout(function() { func.apply(undefined, args); }, 1);\n  }\n\n  /**\n   * Creates a function that, when called, invokes `object[methodName]` and\n   * prepends any additional `lateBind` arguments to those passed to the bound\n   * function. This method differs from `_.bind` by allowing bound functions to\n   * reference methods that will be redefined or don't yet exist.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Object} object The object the method belongs to.\n   * @param {String} methodName The method name.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new bound function.\n   * @example\n   *\n   * var object = {\n   *   'name': 'moe',\n   *   'greet': function(greeting) {\n   *     return greeting + ' ' + this.name;\n   *   }\n   * };\n   *\n   * var func = _.lateBind(object, 'greet', 'hi');\n   * func();\n   * // => 'hi moe'\n   *\n   * object.greet = function(greeting) {\n   *   return greeting + ', ' + this.name + '!';\n   * };\n   *\n   * func();\n   * // => 'hi, moe!'\n   */\n  function lateBind(object, methodName) {\n    return createBound(methodName, object, slice.call(arguments, 2));\n  }\n\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * passed, it will be used to determine the cache key for storing the result\n   * based on the arguments passed to the memoized function. By default, the first\n   * argument passed to the memoized function is used as the cache key. The `func`\n   * is executed with the `this` binding of the memoized function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] A function used to resolve the cache key.\n   * @returns {Function} Returns the new memoizing function.\n   * @example\n   *\n   * var fibonacci = _.memoize(function(n) {\n   *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n   * });\n   */\n  function memoize(func, resolver) {\n    var cache = {};\n    return function() {\n      var key = resolver ? resolver.apply(this, arguments) : arguments[0];\n      return hasOwnProperty.call(cache, key)\n        ? cache[key]\n        : (cache[key] = func.apply(this, arguments));\n    };\n  }\n\n  /**\n   * Creates a function that is restricted to execute `func` once. Repeat calls to\n   * the function will return the value of the first call. The `func` is executed\n   * with the `this` binding of the created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * var initialize = _.once(createApplication);\n   * initialize();\n   * initialize();\n   * // Application is only created once.\n   */\n  function once(func) {\n    var result,\n        ran = false;\n\n    return function() {\n      if (ran) {\n        return result;\n      }\n      ran = true;\n      result = func.apply(this, arguments);\n\n      // clear the `func` variable so the function may be garbage collected\n      func = null;\n      return result;\n    };\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with any additional\n   * `partial` arguments prepended to those passed to the new function. This\n   * method is similar to `bind`, except it does **not** alter the `this` binding.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to partially apply arguments to.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new partially applied function.\n   * @example\n   *\n   * var greet = function(greeting, name) { return greeting + ': ' + name; };\n   * var hi = _.partial(greet, 'hi');\n   * hi('moe');\n   * // => 'hi: moe'\n   */\n  function partial(func) {\n    return createBound(func, slice.call(arguments, 1));\n  }\n\n  /**\n   * Creates a function that, when executed, will only call the `func`\n   * function at most once per every `wait` milliseconds. If the throttled\n   * function is invoked more than once during the `wait` timeout, `func` will\n   * also be called on the trailing edge of the timeout. Subsequent calls to the\n   * throttled function will return the result of the last `func` call.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to throttle.\n   * @param {Number} wait The number of milliseconds to throttle executions to.\n   * @returns {Function} Returns the new throttled function.\n   * @example\n   *\n   * var throttled = _.throttle(updatePosition, 100);\n   * jQuery(window).on('scroll', throttled);\n   */\n  function throttle(func, wait) {\n    var args,\n        result,\n        thisArg,\n        timeoutId,\n        lastCalled = 0;\n\n    function trailingCall() {\n      lastCalled = new Date;\n      timeoutId = null;\n      result = func.apply(thisArg, args);\n    }\n    return function() {\n      var now = new Date,\n          remaining = wait - (now - lastCalled);\n\n      args = arguments;\n      thisArg = this;\n\n      if (remaining <= 0) {\n        clearTimeout(timeoutId);\n        lastCalled = now;\n        result = func.apply(thisArg, args);\n      }\n      else if (!timeoutId) {\n        timeoutId = setTimeout(trailingCall, remaining);\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Creates a function that passes `value` to the `wrapper` function as its\n   * first argument. Additional arguments passed to the function are appended\n   * to those passed to the `wrapper` function. The `wrapper` is executed with\n   * the `this` binding of the created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Mixed} value The value to wrap.\n   * @param {Function} wrapper The wrapper function.\n   * @returns {Function} Returns the new function.\n   * @example\n   *\n   * var hello = function(name) { return 'hello ' + name; };\n   * hello = _.wrap(hello, function(func) {\n   *   return 'before, ' + func('moe') + ', after';\n   * });\n   * hello();\n   * // => 'before, hello moe, after'\n   */\n  function wrap(value, wrapper) {\n    return function() {\n      var args = [value];\n      push.apply(args, arguments);\n      return wrapper.apply(this, args);\n    };\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Converts the characters `&`, `<`, `>`, `\"`, and `'` in `string` to their\n   * corresponding HTML entities.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} string The string to escape.\n   * @returns {String} Returns the escaped string.\n   * @example\n   *\n   * _.escape('Moe, Larry & Curly');\n   * // => \"Moe, Larry &amp; Curly\"\n   */\n  function escape(string) {\n    return string == null ? '' : (string + '').replace(reUnescapedHtml, escapeHtmlChar);\n  }\n\n  /**\n   * This function returns the first argument passed to it.\n   *\n   * Note: It is used throughout Lo-Dash as a default callback.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Mixed} value Any value.\n   * @returns {Mixed} Returns `value`.\n   * @example\n   *\n   * var moe = { 'name': 'moe' };\n   * moe === _.identity(moe);\n   * // => true\n   */\n  function identity(value) {\n    return value;\n  }\n\n  /**\n   * Adds functions properties of `object` to the `lodash` function and chainable\n   * wrapper.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} object The object of function properties to add to `lodash`.\n   * @example\n   *\n   * _.mixin({\n   *   'capitalize': function(string) {\n   *     return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n   *   }\n   * });\n   *\n   * _.capitalize('larry');\n   * // => 'Larry'\n   *\n   * _('curly').capitalize();\n   * // => 'Curly'\n   */\n  function mixin(object) {\n    forEach(functions(object), function(methodName) {\n      var func = lodash[methodName] = object[methodName];\n\n      lodash.prototype[methodName] = function() {\n        var args = [this.__wrapped__];\n        push.apply(args, arguments);\n\n        var result = func.apply(lodash, args);\n        if (this.__chain__) {\n          result = new lodash(result);\n          result.__chain__ = true;\n        }\n        return result;\n      };\n    });\n  }\n\n  /**\n   * Reverts the '_' variable to its previous value and returns a reference to\n   * the `lodash` function.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @returns {Function} Returns the `lodash` function.\n   * @example\n   *\n   * var lodash = _.noConflict();\n   */\n  function noConflict() {\n    window._ = oldDash;\n    return this;\n  }\n\n  /**\n   * Produces a random number between `min` and `max` (inclusive). If only one\n   * argument is passed, a number between `0` and the given number will be returned.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Number} [min=0] The minimum possible value.\n   * @param {Number} [max=1] The maximum possible value.\n   * @returns {Number} Returns a random number.\n   * @example\n   *\n   * _.random(0, 5);\n   * // => a number between 1 and 5\n   *\n   * _.random(5);\n   * // => also a number between 1 and 5\n   */\n  function random(min, max) {\n    if (min == null && max == null) {\n      max = 1;\n    }\n    min = +min || 0;\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + floor(nativeRandom() * ((+max || 0) - min + 1));\n  }\n\n  /**\n   * Resolves the value of `property` on `object`. If `property` is a function\n   * it will be invoked and its result returned, else the property value is\n   * returned. If `object` is falsey, then `null` is returned.\n   *\n   * @deprecated\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} object The object to inspect.\n   * @param {String} property The property to get the value of.\n   * @returns {Mixed} Returns the resolved value.\n   * @example\n   *\n   * var object = {\n   *   'cheese': 'crumpets',\n   *   'stuff': function() {\n   *     return 'nonsense';\n   *   }\n   * };\n   *\n   * _.result(object, 'cheese');\n   * // => 'crumpets'\n   *\n   * _.result(object, 'stuff');\n   * // => 'nonsense'\n   */\n  function result(object, property) {\n    // based on Backbone's private `getValue` function\n    // https://github.com/documentcloud/backbone/blob/0.9.2/backbone.js#L1419-1424\n    var value = object ? object[property] : null;\n    return isFunction(value) ? object[property]() : value;\n  }\n\n  /**\n   * A micro-templating method that handles arbitrary delimiters, preserves\n   * whitespace, and correctly escapes quotes within interpolated code.\n   *\n   * Note: In the development build `_.template` utilizes sourceURLs for easier\n   * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n   *\n   * Note: Lo-Dash may be used in Chrome extensions by either creating a `lodash csp`\n   * build and avoiding `_.template` use, or loading Lo-Dash in a sandboxed page.\n   * See http://developer.chrome.com/trunk/extensions/sandboxingEval.html\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} text The template text.\n   * @param {Obect} data The data object used to populate the text.\n   * @param {Object} options The options object.\n   *  escape - The \"escape\" delimiter regexp.\n   *  evaluate - The \"evaluate\" delimiter regexp.\n   *  interpolate - The \"interpolate\" delimiter regexp.\n   *  sourceURL - The sourceURL of the template's compiled source.\n   *  variable - The data object variable name.\n   *\n   * @returns {Function|String} Returns a compiled function when no `data` object\n   *  is given, else it returns the interpolated text.\n   * @example\n   *\n   * // using a compiled template\n   * var compiled = _.template('hello <%= name %>');\n   * compiled({ 'name': 'moe' });\n   * // => 'hello moe'\n   *\n   * var list = '<% _.forEach(people, function(name) { %><li><%= name %></li><% }); %>';\n   * _.template(list, { 'people': ['moe', 'larry', 'curly'] });\n   * // => '<li>moe</li><li>larry</li><li>curly</li>'\n   *\n   * // using the \"escape\" delimiter to escape HTML in data property values\n   * _.template('<b><%- value %></b>', { 'value': '<script>' });\n   * // => '<b>&lt;script&gt;</b>'\n   *\n   * // using the ES6 delimiter as an alternative to the default \"interpolate\" delimiter\n   * _.template('hello ${ name }', { 'name': 'curly' });\n   * // => 'hello curly'\n   *\n   * // using the internal `print` function in \"evaluate\" delimiters\n   * _.template('<% print(\"hello \" + epithet); %>!', { 'epithet': 'stooge' });\n   * // => 'hello stooge!'\n   *\n   * // using custom template delimiters\n   * _.templateSettings = {\n   *   'interpolate': /{{([\\s\\S]+?)}}/g\n   * };\n   *\n   * _.template('hello {{ name }}!', { 'name': 'mustache' });\n   * // => 'hello mustache!'\n   *\n   * // using the `sourceURL` option to specify a custom sourceURL for the template\n   * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });\n   * compiled(data);\n   * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n   *\n   * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n   * var compiled = _.template('hello <%= data.name %>!', null, { 'variable': 'data' });\n   * compiled.source;\n   * // => function(data) {\n   *   var __t, __p = '', __e = _.escape;\n   *   __p += 'hello ' + ((__t = ( data.name )) == null ? '' : __t) + '!';\n   *   return __p;\n   * }\n   *\n   * // using the `source` property to inline compiled templates for meaningful\n   * // line numbers in error messages and a stack trace\n   * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n   *   var JST = {\\\n   *     \"main\": ' + _.template(mainText).source + '\\\n   *   };\\\n   * ');\n   */\n  function template(text, data, options) {\n    // based on John Resig's `tmpl` implementation\n    // http://ejohn.org/blog/javascript-micro-templating/\n    // and Laura Doktorova's doT.js\n    // https://github.com/olado/doT\n    text || (text = '');\n    options || (options = {});\n\n    var isEvaluating,\n        result,\n        settings = lodash.templateSettings,\n        index = 0,\n        interpolate = options.interpolate || settings.interpolate || reNoMatch,\n        source = \"__p += '\",\n        variable = options.variable || settings.variable,\n        hasVariable = variable;\n\n    // compile regexp to match each delimiter\n    var reDelimiters = RegExp(\n      (options.escape || settings.escape || reNoMatch).source + '|' +\n      interpolate.source + '|' +\n      (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n      (options.evaluate || settings.evaluate || reNoMatch).source + '|$'\n    , 'g');\n\n    text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n      interpolateValue || (interpolateValue = esTemplateValue);\n\n      // escape characters that cannot be included in string literals\n      source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n      // replace delimiters with snippets\n      source +=\n        escapeValue ? \"' +\\n__e(\" + escapeValue + \") +\\n'\" :\n        evaluateValue ? \"';\\n\" + evaluateValue + \";\\n__p += '\" :\n        interpolateValue ? \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\" : '';\n\n      isEvaluating || (isEvaluating = evaluateValue || reComplexDelimiter.test(escapeValue || interpolateValue));\n      index = offset + match.length;\n    });\n\n    source += \"';\\n\";\n\n    // if `variable` is not specified and the template contains \"evaluate\"\n    // delimiters, wrap a with-statement around the generated code to add the\n    // data object to the top of the scope chain\n    if (!hasVariable) {\n      variable = 'obj';\n      if (isEvaluating) {\n        source = 'with (' + variable + ') {\\n' + source + '\\n}\\n';\n      }\n      else {\n        // avoid a with-statement by prepending data object references to property names\n        var reDoubleVariable = RegExp('(\\\\(\\\\s*)' + variable + '\\\\.' + variable + '\\\\b', 'g');\n        source = source\n          .replace(reInsertVariable, '$&' + variable + '.')\n          .replace(reDoubleVariable, '$1__d');\n      }\n    }\n\n    // cleanup code by stripping empty strings\n    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n      .replace(reEmptyStringMiddle, '$1')\n      .replace(reEmptyStringTrailing, '$1;');\n\n    // frame code as the function body\n    source = 'function(' + variable + ') {\\n' +\n      (hasVariable ? '' : variable + ' || (' + variable + ' = {});\\n') +\n      'var __t, __p = \\'\\', __e = _.escape' +\n      (isEvaluating\n        ? ', __j = Array.prototype.join;\\n' +\n          'function print() { __p += __j.call(arguments, \\'\\') }\\n'\n        : (hasVariable ? '' : ', __d = ' + variable + '.' + variable + ' || ' + variable) + ';\\n'\n      ) +\n      source +\n      'return __p\\n}';\n\n    // use a sourceURL for easier debugging\n    // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n    var sourceURL = useSourceURL\n      ? '\\n//@ sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']')\n      : '';\n\n    try {\n      result = Function('_', 'return ' + source + sourceURL)(lodash);\n    } catch(e) {\n      e.source = source;\n      throw e;\n    }\n\n    if (data) {\n      return result(data);\n    }\n    // provide the compiled function's source via its `toString` method, in\n    // supported environments, or the `source` property as a convenience for\n    // inlining compiled templates during the build process\n    result.source = source;\n    return result;\n  }\n\n  /**\n   * Executes the `callback` function `n` times, returning an array of the results\n   * of each `callback` execution. The `callback` is bound to `thisArg` and invoked\n   * with one argument; (index).\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Number} n The number of times to execute the callback.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of the results of each `callback` execution.\n   * @example\n   *\n   * var diceRolls = _.times(3, _.partial(_.random, 1, 6));\n   * // => [3, 6, 4]\n   *\n   * _.times(3, function(n) { mage.castSpell(n); });\n   * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively\n   *\n   * _.times(3, function(n) { this.cast(n); }, mage);\n   * // => also calls `mage.castSpell(n)` three times\n   */\n  function times(n, callback, thisArg) {\n    n = +n || 0;\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = callback.call(thisArg, index);\n    }\n    return result;\n  }\n\n  /**\n   * The opposite of `_.escape`, this method converts the HTML entities\n   * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#x27;` in `string` to their\n   * corresponding characters.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} string The string to unescape.\n   * @returns {String} Returns the unescaped string.\n   * @example\n   *\n   * _.unescape('Moe, Larry &amp; Curly');\n   * // => \"Moe, Larry & Curly\"\n   */\n  function unescape(string) {\n    return string == null ? '' : (string + '').replace(reEscapedHtml, unescapeHtmlChar);\n  }\n\n  /**\n   * Generates a unique id. If `prefix` is passed, the id will be appended to it.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} [prefix] The value to prefix the id with.\n   * @returns {Number|String} Returns a numeric id if no prefix is passed, else\n   *  a string id may be returned.\n   * @example\n   *\n   * _.uniqueId('contact_');\n   * // => 'contact_104'\n   */\n  function uniqueId(prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Wraps the value in a `lodash` wrapper object.\n   *\n   * @static\n   * @memberOf _\n   * @category Chaining\n   * @param {Mixed} value The value to wrap.\n   * @returns {Object} Returns the wrapper object.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 },\n   *   { 'name': 'curly', 'age': 60 }\n   * ];\n   *\n   * var youngest = _.chain(stooges)\n   *     .sortBy(function(stooge) { return stooge.age; })\n   *     .map(function(stooge) { return stooge.name + ' is ' + stooge.age; })\n   *     .first()\n   *     .value();\n   * // => 'moe is 40'\n   */\n  function chain(value) {\n    value = new lodash(value);\n    value.__chain__ = true;\n    return value;\n  }\n\n  /**\n   * Invokes `interceptor` with the `value` as the first argument, and then\n   * returns `value`. The purpose of this method is to \"tap into\" a method chain,\n   * in order to perform operations on intermediate results within the chain.\n   *\n   * @static\n   * @memberOf _\n   * @category Chaining\n   * @param {Mixed} value The value to pass to `interceptor`.\n   * @param {Function} interceptor The function to invoke.\n   * @returns {Mixed} Returns `value`.\n   * @example\n   *\n   * _.chain([1, 2, 3, 200])\n   *  .filter(function(num) { return num % 2 == 0; })\n   *  .tap(alert)\n   *  .map(function(num) { return num * num })\n   *  .value();\n   * // => // [2, 200] (alerted)\n   * // => [4, 40000]\n   */\n  function tap(value, interceptor) {\n    interceptor(value);\n    return value;\n  }\n\n  /**\n   * Enables method chaining on the wrapper object.\n   *\n   * @name chain\n   * @deprecated\n   * @memberOf _\n   * @category Chaining\n   * @returns {Mixed} Returns the wrapper object.\n   * @example\n   *\n   * _([1, 2, 3]).value();\n   * // => [1, 2, 3]\n   */\n  function wrapperChain() {\n    this.__chain__ = true;\n    return this;\n  }\n\n  /**\n   * Extracts the wrapped value.\n   *\n   * @name value\n   * @memberOf _\n   * @category Chaining\n   * @returns {Mixed} Returns the wrapped value.\n   * @example\n   *\n   * _([1, 2, 3]).value();\n   * // => [1, 2, 3]\n   */\n  function wrapperValue() {\n    return this.__wrapped__;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The semantic version number.\n   *\n   * @static\n   * @memberOf _\n   * @type String\n   */\n  lodash.VERSION = '0.9.2';\n\n  // assign static methods\n  lodash.after = after;\n  lodash.bind = bind;\n  lodash.bindAll = bindAll;\n  lodash.chain = chain;\n  lodash.clone = clone;\n  lodash.compact = compact;\n  lodash.compose = compose;\n  lodash.contains = contains;\n  lodash.countBy = countBy;\n  lodash.debounce = debounce;\n  lodash.defaults = defaults;\n  lodash.defer = defer;\n  lodash.delay = delay;\n  lodash.difference = difference;\n  lodash.escape = escape;\n  lodash.every = every;\n  lodash.extend = extend;\n  lodash.filter = filter;\n  lodash.find = find;\n  lodash.first = first;\n  lodash.flatten = flatten;\n  lodash.forEach = forEach;\n  lodash.forIn = forIn;\n  lodash.forOwn = forOwn;\n  lodash.functions = functions;\n  lodash.groupBy = groupBy;\n  lodash.has = has;\n  lodash.identity = identity;\n  lodash.indexOf = indexOf;\n  lodash.initial = initial;\n  lodash.intersection = intersection;\n  lodash.invert = invert;\n  lodash.invoke = invoke;\n  lodash.isArguments = isArguments;\n  lodash.isArray = isArray;\n  lodash.isBoolean = isBoolean;\n  lodash.isDate = isDate;\n  lodash.isElement = isElement;\n  lodash.isEmpty = isEmpty;\n  lodash.isEqual = isEqual;\n  lodash.isFinite = isFinite;\n  lodash.isFunction = isFunction;\n  lodash.isNaN = isNaN;\n  lodash.isNull = isNull;\n  lodash.isNumber = isNumber;\n  lodash.isObject = isObject;\n  lodash.isPlainObject = isPlainObject;\n  lodash.isRegExp = isRegExp;\n  lodash.isString = isString;\n  lodash.isUndefined = isUndefined;\n  lodash.keys = keys;\n  lodash.last = last;\n  lodash.lastIndexOf = lastIndexOf;\n  lodash.lateBind = lateBind;\n  lodash.map = map;\n  lodash.max = max;\n  lodash.memoize = memoize;\n  lodash.merge = merge;\n  lodash.min = min;\n  lodash.mixin = mixin;\n  lodash.noConflict = noConflict;\n  lodash.object = object;\n  lodash.omit = omit;\n  lodash.once = once;\n  lodash.pairs = pairs;\n  lodash.partial = partial;\n  lodash.pick = pick;\n  lodash.pluck = pluck;\n  lodash.random = random;\n  lodash.range = range;\n  lodash.reduce = reduce;\n  lodash.reduceRight = reduceRight;\n  lodash.reject = reject;\n  lodash.rest = rest;\n  lodash.result = result;\n  lodash.shuffle = shuffle;\n  lodash.size = size;\n  lodash.some = some;\n  lodash.sortBy = sortBy;\n  lodash.sortedIndex = sortedIndex;\n  lodash.tap = tap;\n  lodash.template = template;\n  lodash.throttle = throttle;\n  lodash.times = times;\n  lodash.toArray = toArray;\n  lodash.unescape = unescape;\n  lodash.union = union;\n  lodash.uniq = uniq;\n  lodash.uniqueId = uniqueId;\n  lodash.values = values;\n  lodash.where = where;\n  lodash.without = without;\n  lodash.wrap = wrap;\n  lodash.zip = zip;\n\n  // assign aliases\n  lodash.all = every;\n  lodash.any = some;\n  lodash.collect = map;\n  lodash.detect = find;\n  lodash.drop = rest;\n  lodash.each = forEach;\n  lodash.foldl = reduce;\n  lodash.foldr = reduceRight;\n  lodash.head = first;\n  lodash.include = contains;\n  lodash.inject = reduce;\n  lodash.methods = functions;\n  lodash.select = filter;\n  lodash.tail = rest;\n  lodash.take = first;\n  lodash.unique = uniq;\n\n  // add pseudo private property to be used and removed during the build process\n  lodash._iteratorTemplate = iteratorTemplate;\n\n  /*--------------------------------------------------------------------------*/\n\n  // add all static functions to `lodash.prototype`\n  mixin(lodash);\n\n  // add `lodash.prototype.chain` after calling `mixin()` to avoid overwriting\n  // it with the wrapped `lodash.chain`\n  lodash.prototype.chain = wrapperChain;\n  lodash.prototype.value = wrapperValue;\n\n  // add all mutator Array functions to the wrapper.\n  forEach(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n    var func = arrayRef[methodName];\n\n    lodash.prototype[methodName] = function() {\n      var value = this.__wrapped__;\n      func.apply(value, arguments);\n\n      // avoid array-like object bugs with `Array#shift` and `Array#splice` in\n      // Firefox < 10 and IE < 9\n      if (hasObjectSpliceBug && value.length === 0) {\n        delete value[0];\n      }\n      if (this.__chain__) {\n        value = new lodash(value);\n        value.__chain__ = true;\n      }\n      return value;\n    };\n  });\n\n  // add all accessor Array functions to the wrapper.\n  forEach(['concat', 'join', 'slice'], function(methodName) {\n    var func = arrayRef[methodName];\n\n    lodash.prototype[methodName] = function() {\n      var value = this.__wrapped__,\n          result = func.apply(value, arguments);\n\n      if (this.__chain__) {\n        result = new lodash(result);\n        result.__chain__ = true;\n      }\n      return result;\n    };\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // expose Lo-Dash\n  // some AMD build optimizers, like r.js, check for specific condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lo-Dash to the global object even when an AMD loader is present in\n    // case Lo-Dash was injected by a third-party script and not intended to be\n    // loaded as a module. The global assignment can be reverted in the Lo-Dash\n    // module via its `noConflict()` method.\n    window._ = lodash;\n\n    // define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module\n    define(function() {\n      return lodash;\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports) {\n    // in Node.js or RingoJS v0.8.0+\n    if (typeof module == 'object' && module && module.exports == freeExports) {\n      (module.exports = lodash)._ = lodash;\n    }\n    // in Narwhal or RingoJS v0.7.0-\n    else {\n      freeExports._ = lodash;\n    }\n  }\n  else {\n    // in a browser or Rhino\n    window._ = lodash;\n  }\n}(this));","blocks":{"total":341,"seen":49,"missing":292,"percentage":0.1436950146627566}},"hash":"f6909c2a37e308fe30885c0da70236b3"},"/usr/local/lib/node_modules/grunt-cli/node_modules/glob/glob.js":{"stats":{"percentage":0.6970198675496688,"lines":[{"lineno":49},{"lineno":50},{"lineno":53},{"lineno":54},{"lineno":58},{"lineno":64},{"lineno":70},{"lineno":71},{"lineno":84},{"lineno":88},{"lineno":89},{"lineno":91},{"lineno":106},{"lineno":118},{"lineno":122},{"lineno":124},{"lineno":126},{"lineno":161},{"lineno":171},{"lineno":175},{"lineno":179},{"lineno":180},{"lineno":181},{"lineno":186},{"lineno":196},{"lineno":201},{"lineno":202},{"lineno":204},{"lineno":205},{"lineno":206},{"lineno":207},{"lineno":209},{"lineno":210},{"lineno":212},{"lineno":216},{"lineno":223},{"lineno":224},{"lineno":225},{"lineno":229},{"lineno":233},{"lineno":234},{"lineno":238},{"lineno":240},{"lineno":241},{"lineno":242},{"lineno":246},{"lineno":248},{"lineno":249},{"lineno":250},{"lineno":251},{"lineno":270},{"lineno":284},{"lineno":285},{"lineno":286},{"lineno":287},{"lineno":288},{"lineno":291},{"lineno":297},{"lineno":299},{"lineno":319},{"lineno":332},{"lineno":339},{"lineno":340},{"lineno":345},{"lineno":346},{"lineno":347},{"lineno":348},{"lineno":349},{"lineno":350},{"lineno":352},{"lineno":353},{"lineno":357},{"lineno":361},{"lineno":364},{"lineno":365},{"lineno":366},{"lineno":368},{"lineno":370},{"lineno":374},{"lineno":376},{"lineno":377},{"lineno":378},{"lineno":379},{"lineno":380},{"lineno":384},{"lineno":390},{"lineno":391},{"lineno":392},{"lineno":393},{"lineno":395},{"lineno":396},{"lineno":398},{"lineno":399},{"lineno":400},{"lineno":401},{"lineno":408},{"lineno":411},{"lineno":413},{"lineno":414},{"lineno":416},{"lineno":417},{"lineno":420},{"lineno":421},{"lineno":422},{"lineno":424},{"lineno":430},{"lineno":432},{"lineno":433},{"lineno":434},{"lineno":435},{"lineno":436},{"lineno":437},{"lineno":438},{"lineno":449},{"lineno":451},{"lineno":453},{"lineno":455},{"lineno":456},{"lineno":457},{"lineno":458},{"lineno":462},{"lineno":463},{"lineno":464},{"lineno":465},{"lineno":477},{"lineno":487},{"lineno":494},{"lineno":495},{"lineno":496},{"lineno":497},{"lineno":498},{"lineno":499},{"lineno":501},{"lineno":504},{"lineno":505},{"lineno":506},{"lineno":507},{"lineno":508},{"lineno":509},{"lineno":512},{"lineno":513},{"lineno":514},{"lineno":515},{"lineno":516},{"lineno":519},{"lineno":521},{"lineno":522},{"lineno":523},{"lineno":524},{"lineno":525},{"lineno":526},{"lineno":527},{"lineno":536},{"lineno":538},{"lineno":540},{"lineno":542},{"lineno":545},{"lineno":549},{"lineno":550},{"lineno":551},{"lineno":556},{"lineno":557},{"lineno":558},{"lineno":559},{"lineno":560},{"lineno":564},{"lineno":570},{"lineno":571},{"lineno":576},{"lineno":577},{"lineno":579},{"lineno":580},{"lineno":581},{"lineno":582},{"lineno":586},{"lineno":589},{"lineno":592},{"lineno":594},{"lineno":595},{"lineno":596},{"lineno":597},{"lineno":599},{"lineno":603}],"missing":183,"seen":421,"total":604,"coverage":{"49":{"partial":true,"source":"  if (typeof options === \"function\") cb = options, options = {}","missing":[{}]},"50":{"partial":false,"source":"  if (!options) options = {}","missing":[{}]},"51":{"partial":false,"source":"","missing":[{}]},"52":{"partial":true,"source":"  if (typeof options === \"number\") {","missing":[{}]},"53":{"partial":false,"source":"    deprecated()","missing":[{"startCol":4,"endCol":16},{}]},"54":{"partial":false,"source":"    return","missing":[{"startCol":4,"endCol":10},{}]},"58":{"partial":true,"source":"  return g.sync ? g.found : g","missing":[{"startCol":28,"endCol":29}]},"64":{"partial":false,"source":"  throw new Error(\"glob's interface has changed. Please see the docs.\")","missing":[{}]},"65":{"partial":false,"source":"}","missing":[{}]},"70":{"partial":false,"source":"    deprecated()","missing":[{"startCol":4,"endCol":16},{}]},"71":{"partial":false,"source":"    return","missing":[{},{"startCol":4,"endCol":10}]},"84":{"partial":false,"source":"    return new Glob(pattern, options, cb)","missing":[{}]},"85":{"partial":false,"source":"  }","missing":[{}]},"88":{"partial":false,"source":"    this.on(\"error\", cb)","missing":[{"startCol":4,"endCol":24},{}]},"89":{"partial":false,"source":"    this.on(\"end\", function (matches) {","missing":[{}]},"90":{"partial":false,"source":"      // console.error(\"cb with matches\", matches)","missing":[{}]},"91":{"partial":false,"source":"      cb(null, matches)","missing":[{},{"startCol":6,"endCol":23}]},"92":{"partial":false,"source":"    })","missing":[{}]},"93":{"partial":false,"source":"  }","missing":[{}]},"106":{"partial":true,"source":"  if (!options.hasOwnProperty(\"cwd\")) this.cwd = cwd","missing":[{}]},"107":{"partial":false,"source":"  else {","missing":[{}]},"118":{"partial":false,"source":"    throw new Error(\"must provide pattern\")","missing":[{}]},"119":{"partial":false,"source":"  }","missing":[{}]},"122":{"partial":true,"source":"  if (options.matchBase && -1 === pattern.indexOf(\"/\")) {","missing":[{"startCol":27,"endCol":54},{"startCol":34,"endCol":54}]},"124":{"partial":false,"source":"      throw new Error(\"base matching requires globstar\")","missing":[{}]},"125":{"partial":false,"source":"    }","missing":[{}]},"126":{"partial":false,"source":"    pattern = \"**/\" + pattern","missing":[{"startCol":14,"endCol":29},{}]},"127":{"partial":false,"source":"  }","missing":[{}]},"161":{"partial":false,"source":"      if (er) this.emit(\"error\", er)","missing":[{},{"startCol":14,"endCol":36}]},"162":{"partial":true,"source":"      if (-- n <= 0) this._finish()","missing":[{}]},"171":{"partial":true,"source":"  , all = nou ? [] : {}","missing":[{"startCol":16,"endCol":18}]},"175":{"partial":false,"source":"    if (this.debug) console.error(\"matches[%d] =\", i, matches)","missing":[{"startCol":20,"endCol":62},{}]},"176":{"partial":false,"source":"    // do like the shell, and spit out the literal glob","missing":[{}]},"177":{"partial":false,"source":"    if (!matches) {","missing":[{}]},"179":{"partial":false,"source":"        var literal = this.minimatch.globSet[i]","missing":[{}]},"180":{"partial":false,"source":"        if (nou) all.push(literal)","missing":[{"startCol":17,"endCol":34},{}]},"181":{"partial":false,"source":"        else all[literal] = true","missing":[{}]},"182":{"partial":false,"source":"      }","missing":[{}]},"186":{"partial":false,"source":"      if (nou) all.push.apply(all, m)","missing":[{"startCol":15,"endCol":37},{}]},"187":{"partial":true,"source":"      else m.forEach(function (m) {","missing":[{}]},"196":{"partial":true,"source":"    all = all.sort(this.nocase ? alphasorti : alphasort)","missing":[{"startCol":46,"endCol":55}]},"201":{"partial":false,"source":"    all = all.map(function (m) {","missing":[{}]},"202":{"partial":false,"source":"      var sc = this.statCache[m]","missing":[{}]},"203":{"partial":false,"source":"      if (!sc)","missing":[{}]},"204":{"partial":false,"source":"        return m","missing":[{}]},"205":{"partial":false,"source":"      var isDir = (Array.isArray(sc) || sc === 2)","missing":[{"startCol":18,"endCol":49},{},{"startCol":40,"endCol":48},{"startCol":19,"endCol":36}]},"206":{"partial":false,"source":"      if (isDir && m.slice(-1) !== \"/\") {","missing":[{},{"startCol":10,"endCol":38},{"startCol":19,"endCol":30}]},"207":{"partial":false,"source":"        return m + \"/\"","missing":[{},{"startCol":15,"endCol":22}]},"208":{"partial":false,"source":"      }","missing":[{}]},"209":{"partial":false,"source":"      if (!isDir && m.slice(-1) === \"/\") {","missing":[{"startCol":10,"endCol":39},{"startCol":20,"endCol":31},{}]},"210":{"partial":false,"source":"        return m.replace(/\\/+$/, \"\")","missing":[{},{"startCol":15,"endCol":36}]},"211":{"partial":false,"source":"      }","missing":[{}]},"212":{"partial":false,"source":"      return m","missing":[{}]},"213":{"partial":false,"source":"    }, this)","missing":[{}]},"214":{"partial":false,"source":"  }","missing":[{}]},"216":{"partial":false,"source":"  if (this.debug) console.error(\"emitting end\", all)","missing":[{},{"startCol":18,"endCol":52}]},"217":{"partial":false,"source":"","missing":[{}]},"218":{"partial":true,"source":"  this.EOF = this.found = all","missing":[{}]},"223":{"partial":false,"source":"  a = a.toLowerCase()","missing":[{"startCol":6,"endCol":21},{}]},"224":{"partial":false,"source":"  b = b.toLowerCase()","missing":[{"startCol":6,"endCol":21},{}]},"225":{"partial":false,"source":"  return alphasort(a, b)","missing":[{},{"startCol":9,"endCol":24}]},"226":{"partial":false,"source":"}","missing":[{}]},"229":{"partial":false,"source":"  return a > b ? 1 : a < b ? -1 : 0","missing":[{"startCol":9,"endCol":14},{"startCol":17,"endCol":18},{"startCol":21,"endCol":26},{"startCol":29,"endCol":31},{},{"startCol":34,"endCol":35}]},"230":{"partial":false,"source":"}","missing":[{}]},"233":{"partial":false,"source":"  this.aborted = true","missing":[{}]},"234":{"partial":false,"source":"  this.emit(\"abort\")","missing":[{"startCol":2,"endCol":20},{}]},"235":{"partial":false,"source":"}","missing":[{}]},"238":{"partial":false,"source":"  if (this.paused) return","missing":[{"startCol":19,"endCol":25}]},"240":{"partial":false,"source":"    this.emit(\"error\", new Error(\"Can't pause/resume sync glob\"))","missing":[{"startCol":4,"endCol":65},{}]},"241":{"partial":false,"source":"  this.paused = true","missing":[{}]},"242":{"partial":false,"source":"  this.emit(\"pause\")","missing":[{},{"startCol":2,"endCol":20}]},"243":{"partial":false,"source":"}","missing":[{}]},"246":{"partial":false,"source":"  if (!this.paused) return","missing":[{"startCol":20,"endCol":26}]},"248":{"partial":false,"source":"    this.emit(\"error\", new Error(\"Can't pause/resume sync glob\"))","missing":[{},{"startCol":4,"endCol":65}]},"249":{"partial":false,"source":"  this.paused = false","missing":[{}]},"250":{"partial":false,"source":"  this.emit(\"resume\")","missing":[{},{"startCol":2,"endCol":21}]},"251":{"partial":false,"source":"  this._processEmitQueue()","missing":[{},{"startCol":2,"endCol":26}]},"252":{"partial":false,"source":"  //process.nextTick(this.emit.bind(this, \"resume\"))","missing":[{}]},"253":{"partial":false,"source":"}","missing":[{}]},"270":{"partial":false,"source":"      console.error('emit!', m === this.EOF ? \"end\" : \"match\")","missing":[{"startCol":46,"endCol":51},{},{"startCol":29,"endCol":43},{"startCol":54,"endCol":61},{"startCol":6,"endCol":62}]},"271":{"partial":false,"source":"    }","missing":[{}]},"284":{"partial":false,"source":"        this._processQueue = []","missing":[{}]},"285":{"partial":false,"source":"        this.once(\"resume\", function () {","missing":[{}]},"286":{"partial":false,"source":"          var q = this._processQueue","missing":[{}]},"287":{"partial":false,"source":"          this._processQueue = null","missing":[{}]},"288":{"partial":false,"source":"          q.forEach(function (cb) { cb() })","missing":[{"startCol":10,"endCol":43},{},{"startCol":36,"endCol":40}]},"289":{"partial":false,"source":"        })","missing":[{}]},"290":{"partial":false,"source":"      }","missing":[{}]},"291":{"partial":false,"source":"      this._processQueue.push(cb_.bind(this, er, res))","missing":[{},{"startCol":6,"endCol":54},{"startCol":30,"endCol":53}]},"292":{"partial":false,"source":"    } else {","missing":[{}]},"297":{"partial":false,"source":"  if (this.aborted) return cb()","missing":[{"startCol":27,"endCol":31},{}]},"298":{"partial":false,"source":"","missing":[{}]},"299":{"partial":true,"source":"  if (depth > this.maxDepth) return cb()","missing":[{},{"startCol":36,"endCol":40}]},"300":{"partial":false,"source":"","missing":[{}]},"301":{"partial":false,"source":"  // Get the first [n] parts of pattern that are all strings.","missing":[{}]},"302":{"partial":true,"source":"  var n = 0","missing":[{}]},"319":{"partial":false,"source":"            prefix = path.join(this.root, prefix)","missing":[{},{"startCol":21,"endCol":49}]},"320":{"partial":false,"source":"          }","missing":[{}]},"332":{"partial":false,"source":"      prefix = null","missing":[{}]},"333":{"partial":false,"source":"      break","missing":[{}]},"339":{"partial":false,"source":"      prefix = pattern.slice(0, n)","missing":[{},{"startCol":15,"endCol":34}]},"340":{"partial":false,"source":"      prefix = prefix.join(\"/\")","missing":[{"startCol":15,"endCol":31},{}]},"341":{"partial":false,"source":"      break","missing":[{}]},"345":{"partial":false,"source":"  var read","missing":[{}]},"346":{"partial":false,"source":"  if (prefix === null) read = \".\"","missing":[{},{"startCol":6,"endCol":21}]},"347":{"partial":false,"source":"  else if (isAbsolute(prefix)) {","missing":[{"startCol":11,"endCol":29},{}]},"348":{"partial":false,"source":"    read = prefix = path.resolve(\"/\", prefix)","missing":[{},{"startCol":20,"endCol":45}]},"349":{"partial":false,"source":"    if (this.debug) console.error('absolute: ', prefix, this.root, pattern)","missing":[{},{"startCol":20,"endCol":75}]},"350":{"partial":false,"source":"  } else read = prefix","missing":[{}]},"351":{"partial":false,"source":"","missing":[{}]},"352":{"partial":false,"source":"  if (this.debug) console.error('readdir(%j)', read, this.cwd, this.root)","missing":[{},{"startCol":18,"endCol":73}]},"353":{"partial":false,"source":"  return this._readdir(read, function (er, entries) {","missing":[{}]},"354":{"partial":false,"source":"    if (er) {","missing":[{}]},"355":{"partial":false,"source":"      // not a directory!","missing":[{}]},"356":{"partial":false,"source":"      // this means that, whatever else comes after this, it can never match","missing":[{}]},"357":{"partial":false,"source":"      return cb()","missing":[{"startCol":13,"endCol":17},{}]},"358":{"partial":false,"source":"    }","missing":[{}]},"359":{"partial":false,"source":"","missing":[{}]},"360":{"partial":false,"source":"    // globstar is special","missing":[{}]},"361":{"partial":false,"source":"    if (pattern[n] === minimatch.GLOBSTAR) {","missing":[{},{"startCol":8,"endCol":41}]},"362":{"partial":false,"source":"      // test without the globstar, and with every child both below","missing":[{}]},"363":{"partial":false,"source":"      // and replacing the globstar.","missing":[{}]},"364":{"partial":false,"source":"      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]","missing":[{},{"startCol":16,"endCol":64},{"startCol":29,"endCol":35},{"startCol":43,"endCol":63},{"startCol":57,"endCol":62}]},"365":{"partial":false,"source":"      entries.forEach(function (e) {","missing":[{}]},"366":{"partial":false,"source":"        if (e.charAt(0) === \".\" && !this.dot) return","missing":[{"startCol":12,"endCol":44},{},{"startCol":46,"endCol":52}]},"367":{"partial":false,"source":"        // instead of the globstar","missing":[{}]},"368":{"partial":false,"source":"        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))","missing":[{"startCol":8,"endCol":74},{"startCol":15,"endCol":73},{"startCol":28,"endCol":34},{"startCol":41,"endCol":44},{},{"startCol":52,"endCol":72},{"startCol":66,"endCol":71}]},"369":{"partial":false,"source":"        // below the globstar","missing":[{}]},"370":{"partial":false,"source":"        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))","missing":[{},{"startCol":8,"endCol":70},{"startCol":52,"endCol":68},{"startCol":28,"endCol":34},{"startCol":15,"endCol":69},{"startCol":41,"endCol":44}]},"371":{"partial":false,"source":"      }, this)","missing":[{}]},"372":{"partial":false,"source":"","missing":[{}]},"373":{"partial":false,"source":"      // now asyncForEach over this","missing":[{}]},"374":{"partial":false,"source":"      var l = s.length","missing":[{}]},"375":{"partial":false,"source":"      , errState = null","missing":[{}]},"376":{"partial":false,"source":"      s.forEach(function (gsPattern) {","missing":[{}]},"377":{"partial":false,"source":"        this._process(gsPattern, depth + 1, index, function (er) {","missing":[{},{"startCol":33,"endCol":42}]},"378":{"partial":false,"source":"          if (errState) return","missing":[{},{"startCol":24,"endCol":30}]},"379":{"partial":false,"source":"          if (er) return cb(errState = er)","missing":[{},{"startCol":25,"endCol":42}]},"380":{"partial":false,"source":"          if (--l <= 0) return cb()","missing":[{"startCol":14,"endCol":22},{},{"startCol":31,"endCol":35}]},"381":{"partial":false,"source":"        })","missing":[{}]},"382":{"partial":false,"source":"      }, this)","missing":[{}]},"383":{"partial":false,"source":"","missing":[{}]},"384":{"partial":false,"source":"      return","missing":[{"startCol":6,"endCol":12},{}]},"385":{"partial":false,"source":"    }","missing":[{}]},"386":{"partial":false,"source":"","missing":[{}]},"387":{"partial":false,"source":"    // not a globstar","missing":[{}]},"388":{"partial":false,"source":"    // It will only match dot entries if it starts with a dot, or if","missing":[{}]},"389":{"partial":false,"source":"    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.","missing":[{}]},"390":{"partial":false,"source":"    var pn = pattern[n]","missing":[{}]},"391":{"partial":false,"source":"    if (typeof pn === \"string\") {","missing":[{},{"startCol":8,"endCol":30}]},"392":{"partial":false,"source":"      var found = entries.indexOf(pn) !== -1","missing":[{"startCol":18,"endCol":37},{}]},"393":{"partial":false,"source":"      entries = found ? entries[pn] : []","missing":[{"startCol":38,"endCol":40},{},{"startCol":24,"endCol":35}]},"394":{"partial":false,"source":"    } else {","missing":[{}]},"395":{"partial":false,"source":"      var rawGlob = pattern[n]._glob","missing":[{}]},"396":{"partial":false,"source":"      , dotOk = this.dot || rawGlob.charAt(0) === \".\"","missing":[{"startCol":16,"endCol":53},{"startCol":28,"endCol":45},{}]},"397":{"partial":false,"source":"","missing":[{}]},"398":{"partial":false,"source":"      entries = entries.filter(function (e) {","missing":[{}]},"399":{"partial":false,"source":"        return (e.charAt(0) !== \".\" || dotOk) &&","missing":[{},{"startCol":16,"endCol":27},{"startCol":15,"endCol":45}]},"400":{"partial":false,"source":"               (typeof pattern[n] === \"string\" && e === pattern[n] ||","missing":[{},{"startCol":50,"endCol":66},{"startCol":16,"endCol":46}]},"401":{"partial":false,"source":"                e.match(pattern[n]))","missing":[{},{"startCol":16,"endCol":35}]},"402":{"partial":false,"source":"      })","missing":[{}]},"403":{"partial":false,"source":"    }","missing":[{}]},"404":{"partial":false,"source":"","missing":[{}]},"405":{"partial":false,"source":"    // If n === pattern.length - 1, then there's no need for the extra stat","missing":[{}]},"406":{"partial":false,"source":"    // *unless* the user has specified \"mark\" or \"stat\" explicitly.","missing":[{}]},"407":{"partial":false,"source":"    // We know that they exist, since the readdir returned them.","missing":[{}]},"408":{"partial":false,"source":"    if (n === pattern.length - 1 &&","missing":[{},{"startCol":8,"endCol":32},{"startCol":14,"endCol":32}]},"409":{"partial":false,"source":"        !this.mark &&","missing":[{}]},"410":{"partial":false,"source":"        !this.stat) {","missing":[{}]},"411":{"partial":false,"source":"      entries.forEach(function (e) {","missing":[{}]},"412":{"partial":false,"source":"        if (prefix) {","missing":[{}]},"413":{"partial":false,"source":"          if (prefix !== \"/\") e = prefix + \"/\" + e","missing":[{},{"startCol":14,"endCol":28},{"startCol":34,"endCol":46}]},"414":{"partial":false,"source":"          else e = prefix + e","missing":[{},{"startCol":19,"endCol":29}]},"415":{"partial":false,"source":"        }","missing":[{}]},"416":{"partial":false,"source":"        if (e.charAt(0) === \"/\" && !this.nomount) {","missing":[{},{"startCol":12,"endCol":23}]},"417":{"partial":false,"source":"          e = path.join(this.root, e)","missing":[{"startCol":14,"endCol":37},{}]},"418":{"partial":false,"source":"        }","missing":[{}]},"419":{"partial":false,"source":"","missing":[{}]},"420":{"partial":false,"source":"        this.matches[index] = this.matches[index] || {}","missing":[{},{"startCol":30,"endCol":55}]},"421":{"partial":false,"source":"        this.matches[index][e] = true","missing":[{}]},"422":{"partial":false,"source":"        this.emitMatch(e)","missing":[{"startCol":8,"endCol":25},{}]},"423":{"partial":false,"source":"      }, this)","missing":[{}]},"424":{"partial":false,"source":"      return cb.call(this)","missing":[{},{"startCol":13,"endCol":26}]},"425":{"partial":false,"source":"    }","missing":[{}]},"426":{"partial":false,"source":"","missing":[{}]},"427":{"partial":false,"source":"","missing":[{}]},"428":{"partial":false,"source":"    // now test all the remaining entries as stand-ins for that part","missing":[{}]},"429":{"partial":false,"source":"    // of the pattern.","missing":[{}]},"430":{"partial":false,"source":"    var l = entries.length","missing":[{}]},"431":{"partial":false,"source":"    , errState = null","missing":[{}]},"432":{"partial":false,"source":"    if (l === 0) return cb() // no matches possible","missing":[{},{"startCol":8,"endCol":15},{"startCol":24,"endCol":28}]},"433":{"partial":false,"source":"    entries.forEach(function (e) {","missing":[{}]},"434":{"partial":false,"source":"      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))","missing":[{"startCol":14,"endCol":72},{},{"startCol":65,"endCol":70},{"startCol":51,"endCol":71},{"startCol":27,"endCol":33},{"startCol":40,"endCol":43}]},"435":{"partial":false,"source":"      this._process(p, depth + 1, index, function (er) {","missing":[{},{"startCol":23,"endCol":32}]},"436":{"partial":false,"source":"        if (errState) return","missing":[{},{"startCol":22,"endCol":28}]},"437":{"partial":false,"source":"        if (er) return cb(errState = er)","missing":[{},{"startCol":23,"endCol":40}]},"438":{"partial":false,"source":"        if (--l === 0) return cb.call(this)","missing":[{"startCol":12,"endCol":15},{},{"startCol":30,"endCol":43}]},"439":{"partial":false,"source":"      })","missing":[{}]},"440":{"partial":false,"source":"    }, this)","missing":[{}]},"441":{"partial":false,"source":"  })","missing":[{}]},"442":{"partial":false,"source":"","missing":[{}]},"443":{"partial":false,"source":"}","missing":[{}]},"449":{"partial":false,"source":"    abs = path.join(this.root, f)","missing":[{},{"startCol":10,"endCol":33}]},"450":{"partial":false,"source":"  } else if (this.changedCwd) {","missing":[{}]},"451":{"partial":false,"source":"    abs = path.resolve(this.cwd, f)","missing":[{},{"startCol":10,"endCol":35}]},"452":{"partial":false,"source":"  }","missing":[{}]},"453":{"partial":false,"source":"  if (this.debug) console.error('stat', [this.cwd, f, '=', abs])","missing":[{},{"startCol":18,"endCol":64}]},"454":{"partial":true,"source":"  if (f.length > this.maxLength) {","missing":[{}]},"455":{"partial":false,"source":"    var er = new Error(\"Path name too long\")","missing":[{}]},"456":{"partial":false,"source":"    er.code = \"ENAMETOOLONG\"","missing":[{}]},"457":{"partial":false,"source":"    er.path = f","missing":[{}]},"458":{"partial":false,"source":"    return this._afterStat(f, abs, cb, er)","missing":[{"startCol":11,"endCol":42},{}]},"459":{"partial":false,"source":"  }","missing":[{}]},"462":{"partial":false,"source":"    var exists = this.statCache[f]","missing":[{}]},"463":{"partial":false,"source":"    , isDir = exists && (Array.isArray(exists) || exists === 2)","missing":[{"startCol":14,"endCol":63},{"startCol":24,"endCol":63},{"startCol":25,"endCol":46},{},{"startCol":50,"endCol":62}]},"464":{"partial":false,"source":"    if (this.sync) return cb.call(this, !!exists, isDir)","missing":[{},{"startCol":26,"endCol":56}]},"465":{"partial":false,"source":"    return process.nextTick(cb.bind(this, !!exists, isDir))","missing":[{},{"startCol":11,"endCol":59},{"startCol":28,"endCol":58}]},"466":{"partial":false,"source":"  }","missing":[{}]},"477":{"partial":false,"source":"    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))","missing":[{"startCol":17,"endCol":55},{},{"startCol":4,"endCol":56}]},"478":{"partial":false,"source":"  }","missing":[{}]},"487":{"partial":true,"source":"    exists = stat.isDirectory() ? 2 : 1","missing":[{"startCol":34,"endCol":35}]},"494":{"partial":false,"source":"  assert(this instanceof Glob)","missing":[{},{"startCol":2,"endCol":30},{"startCol":9,"endCol":29}]},"495":{"partial":false,"source":"  var abs = f","missing":[{}]},"496":{"partial":false,"source":"  if (f.charAt(0) === \"/\") {","missing":[{},{"startCol":6,"endCol":17}]},"497":{"partial":false,"source":"    abs = path.join(this.root, f)","missing":[{"startCol":10,"endCol":33},{}]},"498":{"partial":false,"source":"  } else if (isAbsolute(f)) {","missing":[{},{"startCol":13,"endCol":26}]},"499":{"partial":false,"source":"    abs = f","missing":[{}]},"500":{"partial":false,"source":"  } else if (this.changedCwd) {","missing":[{}]},"501":{"partial":false,"source":"    abs = path.resolve(this.cwd, f)","missing":[{"startCol":10,"endCol":35},{}]},"502":{"partial":false,"source":"  }","missing":[{}]},"504":{"partial":false,"source":"  if (this.debug) console.error('readdir', [this.cwd, f, abs])","missing":[{"startCol":18,"endCol":62},{}]},"505":{"partial":false,"source":"  if (f.length > this.maxLength) {","missing":[{"startCol":6,"endCol":31},{}]},"506":{"partial":false,"source":"    var er = new Error(\"Path name too long\")","missing":[{}]},"507":{"partial":false,"source":"    er.code = \"ENAMETOOLONG\"","missing":[{}]},"508":{"partial":false,"source":"    er.path = f","missing":[{}]},"509":{"partial":false,"source":"    return this._afterReaddir(f, abs, cb, er)","missing":[{"startCol":11,"endCol":45},{}]},"510":{"partial":false,"source":"  }","missing":[{}]},"512":{"partial":false,"source":"  if (this.statCache.hasOwnProperty(f)) {","missing":[{"startCol":6,"endCol":38}]},"513":{"partial":false,"source":"    var c = this.statCache[f]","missing":[{}]},"514":{"partial":false,"source":"    if (Array.isArray(c)) {","missing":[{},{"startCol":8,"endCol":24}]},"515":{"partial":false,"source":"      if (this.sync) return cb.call(this, null, c)","missing":[{"startCol":28,"endCol":50},{}]},"516":{"partial":false,"source":"      return process.nextTick(cb.bind(this, null, c))","missing":[{"startCol":13,"endCol":53},{},{"startCol":30,"endCol":52}]},"517":{"partial":false,"source":"    }","missing":[{}]},"519":{"partial":false,"source":"    if (!c || c === 1) {","missing":[{"startCol":8,"endCol":21},{"startCol":14,"endCol":21}]},"521":{"partial":false,"source":"      var code = c ? \"ENOTDIR\" : \"ENOENT\"","missing":[{"startCol":21,"endCol":30},{"startCol":33,"endCol":41},{}]},"522":{"partial":false,"source":"      , er = new Error((c ? \"Not a directory\" : \"Not found\") + \": \" + f)","missing":[{"startCol":48,"endCol":59},{"startCol":23,"endCol":71},{},{"startCol":28,"endCol":45}]},"523":{"partial":false,"source":"      er.path = f","missing":[{}]},"524":{"partial":false,"source":"      er.code = code","missing":[{}]},"525":{"partial":false,"source":"      if (this.debug) console.error(f, er)","missing":[{"startCol":22,"endCol":42},{}]},"526":{"partial":false,"source":"      if (this.sync) return cb.call(this, er)","missing":[{},{"startCol":28,"endCol":45}]},"527":{"partial":false,"source":"      return process.nextTick(cb.bind(this, er))","missing":[{"startCol":30,"endCol":47},{},{"startCol":13,"endCol":48}]},"528":{"partial":false,"source":"    }","missing":[{}]},"536":{"partial":false,"source":"    var er, entries","missing":[{}]},"537":{"partial":false,"source":"    try {","missing":[{}]},"538":{"partial":false,"source":"      entries = fs.readdirSync(abs)","missing":[{"startCol":16,"endCol":35},{}]},"539":{"partial":false,"source":"    } catch (e) {","missing":[{}]},"540":{"partial":false,"source":"      er = e","missing":[{}]},"541":{"partial":false,"source":"    }","missing":[{}]},"542":{"partial":false,"source":"    return this._afterReaddir(f, abs, cb, er, entries)","missing":[{},{"startCol":11,"endCol":54}]},"543":{"partial":false,"source":"  }","missing":[{}]},"545":{"partial":false,"source":"  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))","missing":[{"startCol":2,"endCol":60},{"startCol":18,"endCol":59},{}]},"546":{"partial":false,"source":"}","missing":[{}]},"549":{"partial":false,"source":"  assert(this instanceof Glob)","missing":[{},{"startCol":2,"endCol":30},{"startCol":9,"endCol":29}]},"550":{"partial":false,"source":"  if (entries && !er) {","missing":[{"startCol":6,"endCol":20},{}]},"551":{"partial":false,"source":"    this.statCache[f] = entries","missing":[{}]},"552":{"partial":false,"source":"    // if we haven't asked to stat everything for suresies, then just","missing":[{}]},"553":{"partial":false,"source":"    // assume that everything in there exists, so we can avoid","missing":[{}]},"554":{"partial":false,"source":"    // having to stat it a second time.  This also gets us one step","missing":[{}]},"555":{"partial":false,"source":"    // further into ELOOP territory.","missing":[{}]},"556":{"partial":false,"source":"    if (!this.mark && !this.stat) {","missing":[{},{"startCol":8,"endCol":32}]},"557":{"partial":false,"source":"      entries.forEach(function (e) {","missing":[{}]},"558":{"partial":false,"source":"        if (f === \"/\") e = f + e","missing":[{},{"startCol":27,"endCol":32},{"startCol":12,"endCol":21}]},"559":{"partial":false,"source":"        else e = f + \"/\" + e","missing":[{},{"startCol":17,"endCol":24}]},"560":{"partial":false,"source":"        this.statCache[e] = true","missing":[{}]},"561":{"partial":false,"source":"      }, this)","missing":[{}]},"562":{"partial":false,"source":"    }","missing":[{}]},"564":{"partial":false,"source":"    return cb.call(this, er, entries)","missing":[{"startCol":11,"endCol":37},{}]},"565":{"partial":false,"source":"  }","missing":[{}]},"570":{"partial":false,"source":"      this.statCache[f] = 1","missing":[{}]},"571":{"partial":false,"source":"      return cb.call(this, er)","missing":[{},{"startCol":13,"endCol":30}]},"572":{"partial":false,"source":"    case \"ENOENT\": // not terribly unusual","missing":[{}]},"576":{"partial":false,"source":"      this.statCache[f] = false","missing":[{}]},"577":{"partial":false,"source":"      return cb.call(this, er)","missing":[{"startCol":13,"endCol":30},{}]},"578":{"partial":false,"source":"    default: // some unusual error.  Treat as failure.","missing":[{}]},"579":{"partial":false,"source":"      this.statCache[f] = false","missing":[{}]},"580":{"partial":false,"source":"      if (this.strict) this.emit(\"error\", er)","missing":[{},{"startCol":23,"endCol":45}]},"581":{"partial":false,"source":"      if (!this.silent) console.error(\"glob error\", er)","missing":[{},{"startCol":24,"endCol":55}]},"582":{"partial":false,"source":"      return cb.call(this, er)","missing":[{},{"startCol":13,"endCol":30}]},"583":{"partial":false,"source":"  }","missing":[{}]},"586":{"partial":true,"source":"var isAbsolute = process.platform === \"win32\" ? absWin : absUnix","missing":[{"startCol":48,"endCol":54}]},"589":{"partial":false,"source":"  if (absUnix(p)) return true","missing":[{},{"startCol":6,"endCol":16}]},"590":{"partial":false,"source":"  // pull off the device/UNC bit from a windows path.","missing":[{}]},"591":{"partial":false,"source":"  // from node's lib/path.js","missing":[{}]},"592":{"partial":false,"source":"  var splitDeviceRe =","missing":[{}]},"593":{"partial":false,"source":"        /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?([\\\\\\/])?/","missing":[{}]},"594":{"partial":false,"source":"    , result = splitDeviceRe.exec(p)","missing":[{"startCol":15,"endCol":36},{}]},"595":{"partial":false,"source":"    , device = result[1] || ''","missing":[{},{"startCol":15,"endCol":30}]},"596":{"partial":false,"source":"    , isUnc = device && device.charAt(1) !== ':'","missing":[{},{"startCol":14,"endCol":48},{"startCol":24,"endCol":40}]},"597":{"partial":false,"source":"    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute","missing":[{"startCol":19,"endCol":39},{}]},"598":{"partial":false,"source":"","missing":[{}]},"599":{"partial":false,"source":"  return isAbsolute","missing":[{}]},"600":{"partial":false,"source":"}","missing":[{}]},"603":{"partial":false,"source":"  return p.charAt(0) === \"/\" || p === \"\"","missing":[{},{"startCol":9,"endCol":20},{"startCol":32,"endCol":40}]},"604":{"partial":false,"source":"}","missing":[{}]}},"source":"// Approach:\n//\n// 1. Get the minimatch set\n// 2. For each pattern in the set, PROCESS(pattern)\n// 3. Store matches per-set, then uniq them\n//\n// PROCESS(pattern)\n// Get the first [n] items from pattern that are all strings\n// Join these together.  This is PREFIX.\n//   If there is no more remaining, then stat(PREFIX) and\n//   add to matches if it succeeds.  END.\n// readdir(PREFIX) as ENTRIES\n//   If fails, END\n//   If pattern[n] is GLOBSTAR\n//     // handle the case where the globstar match is empty\n//     // by pruning it out, and testing the resulting pattern\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $])\n//     // handle other cases.\n//     for ENTRY in ENTRIES (not dotfiles)\n//       // attach globstar + tail onto the entry\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])\n//\n//   else // not globstar\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)\n//       Test ENTRY against pattern[n+1]\n//       If fails, continue\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])\n//\n// Caveat:\n//   Cache all stats and readdirs results to minimize syscall.  Since all\n//   we ever care about is existence and directory-ness, we can just keep\n//   `true` for files, and [children,...] for directories, or `false` for\n//   things that don't exist.\n\n\n\nmodule.exports = glob\n\nvar fs = require(\"graceful-fs\")\n, minimatch = require(\"minimatch\")\n, Minimatch = minimatch.Minimatch\n, inherits = require(\"inherits\")\n, EE = require(\"events\").EventEmitter\n, path = require(\"path\")\n, isDir = {}\n, assert = require(\"assert\").ok\n\nfunction glob (pattern, options, cb) {\n  if (typeof options === \"function\") cb = options, options = {}\n  if (!options) options = {}\n\n  if (typeof options === \"number\") {\n    deprecated()\n    return\n  }\n\n  var g = new Glob(pattern, options, cb)\n  return g.sync ? g.found : g\n}\n\nglob.fnmatch = deprecated\n\nfunction deprecated () {\n  throw new Error(\"glob's interface has changed. Please see the docs.\")\n}\n\nglob.sync = globSync\nfunction globSync (pattern, options) {\n  if (typeof options === \"number\") {\n    deprecated()\n    return\n  }\n\n  options = options || {}\n  options.sync = true\n  return glob(pattern, options)\n}\n\n\nglob.Glob = Glob\ninherits(Glob, EE)\nfunction Glob (pattern, options, cb) {\n  if (!(this instanceof Glob)) {\n    return new Glob(pattern, options, cb)\n  }\n\n  if (typeof cb === \"function\") {\n    this.on(\"error\", cb)\n    this.on(\"end\", function (matches) {\n      // console.error(\"cb with matches\", matches)\n      cb(null, matches)\n    })\n  }\n\n  options = options || {}\n\n  this.EOF = {}\n  this._emitQueue = []\n\n  this.maxDepth = options.maxDepth || 1000\n  this.maxLength = options.maxLength || Infinity\n  this.statCache = options.statCache || {}\n\n  this.changedCwd = false\n  var cwd = process.cwd()\n  if (!options.hasOwnProperty(\"cwd\")) this.cwd = cwd\n  else {\n    this.cwd = options.cwd\n    this.changedCwd = path.resolve(options.cwd) !== cwd\n  }\n\n  this.root = options.root || path.resolve(this.cwd, \"/\")\n  this.root = path.resolve(this.root)\n\n  this.nomount = !!options.nomount\n\n  if (!pattern) {\n    throw new Error(\"must provide pattern\")\n  }\n\n  // base-matching: just use globstar for that.\n  if (options.matchBase && -1 === pattern.indexOf(\"/\")) {\n    if (options.noglobstar) {\n      throw new Error(\"base matching requires globstar\")\n    }\n    pattern = \"**/\" + pattern\n  }\n\n  this.dot = !!options.dot\n  this.mark = !!options.mark\n  this.sync = !!options.sync\n  this.nounique = !!options.nounique\n  this.nonull = !!options.nonull\n  this.nosort = !!options.nosort\n  this.nocase = !!options.nocase\n  this.stat = !!options.stat\n  this.debug = !!options.debug || !!options.globDebug\n  this.silent = !!options.silent\n\n  var mm = this.minimatch = new Minimatch(pattern, options)\n  this.options = mm.options\n  pattern = this.pattern = mm.pattern\n\n  this.error = null\n  this.aborted = false\n\n  EE.call(this)\n\n  // process each pattern in the minimatch set\n  var n = this.minimatch.set.length\n\n  // The matches are stored as {<filename>: true,...} so that\n  // duplicates are automagically pruned.\n  // Later, we do an Object.keys() on these.\n  // Keep them as a list so we can fill in when nonull is set.\n  this.matches = new Array(n)\n\n  this.minimatch.set.forEach(iterator.bind(this))\n  function iterator (pattern, i, set) {\n    this._process(pattern, 0, i, function (er) {\n      if (er) this.emit(\"error\", er)\n      if (-- n <= 0) this._finish()\n    })\n  }\n}\n\nGlob.prototype._finish = function () {\n  assert(this instanceof Glob)\n\n  var nou = this.nounique\n  , all = nou ? [] : {}\n\n  for (var i = 0, l = this.matches.length; i < l; i ++) {\n    var matches = this.matches[i]\n    if (this.debug) console.error(\"matches[%d] =\", i, matches)\n    // do like the shell, and spit out the literal glob\n    if (!matches) {\n      if (this.nonull) {\n        var literal = this.minimatch.globSet[i]\n        if (nou) all.push(literal)\n        else all[literal] = true\n      }\n    } else {\n      // had matches\n      var m = Object.keys(matches)\n      if (nou) all.push.apply(all, m)\n      else m.forEach(function (m) {\n        all[m] = true\n      })\n    }\n  }\n\n  if (!nou) all = Object.keys(all)\n\n  if (!this.nosort) {\n    all = all.sort(this.nocase ? alphasorti : alphasort)\n  }\n\n  if (this.mark) {\n    // at *some* point we statted all of these\n    all = all.map(function (m) {\n      var sc = this.statCache[m]\n      if (!sc)\n        return m\n      var isDir = (Array.isArray(sc) || sc === 2)\n      if (isDir && m.slice(-1) !== \"/\") {\n        return m + \"/\"\n      }\n      if (!isDir && m.slice(-1) === \"/\") {\n        return m.replace(/\\/+$/, \"\")\n      }\n      return m\n    }, this)\n  }\n\n  if (this.debug) console.error(\"emitting end\", all)\n\n  this.EOF = this.found = all\n  this.emitMatch(this.EOF)\n}\n\nfunction alphasorti (a, b) {\n  a = a.toLowerCase()\n  b = b.toLowerCase()\n  return alphasort(a, b)\n}\n\nfunction alphasort (a, b) {\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nGlob.prototype.abort = function () {\n  this.aborted = true\n  this.emit(\"abort\")\n}\n\nGlob.prototype.pause = function () {\n  if (this.paused) return\n  if (this.sync)\n    this.emit(\"error\", new Error(\"Can't pause/resume sync glob\"))\n  this.paused = true\n  this.emit(\"pause\")\n}\n\nGlob.prototype.resume = function () {\n  if (!this.paused) return\n  if (this.sync)\n    this.emit(\"error\", new Error(\"Can't pause/resume sync glob\"))\n  this.paused = false\n  this.emit(\"resume\")\n  this._processEmitQueue()\n  //process.nextTick(this.emit.bind(this, \"resume\"))\n}\n\nGlob.prototype.emitMatch = function (m) {\n  this._emitQueue.push(m)\n  this._processEmitQueue()\n}\n\nGlob.prototype._processEmitQueue = function (m) {\n  while (!this._processingEmitQueue &&\n         !this.paused) {\n    this._processingEmitQueue = true\n    var m = this._emitQueue.shift()\n    if (!m) {\n      this._processingEmitQueue = false\n      break\n    }\n    if (this.debug) {\n      console.error('emit!', m === this.EOF ? \"end\" : \"match\")\n    }\n    this.emit(m === this.EOF ? \"end\" : \"match\", m)\n    this._processingEmitQueue = false\n  }\n}\n\nGlob.prototype._process = function (pattern, depth, index, cb_) {\n  assert(this instanceof Glob)\n\n  var cb = function cb (er, res) {\n    assert(this instanceof Glob)\n    if (this.paused) {\n      if (!this._processQueue) {\n        this._processQueue = []\n        this.once(\"resume\", function () {\n          var q = this._processQueue\n          this._processQueue = null\n          q.forEach(function (cb) { cb() })\n        })\n      }\n      this._processQueue.push(cb_.bind(this, er, res))\n    } else {\n      cb_.call(this, er, res)\n    }\n  }.bind(this)\n\n  if (this.aborted) return cb()\n\n  if (depth > this.maxDepth) return cb()\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === \"string\") {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // see if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      prefix = pattern.join(\"/\")\n      this._stat(prefix, function (exists, isDir) {\n        // either it's there, or it isn't.\n        // nothing more to do, either way.\n        if (exists) {\n          if (prefix.charAt(0) === \"/\" && !this.nomount) {\n            prefix = path.join(this.root, prefix)\n          }\n          this.matches[index] = this.matches[index] || {}\n          this.matches[index][prefix] = true\n          this.emitMatch(prefix)\n        }\n        return cb()\n      })\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's \"absolute\" like /foo/bar,\n      // or \"relative\" like \"../baz\"\n      prefix = pattern.slice(0, n)\n      prefix = prefix.join(\"/\")\n      break\n  }\n\n  // get the list of entries.\n  var read\n  if (prefix === null) read = \".\"\n  else if (isAbsolute(prefix)) {\n    read = prefix = path.resolve(\"/\", prefix)\n    if (this.debug) console.error('absolute: ', prefix, this.root, pattern)\n  } else read = prefix\n\n  if (this.debug) console.error('readdir(%j)', read, this.cwd, this.root)\n  return this._readdir(read, function (er, entries) {\n    if (er) {\n      // not a directory!\n      // this means that, whatever else comes after this, it can never match\n      return cb()\n    }\n\n    // globstar is special\n    if (pattern[n] === minimatch.GLOBSTAR) {\n      // test without the globstar, and with every child both below\n      // and replacing the globstar.\n      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]\n      entries.forEach(function (e) {\n        if (e.charAt(0) === \".\" && !this.dot) return\n        // instead of the globstar\n        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))\n        // below the globstar\n        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))\n      }, this)\n\n      // now asyncForEach over this\n      var l = s.length\n      , errState = null\n      s.forEach(function (gsPattern) {\n        this._process(gsPattern, depth + 1, index, function (er) {\n          if (errState) return\n          if (er) return cb(errState = er)\n          if (--l <= 0) return cb()\n        })\n      }, this)\n\n      return\n    }\n\n    // not a globstar\n    // It will only match dot entries if it starts with a dot, or if\n    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n    var pn = pattern[n]\n    if (typeof pn === \"string\") {\n      var found = entries.indexOf(pn) !== -1\n      entries = found ? entries[pn] : []\n    } else {\n      var rawGlob = pattern[n]._glob\n      , dotOk = this.dot || rawGlob.charAt(0) === \".\"\n\n      entries = entries.filter(function (e) {\n        return (e.charAt(0) !== \".\" || dotOk) &&\n               (typeof pattern[n] === \"string\" && e === pattern[n] ||\n                e.match(pattern[n]))\n      })\n    }\n\n    // If n === pattern.length - 1, then there's no need for the extra stat\n    // *unless* the user has specified \"mark\" or \"stat\" explicitly.\n    // We know that they exist, since the readdir returned them.\n    if (n === pattern.length - 1 &&\n        !this.mark &&\n        !this.stat) {\n      entries.forEach(function (e) {\n        if (prefix) {\n          if (prefix !== \"/\") e = prefix + \"/\" + e\n          else e = prefix + e\n        }\n        if (e.charAt(0) === \"/\" && !this.nomount) {\n          e = path.join(this.root, e)\n        }\n\n        this.matches[index] = this.matches[index] || {}\n        this.matches[index][e] = true\n        this.emitMatch(e)\n      }, this)\n      return cb.call(this)\n    }\n\n\n    // now test all the remaining entries as stand-ins for that part\n    // of the pattern.\n    var l = entries.length\n    , errState = null\n    if (l === 0) return cb() // no matches possible\n    entries.forEach(function (e) {\n      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))\n      this._process(p, depth + 1, index, function (er) {\n        if (errState) return\n        if (er) return cb(errState = er)\n        if (--l === 0) return cb.call(this)\n      })\n    }, this)\n  })\n\n}\n\nGlob.prototype._stat = function (f, cb) {\n  assert(this instanceof Glob)\n  var abs = f\n  if (f.charAt(0) === \"/\") {\n    abs = path.join(this.root, f)\n  } else if (this.changedCwd) {\n    abs = path.resolve(this.cwd, f)\n  }\n  if (this.debug) console.error('stat', [this.cwd, f, '=', abs])\n  if (f.length > this.maxLength) {\n    var er = new Error(\"Path name too long\")\n    er.code = \"ENAMETOOLONG\"\n    er.path = f\n    return this._afterStat(f, abs, cb, er)\n  }\n\n  if (this.statCache.hasOwnProperty(f)) {\n    var exists = this.statCache[f]\n    , isDir = exists && (Array.isArray(exists) || exists === 2)\n    if (this.sync) return cb.call(this, !!exists, isDir)\n    return process.nextTick(cb.bind(this, !!exists, isDir))\n  }\n\n  if (this.sync) {\n    var er, stat\n    try {\n      stat = fs.statSync(abs)\n    } catch (e) {\n      er = e\n    }\n    this._afterStat(f, abs, cb, er, stat)\n  } else {\n    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))\n  }\n}\n\nGlob.prototype._afterStat = function (f, abs, cb, er, stat) {\n  var exists\n  assert(this instanceof Glob)\n  if (er || !stat) {\n    exists = false\n  } else {\n    exists = stat.isDirectory() ? 2 : 1\n  }\n  this.statCache[f] = this.statCache[f] || exists\n  cb.call(this, !!exists, exists === 2)\n}\n\nGlob.prototype._readdir = function (f, cb) {\n  assert(this instanceof Glob)\n  var abs = f\n  if (f.charAt(0) === \"/\") {\n    abs = path.join(this.root, f)\n  } else if (isAbsolute(f)) {\n    abs = f\n  } else if (this.changedCwd) {\n    abs = path.resolve(this.cwd, f)\n  }\n\n  if (this.debug) console.error('readdir', [this.cwd, f, abs])\n  if (f.length > this.maxLength) {\n    var er = new Error(\"Path name too long\")\n    er.code = \"ENAMETOOLONG\"\n    er.path = f\n    return this._afterReaddir(f, abs, cb, er)\n  }\n\n  if (this.statCache.hasOwnProperty(f)) {\n    var c = this.statCache[f]\n    if (Array.isArray(c)) {\n      if (this.sync) return cb.call(this, null, c)\n      return process.nextTick(cb.bind(this, null, c))\n    }\n\n    if (!c || c === 1) {\n      // either ENOENT or ENOTDIR\n      var code = c ? \"ENOTDIR\" : \"ENOENT\"\n      , er = new Error((c ? \"Not a directory\" : \"Not found\") + \": \" + f)\n      er.path = f\n      er.code = code\n      if (this.debug) console.error(f, er)\n      if (this.sync) return cb.call(this, er)\n      return process.nextTick(cb.bind(this, er))\n    }\n\n    // at this point, c === 2, meaning it's a dir, but we haven't\n    // had to read it yet, or c === true, meaning it's *something*\n    // but we don't have any idea what.  Need to read it, either way.\n  }\n\n  if (this.sync) {\n    var er, entries\n    try {\n      entries = fs.readdirSync(abs)\n    } catch (e) {\n      er = e\n    }\n    return this._afterReaddir(f, abs, cb, er, entries)\n  }\n\n  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))\n}\n\nGlob.prototype._afterReaddir = function (f, abs, cb, er, entries) {\n  assert(this instanceof Glob)\n  if (entries && !er) {\n    this.statCache[f] = entries\n    // if we haven't asked to stat everything for suresies, then just\n    // assume that everything in there exists, so we can avoid\n    // having to stat it a second time.  This also gets us one step\n    // further into ELOOP territory.\n    if (!this.mark && !this.stat) {\n      entries.forEach(function (e) {\n        if (f === \"/\") e = f + e\n        else e = f + \"/\" + e\n        this.statCache[e] = true\n      }, this)\n    }\n\n    return cb.call(this, er, entries)\n  }\n\n  // now handle errors, and cache the information\n  if (er) switch (er.code) {\n    case \"ENOTDIR\": // totally normal. means it *does* exist.\n      this.statCache[f] = 1\n      return cb.call(this, er)\n    case \"ENOENT\": // not terribly unusual\n    case \"ELOOP\":\n    case \"ENAMETOOLONG\":\n    case \"UNKNOWN\":\n      this.statCache[f] = false\n      return cb.call(this, er)\n    default: // some unusual error.  Treat as failure.\n      this.statCache[f] = false\n      if (this.strict) this.emit(\"error\", er)\n      if (!this.silent) console.error(\"glob error\", er)\n      return cb.call(this, er)\n  }\n}\n\nvar isAbsolute = process.platform === \"win32\" ? absWin : absUnix\n\nfunction absWin (p) {\n  if (absUnix(p)) return true\n  // pull off the device/UNC bit from a windows path.\n  // from node's lib/path.js\n  var splitDeviceRe =\n        /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?([\\\\\\/])?/\n    , result = splitDeviceRe.exec(p)\n    , device = result[1] || ''\n    , isUnc = device && device.charAt(1) !== ':'\n    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute\n\n  return isAbsolute\n}\n\nfunction absUnix (p) {\n  return p.charAt(0) === \"/\" || p === \"\"\n}","blocks":{"total":143,"seen":33,"missing":110,"percentage":0.23076923076923078}},"hash":"be00cb707ac536eb945502b14a74e71a"},"/usr/local/lib/node_modules/grunt-cli/node_modules/glob/node_modules/graceful-fs/graceful-fs.js":{"stats":{"percentage":0.6794871794871795,"lines":[{"lineno":7},{"lineno":26},{"lineno":27},{"lineno":28},{"lineno":29},{"lineno":37},{"lineno":38},{"lineno":40},{"lineno":41},{"lineno":42},{"lineno":43},{"lineno":45},{"lineno":46},{"lineno":50},{"lineno":51},{"lineno":53},{"lineno":58},{"lineno":59},{"lineno":60},{"lineno":61},{"lineno":62},{"lineno":82},{"lineno":87},{"lineno":88},{"lineno":89},{"lineno":90},{"lineno":108},{"lineno":109},{"lineno":110},{"lineno":111},{"lineno":115},{"lineno":116},{"lineno":120},{"lineno":121},{"lineno":122},{"lineno":128},{"lineno":129},{"lineno":133},{"lineno":135},{"lineno":137},{"lineno":140},{"lineno":142},{"lineno":144},{"lineno":145},{"lineno":154},{"lineno":155},{"lineno":156},{"lineno":157},{"lineno":158},{"lineno":159},{"lineno":166},{"lineno":172},{"lineno":174},{"lineno":177},{"lineno":179},{"lineno":181},{"lineno":182},{"lineno":185},{"lineno":187},{"lineno":188},{"lineno":191},{"lineno":192},{"lineno":196},{"lineno":197},{"lineno":214},{"lineno":216},{"lineno":217},{"lineno":218},{"lineno":224},{"lineno":227},{"lineno":229},{"lineno":241},{"lineno":242},{"lineno":248},{"lineno":249},{"lineno":251},{"lineno":254},{"lineno":255},{"lineno":257},{"lineno":266},{"lineno":267},{"lineno":268},{"lineno":269},{"lineno":270},{"lineno":271},{"lineno":272},{"lineno":273},{"lineno":275},{"lineno":284},{"lineno":285},{"lineno":286},{"lineno":287},{"lineno":288},{"lineno":289},{"lineno":290},{"lineno":292},{"lineno":295},{"lineno":305},{"lineno":306},{"lineno":309}],"missing":100,"seen":212,"total":312,"coverage":{"7":{"partial":true,"source":"if (fs.open === gracefulOpen) return","missing":[{"startCol":30,"endCol":36}]},"26":{"partial":false,"source":"  this.path = path","missing":[{}]},"27":{"partial":false,"source":"  this.flags = flags","missing":[{}]},"28":{"partial":false,"source":"  this.mode = mode","missing":[{}]},"29":{"partial":false,"source":"  this.cb = cb","missing":[{}]},"30":{"partial":false,"source":"}","missing":[{}]},"37":{"partial":false,"source":"  if (typeof mode === \"function\") cb = mode, mode = null","missing":[{"startCol":6,"endCol":32},{}]},"38":{"partial":false,"source":"  if (typeof cb !== \"function\") cb = noop","missing":[{"startCol":6,"endCol":30},{}]},"39":{"partial":false,"source":"","missing":[{}]},"40":{"partial":false,"source":"  if (fs._curOpen >= fs.MAX_OPEN) {","missing":[{"startCol":6,"endCol":32},{}]},"41":{"partial":false,"source":"    queue.push(new OpenReq(path, flags, mode, cb))","missing":[{"startCol":4,"endCol":50},{}]},"42":{"partial":false,"source":"    setTimeout(flush)","missing":[{},{"startCol":4,"endCol":21}]},"43":{"partial":false,"source":"    return","missing":[{"startCol":4,"endCol":10},{}]},"45":{"partial":false,"source":"  open(path, flags, mode, function (er, fd) {","missing":[{}]},"46":{"partial":false,"source":"    if (er && er.code === \"EMFILE\" && fs._curOpen > fs.MIN_MAX_OPEN) {","missing":[{},{"startCol":8,"endCol":34},{"startCol":14,"endCol":34},{"startCol":38,"endCol":67}]},"47":{"partial":false,"source":"      // that was too many.  reduce max, get back in queue.","missing":[{}]},"48":{"partial":false,"source":"      // this should only happen once in a great while, and only","missing":[{}]},"49":{"partial":false,"source":"      // if the ulimit -n is set lower than 1024.","missing":[{}]},"50":{"partial":false,"source":"      fs.MAX_OPEN = fs._curOpen - 1","missing":[{},{"startCol":20,"endCol":35}]},"51":{"partial":false,"source":"      return fs.open(path, flags, mode, cb)","missing":[{},{"startCol":13,"endCol":43}]},"52":{"partial":false,"source":"    }","missing":[{}]},"53":{"partial":false,"source":"    cb(er, fd)","missing":[{"startCol":4,"endCol":14},{}]},"54":{"partial":false,"source":"  })","missing":[{}]},"55":{"partial":false,"source":"}","missing":[{}]},"58":{"partial":false,"source":"  cb = cb || noop","missing":[{},{"startCol":7,"endCol":17}]},"59":{"partial":false,"source":"  fs._curOpen ++","missing":[{"startCol":2,"endCol":16},{}]},"60":{"partial":false,"source":"  originalOpen.call(fs, path, flags, mode, function (er, fd) {","missing":[{}]},"61":{"partial":false,"source":"    if (er) onclose()","missing":[{},{"startCol":12,"endCol":21}]},"62":{"partial":false,"source":"    cb(er, fd)","missing":[{},{"startCol":4,"endCol":14}]},"63":{"partial":false,"source":"  })","missing":[{}]},"64":{"partial":false,"source":"}","missing":[{}]},"82":{"partial":false,"source":"    open(req.path, req.flags || \"r\", req.mode || 0777, req.cb)","missing":[{"startCol":4,"endCol":62},{},{"startCol":19,"endCol":35},{"startCol":37,"endCol":53}]},"83":{"partial":false,"source":"  }","missing":[{}]},"87":{"partial":false,"source":"  cb = cb || noop","missing":[{},{"startCol":7,"endCol":17}]},"88":{"partial":false,"source":"  originalClose.call(fs, fd, function (er) {","missing":[{}]},"89":{"partial":false,"source":"    onclose()","missing":[{},{"startCol":4,"endCol":13}]},"90":{"partial":false,"source":"    cb(er)","missing":[{},{"startCol":4,"endCol":10}]},"91":{"partial":false,"source":"  })","missing":[{}]},"92":{"partial":false,"source":"}","missing":[{}]},"108":{"partial":false,"source":"  fs.lchmod = function (path, mode, callback) {","missing":[{}]},"109":{"partial":false,"source":"    callback = callback || noop","missing":[{},{"startCol":15,"endCol":31}]},"110":{"partial":false,"source":"    fs.open( path","missing":[{}]},"111":{"partial":false,"source":"           , constants.O_WRONLY | constants.O_SYMLINK","missing":[{},{"startCol":13,"endCol":53}]},"112":{"partial":false,"source":"           , mode","missing":[{}]},"113":{"partial":false,"source":"           , function (err, fd) {","missing":[{}]},"114":{"partial":false,"source":"      if (err) {","missing":[{}]},"115":{"partial":false,"source":"        callback(err)","missing":[{"startCol":8,"endCol":21},{}]},"116":{"partial":false,"source":"        return","missing":[{"startCol":8,"endCol":14},{}]},"117":{"partial":false,"source":"      }","missing":[{}]},"118":{"partial":false,"source":"      // prefer to return the chmod error, if one occurs,","missing":[{}]},"119":{"partial":false,"source":"      // but still try to close, and report closing errors if they occur.","missing":[{}]},"120":{"partial":false,"source":"      fs.fchmod(fd, mode, function (err) {","missing":[{}]},"121":{"partial":false,"source":"        fs.close(fd, function(err2) {","missing":[{}]},"122":{"partial":false,"source":"          callback(err || err2)","missing":[{},{"startCol":10,"endCol":31},{"startCol":19,"endCol":30}]},"123":{"partial":false,"source":"        })","missing":[{}]},"124":{"partial":false,"source":"      })","missing":[{}]},"125":{"partial":false,"source":"    })","missing":[{}]},"126":{"partial":false,"source":"  }","missing":[{}]},"127":{"partial":false,"source":"","missing":[{}]},"128":{"partial":false,"source":"  fs.lchmodSync = function (path, mode) {","missing":[{}]},"129":{"partial":false,"source":"    var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)","missing":[{},{"startCol":13,"endCol":78},{"startCol":31,"endCol":71}]},"130":{"partial":false,"source":"","missing":[{}]},"131":{"partial":false,"source":"    // prefer to return the chmod error, if one occurs,","missing":[{}]},"132":{"partial":false,"source":"    // but still try to close, and report closing errors if they occur.","missing":[{}]},"133":{"partial":false,"source":"    var err, err2","missing":[{}]},"134":{"partial":false,"source":"    try {","missing":[{}]},"135":{"partial":false,"source":"      var ret = fs.fchmodSync(fd, mode)","missing":[{},{"startCol":16,"endCol":39}]},"136":{"partial":false,"source":"    } catch (er) {","missing":[{}]},"137":{"partial":false,"source":"      err = er","missing":[{}]},"138":{"partial":false,"source":"    }","missing":[{}]},"139":{"partial":false,"source":"    try {","missing":[{}]},"140":{"partial":false,"source":"      fs.closeSync(fd)","missing":[{},{"startCol":6,"endCol":22}]},"141":{"partial":false,"source":"    } catch (er) {","missing":[{}]},"142":{"partial":false,"source":"      err2 = er","missing":[{}]},"143":{"partial":false,"source":"    }","missing":[{}]},"144":{"partial":false,"source":"    if (err || err2) throw (err || err2)","missing":[{},{"startCol":27,"endCol":40},{"startCol":8,"endCol":19}]},"145":{"partial":false,"source":"    return ret","missing":[{}]},"146":{"partial":false,"source":"  }","missing":[{}]},"147":{"partial":false,"source":"}","missing":[{}]},"154":{"partial":false,"source":"      fs.open(path, constants.O_SYMLINK, function (er, fd) {","missing":[{}]},"155":{"partial":false,"source":"        cb = cb || noop","missing":[{},{"startCol":13,"endCol":23}]},"156":{"partial":false,"source":"        if (er) return cb(er)","missing":[{},{"startCol":23,"endCol":29}]},"157":{"partial":false,"source":"        fs.futimes(fd, at, mt, function (er) {","missing":[{}]},"158":{"partial":false,"source":"          fs.close(fd, function (er2) {","missing":[{}]},"159":{"partial":false,"source":"            return cb(er || er2)","missing":[{},{"startCol":19,"endCol":32},{"startCol":22,"endCol":31}]},"160":{"partial":false,"source":"          })","missing":[{}]},"161":{"partial":false,"source":"        })","missing":[{}]},"162":{"partial":false,"source":"      })","missing":[{}]},"163":{"partial":false,"source":"    }","missing":[{}]},"166":{"partial":false,"source":"      var fd = fs.openSync(path, constants.O_SYMLINK)","missing":[{},{"startCol":15,"endCol":53}]},"167":{"partial":false,"source":"        , err","missing":[{}]},"168":{"partial":false,"source":"        , err2","missing":[{}]},"169":{"partial":false,"source":"        , ret","missing":[{}]},"170":{"partial":false,"source":"","missing":[{}]},"171":{"partial":false,"source":"      try {","missing":[{}]},"172":{"partial":false,"source":"        var ret = fs.futimesSync(fd, at, mt)","missing":[{"startCol":18,"endCol":44},{}]},"173":{"partial":false,"source":"      } catch (er) {","missing":[{}]},"174":{"partial":false,"source":"        err = er","missing":[{}]},"175":{"partial":false,"source":"      }","missing":[{}]},"177":{"partial":false,"source":"        fs.closeSync(fd)","missing":[{"startCol":8,"endCol":24},{}]},"178":{"partial":false,"source":"      } catch (er) {","missing":[{}]},"179":{"partial":false,"source":"        err2 = er","missing":[{}]},"180":{"partial":false,"source":"      }","missing":[{}]},"181":{"partial":false,"source":"      if (err || err2) throw (err || err2)","missing":[{"startCol":10,"endCol":21},{},{"startCol":29,"endCol":42}]},"182":{"partial":false,"source":"      return ret","missing":[{}]},"183":{"partial":false,"source":"    }","missing":[{}]},"185":{"partial":false,"source":"  } else if (fs.utimensat && constants.hasOwnProperty(\"AT_SYMLINK_NOFOLLOW\")) {","missing":[{"startCol":13,"endCol":76},{"startCol":29,"endCol":76}]},"187":{"partial":false,"source":"    fs.lutimes = function (path, at, mt, cb) {","missing":[{}]},"188":{"partial":false,"source":"      fs.utimensat(path, at, mt, constants.AT_SYMLINK_NOFOLLOW, cb)","missing":[{},{"startCol":6,"endCol":67}]},"189":{"partial":false,"source":"    }","missing":[{}]},"190":{"partial":false,"source":"","missing":[{}]},"191":{"partial":false,"source":"    fs.lutimesSync = function (path, at, mt) {","missing":[{}]},"192":{"partial":false,"source":"      return fs.utimensatSync(path, at, mt, constants.AT_SYMLINK_NOFOLLOW)","missing":[{},{"startCol":13,"endCol":74}]},"193":{"partial":false,"source":"    }","missing":[{}]},"194":{"partial":false,"source":"","missing":[{}]},"195":{"partial":false,"source":"  } else {","missing":[{}]},"196":{"partial":false,"source":"    fs.lutimes = function (_a, _b, _c, cb) { process.nextTick(cb) }","missing":[{"startCol":45,"endCol":65},{}]},"197":{"partial":false,"source":"    fs.lutimesSync = function () {}","missing":[{}]},"198":{"partial":false,"source":"  }","missing":[{}]},"214":{"partial":false,"source":"  if (!orig) return orig","missing":[{}]},"215":{"partial":true,"source":"  return function (target, uid, gid, cb) {","missing":[{}]},"216":{"partial":false,"source":"    return orig.call(fs, target, uid, gid, function (er, res) {","missing":[{}]},"217":{"partial":false,"source":"      if (chownErOk(er)) er = null","missing":[{},{"startCol":10,"endCol":23}]},"218":{"partial":false,"source":"      cb(er, res)","missing":[{},{"startCol":6,"endCol":17}]},"219":{"partial":false,"source":"    })","missing":[{}]},"220":{"partial":false,"source":"  }","missing":[{}]},"224":{"partial":false,"source":"  if (!orig) return orig","missing":[{}]},"225":{"partial":true,"source":"  return function (target, uid, gid) {","missing":[{}]},"227":{"partial":false,"source":"      return orig.call(fs, target, uid, gid)","missing":[{},{"startCol":13,"endCol":44}]},"228":{"partial":false,"source":"    } catch (er) {","missing":[{}]},"229":{"partial":false,"source":"      if (!chownErOk(er)) throw er","missing":[{"startCol":11,"endCol":24},{}]},"230":{"partial":false,"source":"    }","missing":[{}]},"241":{"partial":false,"source":"  if (!er || (!process.getuid || process.getuid() !== 0)","missing":[{"startCol":13,"endCol":56},{"startCol":33,"endCol":49},{}]},"242":{"partial":false,"source":"      && (er.code === \"EINVAL\" || er.code === \"EPERM\")) return true","missing":[{},{"startCol":9,"endCol":54},{"startCol":10,"endCol":30},{"startCol":34,"endCol":53}]},"243":{"partial":false,"source":"}","missing":[{}]},"248":{"partial":false,"source":"  fs.lchmod = function (path, mode, cb) {","missing":[{}]},"249":{"partial":false,"source":"    process.nextTick(cb)","missing":[{"startCol":4,"endCol":24},{}]},"250":{"partial":false,"source":"  }","missing":[{}]},"251":{"partial":false,"source":"  fs.lchmodSync = function () {}","missing":[{}]},"252":{"partial":false,"source":"}","missing":[{}]},"254":{"partial":false,"source":"  fs.lchown = function (path, uid, gid, cb) {","missing":[{}]},"255":{"partial":false,"source":"    process.nextTick(cb)","missing":[{},{"startCol":4,"endCol":24}]},"256":{"partial":false,"source":"  }","missing":[{}]},"257":{"partial":false,"source":"  fs.lchownSync = function () {}","missing":[{}]},"258":{"partial":false,"source":"}","missing":[{}]},"266":{"partial":false,"source":"  var rename_ = fs.rename","missing":[{}]},"267":{"partial":false,"source":"  fs.rename = function rename (from, to, cb) {","missing":[{}]},"268":{"partial":false,"source":"    var start = Date.now()","missing":[{"startCol":16,"endCol":26},{}]},"269":{"partial":false,"source":"    rename_(from, to, function CB (er) {","missing":[{}]},"270":{"partial":false,"source":"      if (er","missing":[{}]},"271":{"partial":false,"source":"          && (er.code === \"EACCES\" || er.code === \"EPERM\")","missing":[{},{"startCol":13,"endCol":58},{"startCol":14,"endCol":34},{"startCol":38,"endCol":57}]},"272":{"partial":false,"source":"          && Date.now() - start < 1000) {","missing":[{"startCol":13,"endCol":23},{}]},"273":{"partial":false,"source":"        return rename_(from, to, CB)","missing":[{"startCol":15,"endCol":36},{}]},"274":{"partial":false,"source":"      }","missing":[{}]},"275":{"partial":false,"source":"      cb(er)","missing":[{},{"startCol":6,"endCol":12}]},"276":{"partial":false,"source":"    })","missing":[{}]},"277":{"partial":false,"source":"  }","missing":[{}]},"278":{"partial":false,"source":"}","missing":[{}]},"284":{"partial":false,"source":"  var callback","missing":[{}]},"285":{"partial":false,"source":"  if (callback_ && typeof callback_ === 'function') {","missing":[{"startCol":19,"endCol":50},{},{"startCol":6,"endCol":50}]},"286":{"partial":false,"source":"    var eagCounter = 0","missing":[{}]},"287":{"partial":false,"source":"    callback = function (er, _, __) {","missing":[{}]},"288":{"partial":false,"source":"      if (er && er.code === 'EAGAIN' && eagCounter < 10) {","missing":[{"startCol":10,"endCol":36},{"startCol":16,"endCol":36},{"startCol":40,"endCol":55},{}]},"289":{"partial":false,"source":"        eagCounter ++","missing":[{},{"startCol":8,"endCol":21}]},"290":{"partial":false,"source":"        return read.call(fs, fd, buffer, offset, length, position, callback)","missing":[{"startCol":15,"endCol":76},{}]},"291":{"partial":false,"source":"      }","missing":[{}]},"292":{"partial":false,"source":"      callback_.apply(this, arguments)","missing":[{},{"startCol":6,"endCol":38}]},"293":{"partial":false,"source":"    }","missing":[{}]},"294":{"partial":false,"source":"  }","missing":[{}]},"295":{"partial":false,"source":"  return read.call(fs, fd, buffer, offset, length, position, callback)","missing":[{"startCol":9,"endCol":70},{}]},"296":{"partial":false,"source":"}","missing":[{}]},"305":{"partial":false,"source":"      if (er.code === 'EAGAIN' && eagCounter < 10) {","missing":[{"startCol":10,"endCol":30},{"startCol":34,"endCol":49}]},"306":{"partial":false,"source":"        eagCounter ++","missing":[{"startCol":8,"endCol":21},{}]},"307":{"partial":false,"source":"        continue","missing":[{}]},"309":{"partial":false,"source":"      throw er","missing":[{}]},"310":{"partial":false,"source":"    }","missing":[{}]}},"source":"// this keeps a queue of opened file descriptors, and will make\n// fs operations wait until some have closed before trying to open more.\n\nvar fs = require(\"fs\")\n\n// there is such a thing as TOO graceful.\nif (fs.open === gracefulOpen) return\n\nvar queue = []\n  , constants = require(\"constants\")\n\nexports = module.exports = fs\nfs._curOpen = 0\n\nfs.MIN_MAX_OPEN = 64\nfs.MAX_OPEN = 1024\n\nvar originalOpen = fs.open\n  , originalOpenSync = fs.openSync\n  , originalClose = fs.close\n  , originalCloseSync = fs.closeSync\n\n\n// prevent EMFILE errors\nfunction OpenReq (path, flags, mode, cb) {\n  this.path = path\n  this.flags = flags\n  this.mode = mode\n  this.cb = cb\n}\n\nfunction noop () {}\n\nfs.open = gracefulOpen\n\nfunction gracefulOpen (path, flags, mode, cb) {\n  if (typeof mode === \"function\") cb = mode, mode = null\n  if (typeof cb !== \"function\") cb = noop\n\n  if (fs._curOpen >= fs.MAX_OPEN) {\n    queue.push(new OpenReq(path, flags, mode, cb))\n    setTimeout(flush)\n    return\n  }\n  open(path, flags, mode, function (er, fd) {\n    if (er && er.code === \"EMFILE\" && fs._curOpen > fs.MIN_MAX_OPEN) {\n      // that was too many.  reduce max, get back in queue.\n      // this should only happen once in a great while, and only\n      // if the ulimit -n is set lower than 1024.\n      fs.MAX_OPEN = fs._curOpen - 1\n      return fs.open(path, flags, mode, cb)\n    }\n    cb(er, fd)\n  })\n}\n\nfunction open (path, flags, mode, cb) {\n  cb = cb || noop\n  fs._curOpen ++\n  originalOpen.call(fs, path, flags, mode, function (er, fd) {\n    if (er) onclose()\n    cb(er, fd)\n  })\n}\n\nfs.openSync = function (path, flags, mode) {\n  var ret\n  ret = originalOpenSync.call(fs, path, flags, mode)\n  fs._curOpen ++\n  return ret\n}\n\nfunction onclose () {\n  fs._curOpen --\n  flush()\n}\n\nfunction flush () {\n  while (fs._curOpen < fs.MAX_OPEN) {\n    var req = queue.shift()\n    if (!req) return\n    open(req.path, req.flags || \"r\", req.mode || 0777, req.cb)\n  }\n}\n\nfs.close = function (fd, cb) {\n  cb = cb || noop\n  originalClose.call(fs, fd, function (er) {\n    onclose()\n    cb(er)\n  })\n}\n\nfs.closeSync = function (fd) {\n  onclose()\n  return originalCloseSync.call(fs, fd)\n}\n\n\n// (re-)implement some things that are known busted or missing.\n\nvar constants = require(\"constants\")\n\n// lchmod, broken prior to 0.6.2\n// back-port the fix here.\nif (constants.hasOwnProperty('O_SYMLINK') &&\n    process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {\n  fs.lchmod = function (path, mode, callback) {\n    callback = callback || noop\n    fs.open( path\n           , constants.O_WRONLY | constants.O_SYMLINK\n           , mode\n           , function (err, fd) {\n      if (err) {\n        callback(err)\n        return\n      }\n      // prefer to return the chmod error, if one occurs,\n      // but still try to close, and report closing errors if they occur.\n      fs.fchmod(fd, mode, function (err) {\n        fs.close(fd, function(err2) {\n          callback(err || err2)\n        })\n      })\n    })\n  }\n\n  fs.lchmodSync = function (path, mode) {\n    var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)\n\n    // prefer to return the chmod error, if one occurs,\n    // but still try to close, and report closing errors if they occur.\n    var err, err2\n    try {\n      var ret = fs.fchmodSync(fd, mode)\n    } catch (er) {\n      err = er\n    }\n    try {\n      fs.closeSync(fd)\n    } catch (er) {\n      err2 = er\n    }\n    if (err || err2) throw (err || err2)\n    return ret\n  }\n}\n\n\n// lutimes implementation, or no-op\nif (!fs.lutimes) {\n  if (constants.hasOwnProperty(\"O_SYMLINK\")) {\n    fs.lutimes = function (path, at, mt, cb) {\n      fs.open(path, constants.O_SYMLINK, function (er, fd) {\n        cb = cb || noop\n        if (er) return cb(er)\n        fs.futimes(fd, at, mt, function (er) {\n          fs.close(fd, function (er2) {\n            return cb(er || er2)\n          })\n        })\n      })\n    }\n\n    fs.lutimesSync = function (path, at, mt) {\n      var fd = fs.openSync(path, constants.O_SYMLINK)\n        , err\n        , err2\n        , ret\n\n      try {\n        var ret = fs.futimesSync(fd, at, mt)\n      } catch (er) {\n        err = er\n      }\n      try {\n        fs.closeSync(fd)\n      } catch (er) {\n        err2 = er\n      }\n      if (err || err2) throw (err || err2)\n      return ret\n    }\n\n  } else if (fs.utimensat && constants.hasOwnProperty(\"AT_SYMLINK_NOFOLLOW\")) {\n    // maybe utimensat will be bound soonish?\n    fs.lutimes = function (path, at, mt, cb) {\n      fs.utimensat(path, at, mt, constants.AT_SYMLINK_NOFOLLOW, cb)\n    }\n\n    fs.lutimesSync = function (path, at, mt) {\n      return fs.utimensatSync(path, at, mt, constants.AT_SYMLINK_NOFOLLOW)\n    }\n\n  } else {\n    fs.lutimes = function (_a, _b, _c, cb) { process.nextTick(cb) }\n    fs.lutimesSync = function () {}\n  }\n}\n\n\n// https://github.com/isaacs/node-graceful-fs/issues/4\n// Chown should not fail on einval or eperm if non-root.\n\nfs.chown = chownFix(fs.chown)\nfs.fchown = chownFix(fs.fchown)\nfs.lchown = chownFix(fs.lchown)\n\nfs.chownSync = chownFixSync(fs.chownSync)\nfs.fchownSync = chownFixSync(fs.fchownSync)\nfs.lchownSync = chownFixSync(fs.lchownSync)\n\nfunction chownFix (orig) {\n  if (!orig) return orig\n  return function (target, uid, gid, cb) {\n    return orig.call(fs, target, uid, gid, function (er, res) {\n      if (chownErOk(er)) er = null\n      cb(er, res)\n    })\n  }\n}\n\nfunction chownFixSync (orig) {\n  if (!orig) return orig\n  return function (target, uid, gid) {\n    try {\n      return orig.call(fs, target, uid, gid)\n    } catch (er) {\n      if (!chownErOk(er)) throw er\n    }\n  }\n}\n\nfunction chownErOk (er) {\n  // if there's no getuid, or if getuid() is something other than 0,\n  // and the error is EINVAL or EPERM, then just ignore it.\n  // This specific case is a silent failure in cp, install, tar,\n  // and most other unix tools that manage permissions.\n  // When running as root, or if other types of errors are encountered,\n  // then it's strict.\n  if (!er || (!process.getuid || process.getuid() !== 0)\n      && (er.code === \"EINVAL\" || er.code === \"EPERM\")) return true\n}\n\n\n// if lchmod/lchown do not exist, then make them no-ops\nif (!fs.lchmod) {\n  fs.lchmod = function (path, mode, cb) {\n    process.nextTick(cb)\n  }\n  fs.lchmodSync = function () {}\n}\nif (!fs.lchown) {\n  fs.lchown = function (path, uid, gid, cb) {\n    process.nextTick(cb)\n  }\n  fs.lchownSync = function () {}\n}\n\n\n\n// on Windows, A/V software can lock the directory, causing this\n// to fail with an EACCES or EPERM if the directory contains newly\n// created files.  Try again on failure, for up to 1 second.\nif (process.platform === \"win32\") {\n  var rename_ = fs.rename\n  fs.rename = function rename (from, to, cb) {\n    var start = Date.now()\n    rename_(from, to, function CB (er) {\n      if (er\n          && (er.code === \"EACCES\" || er.code === \"EPERM\")\n          && Date.now() - start < 1000) {\n        return rename_(from, to, CB)\n      }\n      cb(er)\n    })\n  }\n}\n\n\n// if read() returns EAGAIN, then just try it again.\nvar read = fs.read\nfs.read = function (fd, buffer, offset, length, position, callback_) {\n  var callback\n  if (callback_ && typeof callback_ === 'function') {\n    var eagCounter = 0\n    callback = function (er, _, __) {\n      if (er && er.code === 'EAGAIN' && eagCounter < 10) {\n        eagCounter ++\n        return read.call(fs, fd, buffer, offset, length, position, callback)\n      }\n      callback_.apply(this, arguments)\n    }\n  }\n  return read.call(fs, fd, buffer, offset, length, position, callback)\n}\n\nvar readSync = fs.readSync\nfs.readSync = function (fd, buffer, offset, length, position) {\n  var eagCounter = 0\n  while (true) {\n    try {\n      return readSync.call(fs, fd, buffer, offset, length, position)\n    } catch (er) {\n      if (er.code === 'EAGAIN' && eagCounter < 10) {\n        eagCounter ++\n        continue\n      }\n      throw er\n    }\n  }\n}","blocks":{"total":83,"seen":13,"missing":70,"percentage":0.1566265060240964}},"hash":"30d760667e037b8b1150376f19e3605a"},"/usr/local/lib/node_modules/grunt-cli/node_modules/glob/node_modules/minimatch/minimatch.js":{"stats":{"percentage":0.7599629286376274,"lines":[{"lineno":4},{"lineno":7},{"lineno":9},{"lineno":10},{"lineno":12},{"lineno":13},{"lineno":14},{"lineno":15},{"lineno":16},{"lineno":18},{"lineno":20},{"lineno":21},{"lineno":22},{"lineno":23},{"lineno":24},{"lineno":25},{"lineno":27},{"lineno":73},{"lineno":74},{"lineno":75},{"lineno":76},{"lineno":77},{"lineno":79},{"lineno":84},{"lineno":85},{"lineno":86},{"lineno":91},{"lineno":92},{"lineno":93},{"lineno":94},{"lineno":95},{"lineno":97},{"lineno":98},{"lineno":100},{"lineno":104},{"lineno":106},{"lineno":108},{"lineno":109},{"lineno":112},{"lineno":113},{"lineno":116},{"lineno":120},{"lineno":121},{"lineno":126},{"lineno":127},{"lineno":130},{"lineno":133},{"lineno":134},{"lineno":138},{"lineno":140},{"lineno":145},{"lineno":149},{"lineno":152},{"lineno":158},{"lineno":166},{"lineno":184},{"lineno":191},{"lineno":192},{"lineno":195},{"lineno":196},{"lineno":205},{"lineno":216},{"lineno":223},{"lineno":230},{"lineno":242},{"lineno":246},{"lineno":247},{"lineno":248},{"lineno":251},{"lineno":266},{"lineno":276},{"lineno":311},{"lineno":321},{"lineno":340},{"lineno":343},{"lineno":345},{"lineno":347},{"lineno":348},{"lineno":351},{"lineno":378},{"lineno":379},{"lineno":383},{"lineno":387},{"lineno":388},{"lineno":400},{"lineno":408},{"lineno":424},{"lineno":448},{"lineno":449},{"lineno":480},{"lineno":481},{"lineno":495},{"lineno":497},{"lineno":506},{"lineno":507},{"lineno":510},{"lineno":511},{"lineno":514},{"lineno":517},{"lineno":526},{"lineno":531},{"lineno":532},{"lineno":540},{"lineno":543},{"lineno":544},{"lineno":555},{"lineno":561},{"lineno":562},{"lineno":569},{"lineno":570},{"lineno":574},{"lineno":579},{"lineno":584},{"lineno":588},{"lineno":589},{"lineno":590},{"lineno":593},{"lineno":594},{"lineno":598},{"lineno":599},{"lineno":603},{"lineno":604},{"lineno":605},{"lineno":610},{"lineno":614},{"lineno":620},{"lineno":621},{"lineno":622},{"lineno":626},{"lineno":632},{"lineno":635},{"lineno":639},{"lineno":640},{"lineno":641},{"lineno":642},{"lineno":650},{"lineno":651},{"lineno":652},{"lineno":657},{"lineno":658},{"lineno":659},{"lineno":668},{"lineno":687},{"lineno":688},{"lineno":689},{"lineno":690},{"lineno":701},{"lineno":703},{"lineno":706},{"lineno":715},{"lineno":719},{"lineno":720},{"lineno":721},{"lineno":723},{"lineno":724},{"lineno":733},{"lineno":742},{"lineno":748},{"lineno":750},{"lineno":754},{"lineno":764},{"lineno":765},{"lineno":767},{"lineno":768},{"lineno":770},{"lineno":774},{"lineno":779},{"lineno":787},{"lineno":789},{"lineno":790},{"lineno":792},{"lineno":793},{"lineno":794},{"lineno":795},{"lineno":797},{"lineno":798},{"lineno":799},{"lineno":800},{"lineno":801},{"lineno":807},{"lineno":810},{"lineno":813},{"lineno":815},{"lineno":820},{"lineno":821},{"lineno":822},{"lineno":824},{"lineno":825},{"lineno":827},{"lineno":835},{"lineno":836},{"lineno":838},{"lineno":840},{"lineno":844},{"lineno":845},{"lineno":849},{"lineno":851},{"lineno":859},{"lineno":862},{"lineno":863},{"lineno":864},{"lineno":866},{"lineno":867},{"lineno":873},{"lineno":874},{"lineno":883},{"lineno":886},{"lineno":892},{"lineno":893},{"lineno":897},{"lineno":904},{"lineno":905},{"lineno":908},{"lineno":910},{"lineno":914},{"lineno":919},{"lineno":921},{"lineno":923},{"lineno":947},{"lineno":948},{"lineno":949},{"lineno":951},{"lineno":958},{"lineno":959},{"lineno":960},{"lineno":962},{"lineno":966},{"lineno":967},{"lineno":970},{"lineno":975},{"lineno":977},{"lineno":979},{"lineno":983},{"lineno":984},{"lineno":986},{"lineno":992},{"lineno":993},{"lineno":1002},{"lineno":1004},{"lineno":1010},{"lineno":1011},{"lineno":1013},{"lineno":1015},{"lineno":1018},{"lineno":1021},{"lineno":1023},{"lineno":1027},{"lineno":1042},{"lineno":1045},{"lineno":1046},{"lineno":1050},{"lineno":1051},{"lineno":1056},{"lineno":1057},{"lineno":1061},{"lineno":1072},{"lineno":1075},{"lineno":1077},{"lineno":1078}],"missing":259,"seen":820,"total":1079,"coverage":{"4":{"partial":false,"source":"else exports.minimatch = minimatch","missing":[{}]},"5":{"partial":false,"source":"","missing":[{}]},"6":{"partial":false,"source":"if (!require) {","missing":[{}]},"7":{"partial":false,"source":"  require = function (id) {","missing":[{}]},"8":{"partial":false,"source":"    switch (id) {","missing":[{}]},"9":{"partial":false,"source":"      case \"sigmund\": return function sigmund (obj) {","missing":[{}]},"10":{"partial":false,"source":"        return JSON.stringify(obj)","missing":[{},{"startCol":15,"endCol":34}]},"11":{"partial":false,"source":"      }","missing":[{}]},"12":{"partial":false,"source":"      case \"path\": return { basename: function (f) {","missing":[{}]},"13":{"partial":false,"source":"        f = f.split(/[\\/\\\\]/)","missing":[{"startCol":12,"endCol":29},{}]},"14":{"partial":false,"source":"        var e = f.pop()","missing":[{},{"startCol":16,"endCol":23}]},"15":{"partial":false,"source":"        if (!e) e = f.pop()","missing":[{"startCol":20,"endCol":27},{}]},"16":{"partial":false,"source":"        return e","missing":[{}]},"17":{"partial":false,"source":"      }}","missing":[{}]},"18":{"partial":false,"source":"      case \"lru-cache\": return function LRUCache () {","missing":[{}]},"19":{"partial":false,"source":"        // not quite an LRU, but still space-limited.","missing":[{}]},"20":{"partial":false,"source":"        var cache = {}","missing":[{}]},"21":{"partial":false,"source":"        var cnt = 0","missing":[{}]},"22":{"partial":false,"source":"        this.set = function (k, v) {","missing":[{}]},"23":{"partial":false,"source":"          cnt ++","missing":[{"startCol":10,"endCol":16},{}]},"24":{"partial":false,"source":"          if (cnt >= 100) cache = {}","missing":[{"startCol":14,"endCol":24},{}]},"25":{"partial":false,"source":"          cache[k] = v","missing":[{}]},"26":{"partial":false,"source":"        }","missing":[{}]},"27":{"partial":false,"source":"        this.get = function (k) { return cache[k] }","missing":[{},{"startCol":34,"endCol":50}]},"28":{"partial":false,"source":"      }","missing":[{}]},"29":{"partial":false,"source":"    }","missing":[{}]},"30":{"partial":false,"source":"  }","missing":[{}]},"31":{"partial":false,"source":"}","missing":[{}]},"73":{"partial":false,"source":"  var desc = Object.getOwnPropertyDescriptor(String.prototype, \"match\")","missing":[{},{"startCol":13,"endCol":71}]},"74":{"partial":false,"source":"  var orig = desc.value","missing":[{}]},"75":{"partial":false,"source":"  desc.value = function (p) {","missing":[{}]},"76":{"partial":false,"source":"    if (p instanceof Minimatch) return p.match(this)","missing":[{"startCol":8,"endCol":30},{"startCol":39,"endCol":52},{}]},"77":{"partial":false,"source":"    return orig.call(this, p)","missing":[{"startCol":11,"endCol":29},{}]},"78":{"partial":false,"source":"  }","missing":[{}]},"79":{"partial":false,"source":"  Object.defineProperty(String.prototype, desc)","missing":[{},{"startCol":2,"endCol":47}]},"80":{"partial":false,"source":"}","missing":[{}]},"84":{"partial":false,"source":"  options = options || {}","missing":[{"startCol":12,"endCol":25},{}]},"85":{"partial":false,"source":"  return function (p, i, list) {","missing":[{}]},"86":{"partial":false,"source":"    return minimatch(p, pattern, options)","missing":[{"startCol":11,"endCol":41},{}]},"87":{"partial":false,"source":"  }","missing":[{}]},"88":{"partial":false,"source":"}","missing":[{}]},"91":{"partial":false,"source":"  a = a || {}","missing":[{"startCol":6,"endCol":13},{}]},"92":{"partial":false,"source":"  b = b || {}","missing":[{},{"startCol":6,"endCol":13}]},"93":{"partial":false,"source":"  var t = {}","missing":[{}]},"94":{"partial":false,"source":"  Object.keys(b).forEach(function (k) {","missing":[{},{"startCol":13,"endCol":16}]},"95":{"partial":false,"source":"    t[k] = b[k]","missing":[{}]},"96":{"partial":false,"source":"  })","missing":[{}]},"97":{"partial":false,"source":"  Object.keys(a).forEach(function (k) {","missing":[{},{"startCol":13,"endCol":16}]},"98":{"partial":false,"source":"    t[k] = a[k]","missing":[{}]},"99":{"partial":false,"source":"  })","missing":[{}]},"100":{"partial":false,"source":"  return t","missing":[{}]},"101":{"partial":false,"source":"}","missing":[{}]},"104":{"partial":false,"source":"  if (!def || !Object.keys(def).length) return minimatch","missing":[{"startCol":6,"endCol":38},{"startCol":26,"endCol":31},{}]},"105":{"partial":false,"source":"","missing":[{}]},"106":{"partial":false,"source":"  var orig = minimatch","missing":[{}]},"107":{"partial":false,"source":"","missing":[{}]},"108":{"partial":false,"source":"  var m = function minimatch (p, pattern, options) {","missing":[{}]},"109":{"partial":false,"source":"    return orig.minimatch(p, pattern, ext(def, options))","missing":[{},{"startCol":11,"endCol":56},{"startCol":38,"endCol":55}]},"110":{"partial":false,"source":"  }","missing":[{}]},"111":{"partial":false,"source":"","missing":[{}]},"112":{"partial":false,"source":"  m.Minimatch = function Minimatch (pattern, options) {","missing":[{}]},"113":{"partial":false,"source":"    return new orig.Minimatch(pattern, ext(def, options))","missing":[{},{"startCol":39,"endCol":56}]},"114":{"partial":false,"source":"  }","missing":[{}]},"115":{"partial":false,"source":"","missing":[{}]},"116":{"partial":false,"source":"  return m","missing":[{}]},"117":{"partial":false,"source":"}","missing":[{}]},"120":{"partial":false,"source":"  if (!def || !Object.keys(def).length) return Minimatch","missing":[{},{"startCol":6,"endCol":38},{"startCol":26,"endCol":31}]},"121":{"partial":false,"source":"  return minimatch.defaults(def).Minimatch","missing":[{},{"startCol":27,"endCol":32}]},"122":{"partial":false,"source":"}","missing":[{}]},"126":{"partial":false,"source":"  if (typeof pattern !== \"string\") {","missing":[{"startCol":6,"endCol":33}]},"127":{"partial":false,"source":"    throw new TypeError(\"glob pattern string required\")","missing":[{}]},"128":{"partial":false,"source":"  }","missing":[{}]},"130":{"partial":false,"source":"  if (!options) options = {}","missing":[{}]},"131":{"partial":false,"source":"","missing":[{}]},"132":{"partial":false,"source":"  // shortcut: comments match nothing.","missing":[{}]},"133":{"partial":false,"source":"  if (!options.nocomment && pattern.charAt(0) === \"#\") {","missing":[{},{"startCol":6,"endCol":53},{"startCol":28,"endCol":45}]},"134":{"partial":false,"source":"    return false","missing":[{}]},"135":{"partial":false,"source":"  }","missing":[{}]},"138":{"partial":false,"source":"  if (pattern.trim() === \"\") return p === \"\"","missing":[{"startCol":6,"endCol":27},{"startCol":36,"endCol":44},{}]},"139":{"partial":false,"source":"","missing":[{}]},"140":{"partial":false,"source":"  return new Minimatch(pattern, options).match(p)","missing":[{"startCol":9,"endCol":49},{}]},"141":{"partial":false,"source":"}","missing":[{}]},"145":{"partial":false,"source":"    return new Minimatch(pattern, options, cache)","missing":[{}]},"146":{"partial":false,"source":"  }","missing":[{}]},"149":{"partial":false,"source":"    throw new TypeError(\"glob pattern string required\")","missing":[{}]},"150":{"partial":false,"source":"  }","missing":[{}]},"152":{"partial":false,"source":"  if (!options) options = {}","missing":[{}]},"153":{"partial":true,"source":"  pattern = pattern.trim()","missing":[{}]},"158":{"partial":false,"source":"    pattern = pattern.split(\"\\\\\").join(\"/\")","missing":[{"startCol":14,"endCol":43},{},{"startCol":27,"endCol":33}]},"159":{"partial":false,"source":"  }","missing":[{}]},"166":{"partial":false,"source":"  if (cached) return cached","missing":[{}]},"167":{"partial":true,"source":"  minimatch.cache.set(cacheKey, this)","missing":[{}]},"184":{"partial":false,"source":"  if (this._made) return","missing":[{"startCol":18,"endCol":24}]},"191":{"partial":false,"source":"    this.comment = true","missing":[{}]},"192":{"partial":false,"source":"    return","missing":[{},{"startCol":4,"endCol":10}]},"195":{"partial":false,"source":"    this.empty = true","missing":[{}]},"196":{"partial":false,"source":"    return","missing":[{"startCol":4,"endCol":10},{}]},"205":{"partial":false,"source":"  if (options.debug) console.error(this.pattern, set)","missing":[{"startCol":21,"endCol":53},{}]},"206":{"partial":false,"source":"","missing":[{}]},"207":{"partial":false,"source":"  // step 3: now we have a set, so turn each one into a series of path-portion","missing":[{}]},"208":{"partial":false,"source":"  // matching patterns.","missing":[{}]},"209":{"partial":false,"source":"  // These will be regexps, except in the case of \"**\", which is","missing":[{}]},"210":{"partial":false,"source":"  // set to the GLOBSTAR object for globstar behavior,","missing":[{}]},"211":{"partial":false,"source":"  // and will not contain any / characters","missing":[{}]},"212":{"partial":true,"source":"  set = this.globParts = set.map(function (s) {","missing":[{}]},"216":{"partial":false,"source":"  if (options.debug) console.error(this.pattern, set)","missing":[{},{"startCol":21,"endCol":53}]},"217":{"partial":false,"source":"","missing":[{}]},"218":{"partial":false,"source":"  // glob --> regexps","missing":[{}]},"219":{"partial":true,"source":"  set = set.map(function (s, si, set) {","missing":[{}]},"223":{"partial":false,"source":"  if (options.debug) console.error(this.pattern, set)","missing":[{"startCol":21,"endCol":53},{}]},"224":{"partial":false,"source":"","missing":[{}]},"225":{"partial":false,"source":"  // filter out everything that didn't compile properly.","missing":[{}]},"226":{"partial":true,"source":"  set = set.filter(function (s) {","missing":[{}]},"230":{"partial":false,"source":"  if (options.debug) console.error(this.pattern, set)","missing":[{},{"startCol":21,"endCol":53}]},"231":{"partial":false,"source":"","missing":[{}]},"232":{"partial":true,"source":"  this.set = set","missing":[{}]},"242":{"partial":false,"source":"  if (options.nonegate) return","missing":[{"startCol":24,"endCol":30}]},"246":{"partial":false,"source":"      ; i ++) {","missing":[{"startCol":8,"endCol":12}]},"247":{"partial":false,"source":"    negate = !negate","missing":[{}]},"248":{"partial":false,"source":"    negateOffset ++","missing":[{},{"startCol":4,"endCol":19}]},"249":{"partial":false,"source":"  }","missing":[{}]},"251":{"partial":false,"source":"  if (negateOffset) this.pattern = pattern.substr(negateOffset)","missing":[{},{"startCol":35,"endCol":63}]},"252":{"partial":true,"source":"  this.negate = negate","missing":[{}]},"266":{"partial":false,"source":"  return new Minimatch(pattern, options).braceExpand()","missing":[{"startCol":9,"endCol":54},{}]},"267":{"partial":false,"source":"}","missing":[{}]},"276":{"partial":false,"source":"    throw new Error(\"undefined pattern\")","missing":[{}]},"277":{"partial":false,"source":"  }","missing":[{}]},"311":{"partial":false,"source":"        escaping = !escaping","missing":[{}]},"312":{"partial":true,"source":"      } else if (c === \"{\" && !escaping) {","missing":[{}]},"321":{"partial":false,"source":"      return [pattern]","missing":[{}]},"322":{"partial":false,"source":"    }","missing":[{}]},"340":{"partial":false,"source":"    var suf = braceExpand(pattern.substr(numset[0].length), options)","missing":[{},{"startCol":14,"endCol":68},{"startCol":26,"endCol":58}]},"341":{"partial":false,"source":"      , start = +numset[1]","missing":[{}]},"342":{"partial":false,"source":"      , end = +numset[2]","missing":[{}]},"343":{"partial":false,"source":"      , inc = start > end ? -1 : 1","missing":[{"startCol":14,"endCol":25},{"startCol":28,"endCol":30},{"startCol":33,"endCol":34},{}]},"344":{"partial":false,"source":"      , set = []","missing":[{}]},"345":{"partial":false,"source":"    for (var i = start; i != (end + inc); i += inc) {","missing":[{"startCol":24,"endCol":40},{"startCol":29,"endCol":40},{}]},"347":{"partial":false,"source":"      for (var ii = 0, ll = suf.length; ii < ll; ii ++) {","missing":[{"startCol":40,"endCol":47},{"startCol":49,"endCol":54}]},"348":{"partial":false,"source":"        set.push(i + suf[ii])","missing":[{"startCol":8,"endCol":29},{},{"startCol":17,"endCol":28}]},"349":{"partial":false,"source":"      }","missing":[{}]},"351":{"partial":false,"source":"    return set","missing":[{}]},"352":{"partial":false,"source":"  }","missing":[{}]},"378":{"partial":false,"source":"      escaping = false","missing":[{}]},"379":{"partial":false,"source":"      member += \"\\\\\" + c","missing":[{},{"startCol":16,"endCol":24}]},"380":{"partial":false,"source":"    } else {","missing":[{}]},"383":{"partial":false,"source":"          escaping = true","missing":[{}]},"384":{"partial":false,"source":"          continue","missing":[{}]},"387":{"partial":false,"source":"          depth ++","missing":[{"startCol":10,"endCol":18},{}]},"388":{"partial":false,"source":"          member += \"{\"","missing":[{}]},"389":{"partial":false,"source":"          continue","missing":[{}]},"400":{"partial":false,"source":"            member += c","missing":[{}]},"401":{"partial":false,"source":"            continue","missing":[{}]},"408":{"partial":false,"source":"            member += c","missing":[{}]},"409":{"partial":false,"source":"          }","missing":[{}]},"424":{"partial":false,"source":"    return braceExpand(\"\\\\\" + pattern, options)","missing":[{"startCol":11,"endCol":47},{},{"startCol":23,"endCol":37}]},"425":{"partial":false,"source":"  }","missing":[{}]},"448":{"partial":false,"source":"    set = set.map(function (s) {","missing":[{}]},"449":{"partial":false,"source":"      return \"{\" + s + \"}\"","missing":[{},{"startCol":13,"endCol":20}]},"450":{"partial":false,"source":"    })","missing":[{}]},"451":{"partial":false,"source":"  }","missing":[{}]},"480":{"partial":true,"source":"  if (!options.noglobstar && pattern === \"**\") return GLOBSTAR","missing":[{}]},"481":{"partial":true,"source":"  if (pattern === \"\") return \"\"","missing":[{}]},"482":{"partial":false,"source":"","missing":[{}]},"483":{"partial":true,"source":"  var re = \"\"","missing":[{}]},"495":{"partial":true,"source":"    , patternStart = pattern.charAt(0) === \".\" ? \"\" // anything","missing":[{"startCol":49,"endCol":51}]},"497":{"partial":true,"source":"      : options.dot ? \"(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))\"","missing":[{"startCol":22,"endCol":56}]},"506":{"partial":false,"source":"          re += star","missing":[{}]},"507":{"partial":false,"source":"          hasMagic = true","missing":[{}]},"508":{"partial":false,"source":"          break","missing":[{}]},"510":{"partial":false,"source":"          re += qmark","missing":[{}]},"511":{"partial":false,"source":"          hasMagic = true","missing":[{}]},"512":{"partial":false,"source":"          break","missing":[{}]},"514":{"partial":false,"source":"          re += \"\\\\\"+stateChar","missing":[{},{"startCol":16,"endCol":30}]},"515":{"partial":false,"source":"          break","missing":[{}]},"517":{"partial":false,"source":"      stateChar = false","missing":[{}]},"518":{"partial":false,"source":"    }","missing":[{}]},"526":{"partial":false,"source":"      console.error(\"%s\\t%s %s %j\", pattern, i, re, c)","missing":[{"startCol":6,"endCol":54},{}]},"527":{"partial":false,"source":"    }","missing":[{}]},"531":{"partial":false,"source":"      re += \"\\\\\" + c","missing":[{"startCol":12,"endCol":20},{}]},"532":{"partial":false,"source":"      escaping = false","missing":[{}]},"533":{"partial":false,"source":"      continue","missing":[{}]},"540":{"partial":false,"source":"        return false","missing":[{}]},"541":{"partial":false,"source":"","missing":[{}]},"542":{"partial":false,"source":"      case \"\\\\\":","missing":[{}]},"543":{"partial":false,"source":"        clearStateChar()","missing":[{},{"startCol":8,"endCol":24}]},"544":{"partial":false,"source":"        escaping = true","missing":[{}]},"545":{"partial":false,"source":"        continue","missing":[{}]},"555":{"partial":false,"source":"          console.error(\"%s\\t%s %s %j <-- stateChar\", pattern, i, re, c)","missing":[{},{"startCol":10,"endCol":72}]},"556":{"partial":false,"source":"        }","missing":[{}]},"561":{"partial":false,"source":"          if (c === \"!\" && i === classStart + 1) c = \"^\"","missing":[{"startCol":33,"endCol":47},{"startCol":27,"endCol":47},{"startCol":14,"endCol":23},{}]},"562":{"partial":false,"source":"          re += c","missing":[{}]},"563":{"partial":false,"source":"          continue","missing":[{}]},"569":{"partial":false,"source":"        clearStateChar()","missing":[{"startCol":8,"endCol":24},{}]},"570":{"partial":false,"source":"        stateChar = c","missing":[{}]},"571":{"partial":false,"source":"        // if extglob is disabled, then +(asdf|foo) isn't a thing.","missing":[{}]},"572":{"partial":false,"source":"        // just clear the statechar *now*, rather than even diving into","missing":[{}]},"573":{"partial":false,"source":"        // the patternList stuff.","missing":[{}]},"574":{"partial":false,"source":"        if (options.noext) clearStateChar()","missing":[{},{"startCol":27,"endCol":43}]},"575":{"partial":false,"source":"        continue","missing":[{}]},"579":{"partial":false,"source":"          re += \"(\"","missing":[{}]},"580":{"partial":false,"source":"          continue","missing":[{}]},"584":{"partial":false,"source":"          re += \"\\\\(\"","missing":[{}]},"585":{"partial":false,"source":"          continue","missing":[{}]},"588":{"partial":false,"source":"        plType = stateChar","missing":[{}]},"589":{"partial":false,"source":"        patternListStack.push({ type: plType","missing":[{}]},"590":{"partial":false,"source":"                              , start: i - 1","missing":[{"startCol":39,"endCol":44},{}]},"591":{"partial":false,"source":"                              , reStart: re.length })","missing":[{}]},"592":{"partial":false,"source":"        // negation is (?:(?!js)[^/]*)","missing":[{}]},"593":{"partial":false,"source":"        re += stateChar === \"!\" ? \"(?:(?!\" : \"(?:\"","missing":[{},{"startCol":14,"endCol":31},{"startCol":34,"endCol":42},{"startCol":45,"endCol":50}]},"594":{"partial":false,"source":"        stateChar = false","missing":[{}]},"595":{"partial":false,"source":"        continue","missing":[{}]},"598":{"partial":false,"source":"        if (inClass || !patternListStack.length) {","missing":[{"startCol":12,"endCol":47}]},"599":{"partial":false,"source":"          re += \"\\\\)\"","missing":[{}]},"600":{"partial":false,"source":"          continue","missing":[{}]},"603":{"partial":false,"source":"        hasMagic = true","missing":[{}]},"604":{"partial":false,"source":"        re += \")\"","missing":[{}]},"605":{"partial":false,"source":"        plType = patternListStack.pop().type","missing":[{"startCol":37,"endCol":39},{}]},"606":{"partial":false,"source":"        // negation is (?:(?!js)[^/]*)","missing":[{}]},"607":{"partial":false,"source":"        // The others are (?:<pattern>)<type>","missing":[{}]},"608":{"partial":false,"source":"        switch (plType) {","missing":[{}]},"610":{"partial":false,"source":"            re += \"[^/]*?)\"","missing":[{}]},"611":{"partial":false,"source":"            break","missing":[{}]},"614":{"partial":false,"source":"          case \"*\": re += plType","missing":[{}]},"615":{"partial":false,"source":"          case \"@\": break // the default anyway","missing":[{}]},"620":{"partial":false,"source":"        if (inClass || !patternListStack.length || escaping) {","missing":[{"startCol":12,"endCol":47}]},"621":{"partial":false,"source":"          re += \"\\\\|\"","missing":[{}]},"622":{"partial":false,"source":"          escaping = false","missing":[{}]},"623":{"partial":false,"source":"          continue","missing":[{}]},"626":{"partial":false,"source":"        re += \"|\"","missing":[{}]},"627":{"partial":false,"source":"        continue","missing":[{}]},"632":{"partial":false,"source":"        clearStateChar()","missing":[{"startCol":8,"endCol":24},{}]},"633":{"partial":false,"source":"","missing":[{}]},"634":{"partial":false,"source":"        if (inClass) {","missing":[{}]},"635":{"partial":false,"source":"          re += \"\\\\\" + c","missing":[{"startCol":16,"endCol":24},{}]},"636":{"partial":false,"source":"          continue","missing":[{}]},"639":{"partial":false,"source":"        inClass = true","missing":[{}]},"640":{"partial":false,"source":"        classStart = i","missing":[{}]},"641":{"partial":false,"source":"        reClassStart = re.length","missing":[{}]},"642":{"partial":false,"source":"        re += c","missing":[{}]},"643":{"partial":false,"source":"        continue","missing":[{}]},"650":{"partial":false,"source":"        if (i === classStart + 1 || !inClass) {","missing":[{"startCol":12,"endCol":32},{"startCol":18,"endCol":32}]},"651":{"partial":false,"source":"          re += \"\\\\\" + c","missing":[{"startCol":16,"endCol":24},{}]},"652":{"partial":false,"source":"          escaping = false","missing":[{}]},"653":{"partial":false,"source":"          continue","missing":[{}]},"657":{"partial":false,"source":"        hasMagic = true","missing":[{}]},"658":{"partial":false,"source":"        inClass = false","missing":[{}]},"659":{"partial":false,"source":"        re += c","missing":[{}]},"660":{"partial":false,"source":"        continue","missing":[{}]},"668":{"partial":false,"source":"          escaping = false","missing":[{}]},"669":{"partial":true,"source":"        } else if (reSpecials[c]","missing":[{}]},"687":{"partial":false,"source":"    var cs = pattern.substr(classStart + 1)","missing":[{"startCol":13,"endCol":43},{},{"startCol":28,"endCol":42}]},"688":{"partial":false,"source":"      , sp = this.parse(cs, SUBPARSE)","missing":[{"startCol":13,"endCol":37},{}]},"689":{"partial":false,"source":"    re = re.substr(0, reClassStart) + \"\\\\[\" + sp[0]","missing":[{"startCol":9,"endCol":35},{}]},"690":{"partial":false,"source":"    hasMagic = hasMagic || sp[1]","missing":[{},{"startCol":15,"endCol":32}]},"691":{"partial":false,"source":"  }","missing":[{}]},"701":{"partial":false,"source":"    var tail = re.slice(pl.reStart + 3)","missing":[{"startCol":15,"endCol":39},{"startCol":24,"endCol":38},{}]},"702":{"partial":false,"source":"    // maybe some even number of \\, then maybe 1 \\, followed by a |","missing":[{}]},"703":{"partial":false,"source":"    tail = tail.replace(/((?:\\\\{2})*)(\\\\?)\\|/g, function (_, $1, $2) {","missing":[{}]},"704":{"partial":false,"source":"      if (!$2) {","missing":[{}]},"705":{"partial":false,"source":"        // the | isn't already escaped, so escape it.","missing":[{}]},"706":{"partial":false,"source":"        $2 = \"\\\\\"","missing":[{}]},"707":{"partial":false,"source":"      }","missing":[{}]},"708":{"partial":false,"source":"","missing":[{}]},"709":{"partial":false,"source":"      // need to escape all those slashes *again*, without escaping the","missing":[{}]},"710":{"partial":false,"source":"      // one that we need for escaping the | character.  As it works out,","missing":[{}]},"711":{"partial":false,"source":"      // escaping an even number of slashes can be done by simply repeating","missing":[{}]},"712":{"partial":false,"source":"      // it exactly after itself.  That's why this trick works.","missing":[{}]},"713":{"partial":false,"source":"      //","missing":[{}]},"714":{"partial":false,"source":"      // I am sorry that you have to see this.","missing":[{}]},"715":{"partial":false,"source":"      return $1 + $1 + $2 + \"|\"","missing":[{"startCol":13,"endCol":20},{}]},"716":{"partial":false,"source":"    })","missing":[{}]},"717":{"partial":false,"source":"","missing":[{}]},"718":{"partial":false,"source":"    // console.error(\"tail=%j\\n   %s\", tail, tail)","missing":[{}]},"719":{"partial":false,"source":"    var t = pl.type === \"*\" ? star","missing":[{"startCol":12,"endCol":27},{},{"startCol":30,"endCol":34}]},"720":{"partial":false,"source":"          : pl.type === \"?\" ? qmark","missing":[{},{"startCol":12,"endCol":27},{"startCol":30,"endCol":35}]},"721":{"partial":false,"source":"          : \"\\\\\" + pl.type","missing":[{"startCol":12,"endCol":26},{}]},"722":{"partial":false,"source":"","missing":[{}]},"723":{"partial":false,"source":"    hasMagic = true","missing":[{}]},"724":{"partial":false,"source":"    re = re.slice(0, pl.reStart)","missing":[{},{"startCol":9,"endCol":32}]},"725":{"partial":false,"source":"       + t + \"\\\\(\"","missing":[{}]},"726":{"partial":false,"source":"       + tail","missing":[{}]},"727":{"partial":false,"source":"  }","missing":[{}]},"733":{"partial":false,"source":"    re += \"\\\\\\\\\"","missing":[{}]},"734":{"partial":false,"source":"  }","missing":[{}]},"742":{"partial":false,"source":"    case \"(\": addPatternStart = true","missing":[{}]},"743":{"partial":false,"source":"  }","missing":[{}]},"748":{"partial":true,"source":"  if (re !== \"\" && hasMagic) re = \"(?=.)\" + re","missing":[{},{"startCol":34,"endCol":46}]},"749":{"partial":false,"source":"","missing":[{}]},"750":{"partial":false,"source":"  if (addPatternStart) re = patternStart + re","missing":[{},{"startCol":28,"endCol":45}]},"751":{"partial":false,"source":"","missing":[{}]},"752":{"partial":false,"source":"  // parsing just a piece of a larger pattern.","missing":[{}]},"753":{"partial":true,"source":"  if (isSub === SUBPARSE) {","missing":[{}]},"754":{"partial":false,"source":"    return [ re, hasMagic ]","missing":[{}]},"755":{"partial":false,"source":"  }","missing":[{}]},"764":{"partial":false,"source":"  var flags = options.nocase ? \"i\" : \"\"","missing":[{"startCol":31,"endCol":34},{"startCol":37,"endCol":39},{}]},"765":{"partial":false,"source":"    , regExp = new RegExp(\"^\" + re + \"$\", flags)","missing":[{"startCol":26,"endCol":34},{}]},"766":{"partial":false,"source":"","missing":[{}]},"767":{"partial":false,"source":"  regExp._glob = pattern","missing":[{}]},"768":{"partial":false,"source":"  regExp._src = re","missing":[{}]},"769":{"partial":false,"source":"","missing":[{}]},"770":{"partial":false,"source":"  return regExp","missing":[{}]},"771":{"partial":false,"source":"}","missing":[{}]},"774":{"partial":false,"source":"  return new Minimatch(pattern, options || {}).makeRe()","missing":[{},{"startCol":9,"endCol":55},{"startCol":32,"endCol":45}]},"775":{"partial":false,"source":"}","missing":[{}]},"779":{"partial":false,"source":"  if (this.regexp || this.regexp === false) return this.regexp","missing":[{},{"startCol":6,"endCol":42},{"startCol":21,"endCol":42}]},"780":{"partial":false,"source":"","missing":[{}]},"781":{"partial":false,"source":"  // at this point, this.set is a 2d array of partial","missing":[{}]},"782":{"partial":false,"source":"  // pattern strings, or \"**\".","missing":[{}]},"783":{"partial":false,"source":"  //","missing":[{}]},"784":{"partial":false,"source":"  // It's better to use .match().  This function shouldn't","missing":[{}]},"785":{"partial":false,"source":"  // be used, really, but it's pretty convenient sometimes,","missing":[{}]},"786":{"partial":false,"source":"  // when you just want to work with a regex.","missing":[{}]},"787":{"partial":false,"source":"  var set = this.set","missing":[{}]},"788":{"partial":false,"source":"","missing":[{}]},"789":{"partial":false,"source":"  if (!set.length) return this.regexp = false","missing":[{}]},"790":{"partial":false,"source":"  var options = this.options","missing":[{}]},"791":{"partial":false,"source":"","missing":[{}]},"792":{"partial":false,"source":"  var twoStar = options.noglobstar ? star","missing":[{},{"startCol":37,"endCol":41}]},"793":{"partial":false,"source":"      : options.dot ? twoStarDot","missing":[{},{"startCol":22,"endCol":32}]},"794":{"partial":false,"source":"      : twoStarNoDot","missing":[{},{"startCol":8,"endCol":20}]},"795":{"partial":false,"source":"    , flags = options.nocase ? \"i\" : \"\"","missing":[{"startCol":31,"endCol":34},{"startCol":37,"endCol":39},{}]},"796":{"partial":false,"source":"","missing":[{}]},"797":{"partial":false,"source":"  var re = set.map(function (pattern) {","missing":[{}]},"798":{"partial":false,"source":"    return pattern.map(function (p) {","missing":[{}]},"799":{"partial":false,"source":"      return (p === GLOBSTAR) ? twoStar","missing":[{},{"startCol":13,"endCol":29},{"startCol":32,"endCol":39}]},"800":{"partial":false,"source":"           : (typeof p === \"string\") ? regExpEscape(p)","missing":[{},{"startCol":39,"endCol":54},{"startCol":13,"endCol":36}]},"801":{"partial":false,"source":"           : p._src","missing":[{},{"startCol":13,"endCol":19}]},"802":{"partial":false,"source":"    }).join(\"\\\\\\/\")","missing":[{}]},"803":{"partial":false,"source":"  }).join(\"|\")","missing":[{}]},"804":{"partial":false,"source":"","missing":[{}]},"805":{"partial":false,"source":"  // must match entire pattern","missing":[{}]},"806":{"partial":false,"source":"  // ending in a * or ** will make it less strict.","missing":[{}]},"807":{"partial":false,"source":"  re = \"^\" + re + \"$\"","missing":[{"startCol":7,"endCol":15},{}]},"808":{"partial":false,"source":"","missing":[{}]},"809":{"partial":false,"source":"  // can match anything, as long as it's not this.","missing":[{}]},"810":{"partial":false,"source":"  if (this.negate) re = \"^(?!\" + re + \").*$\"","missing":[{"startCol":24,"endCol":35},{}]},"811":{"partial":false,"source":"","missing":[{}]},"812":{"partial":false,"source":"  try {","missing":[{}]},"813":{"partial":false,"source":"    return this.regexp = new RegExp(re, flags)","missing":[{}]},"814":{"partial":false,"source":"  } catch (ex) {","missing":[{}]},"815":{"partial":false,"source":"    return this.regexp = false","missing":[{}]},"816":{"partial":false,"source":"  }","missing":[{}]},"820":{"partial":false,"source":"  var mm = new Minimatch(pattern, options)","missing":[{}]},"821":{"partial":false,"source":"  list = list.filter(function (f) {","missing":[{}]},"822":{"partial":false,"source":"    return mm.match(f)","missing":[{},{"startCol":11,"endCol":22}]},"823":{"partial":false,"source":"  })","missing":[{}]},"824":{"partial":false,"source":"  if (options.nonull && !list.length) {","missing":[{"startCol":6,"endCol":36},{}]},"825":{"partial":false,"source":"    list.push(pattern)","missing":[{},{"startCol":4,"endCol":22}]},"826":{"partial":false,"source":"  }","missing":[{}]},"827":{"partial":false,"source":"  return list","missing":[{}]},"828":{"partial":false,"source":"}","missing":[{}]},"835":{"partial":false,"source":"  if (this.comment) return false","missing":[{}]},"836":{"partial":false,"source":"  if (this.empty) return f === \"\"","missing":[{},{"startCol":25,"endCol":33}]},"837":{"partial":false,"source":"","missing":[{}]},"838":{"partial":false,"source":"  if (f === \"/\" && partial) return true","missing":[{},{"startCol":6,"endCol":26}]},"839":{"partial":false,"source":"","missing":[{}]},"840":{"partial":false,"source":"  var options = this.options","missing":[{}]},"841":{"partial":false,"source":"","missing":[{}]},"842":{"partial":false,"source":"  // windows: need to use /, not \\","missing":[{}]},"843":{"partial":false,"source":"  // On other platforms, \\ is a valid (albeit bad) filename char.","missing":[{}]},"844":{"partial":false,"source":"  if (platform === \"win32\") {","missing":[{},{"startCol":6,"endCol":26}]},"845":{"partial":false,"source":"    f = f.split(\"\\\\\").join(\"/\")","missing":[{},{"startCol":8,"endCol":31},{"startCol":15,"endCol":21}]},"846":{"partial":false,"source":"  }","missing":[{}]},"849":{"partial":false,"source":"  f = f.split(slashSplit)","missing":[{"startCol":6,"endCol":25},{}]},"850":{"partial":false,"source":"  if (options.debug) {","missing":[{}]},"851":{"partial":false,"source":"    console.error(this.pattern, \"split\", f)","missing":[{},{"startCol":4,"endCol":43}]},"852":{"partial":false,"source":"  }","missing":[{}]},"859":{"partial":false,"source":"  var set = this.set","missing":[{}]},"860":{"partial":false,"source":"  // console.error(this.pattern, \"set\", set)","missing":[{}]},"861":{"partial":false,"source":"","missing":[{}]},"862":{"partial":false,"source":"  for (var i = 0, l = set.length; i < l; i ++) {","missing":[{"startCol":34,"endCol":39},{"startCol":41,"endCol":45},{}]},"863":{"partial":false,"source":"    var pattern = set[i]","missing":[{}]},"864":{"partial":false,"source":"    var hit = this.matchOne(f, pattern, partial)","missing":[{"startCol":14,"endCol":48},{}]},"865":{"partial":false,"source":"    if (hit) {","missing":[{}]},"866":{"partial":false,"source":"      if (options.flipNegate) return true","missing":[{}]},"867":{"partial":false,"source":"      return !this.negate","missing":[{}]},"868":{"partial":false,"source":"    }","missing":[{}]},"873":{"partial":false,"source":"  if (options.flipNegate) return false","missing":[{}]},"874":{"partial":false,"source":"  return this.negate","missing":[{}]},"875":{"partial":false,"source":"}","missing":[{}]},"883":{"partial":false,"source":"  var options = this.options","missing":[{}]},"884":{"partial":false,"source":"","missing":[{}]},"885":{"partial":false,"source":"  if (options.debug) {","missing":[{}]},"886":{"partial":false,"source":"    console.error(\"matchOne\",","missing":[{}]},"887":{"partial":false,"source":"                  { \"this\": this","missing":[{}]},"888":{"partial":false,"source":"                  , file: file","missing":[{}]},"889":{"partial":false,"source":"                  , pattern: pattern })","missing":[{}]},"890":{"partial":false,"source":"  }","missing":[{}]},"892":{"partial":false,"source":"  if (options.matchBase && pattern.length === 1) {","missing":[{"startCol":6,"endCol":47},{"startCol":27,"endCol":47}]},"893":{"partial":false,"source":"    file = path.basename(file.join(\"/\")).split(\"/\")","missing":[{},{"startCol":11,"endCol":51},{"startCol":24,"endCol":40},{"startCol":25,"endCol":39}]},"894":{"partial":false,"source":"  }","missing":[{}]},"897":{"partial":false,"source":"    console.error(\"matchOne\", file.length, pattern.length)","missing":[{"startCol":4,"endCol":58},{}]},"898":{"partial":false,"source":"  }","missing":[{}]},"904":{"partial":false,"source":"      ; (fi < fl) && (pi < pl)","missing":[{"startCol":8,"endCol":17},{"startCol":21,"endCol":30}]},"905":{"partial":false,"source":"      ; fi ++, pi ++ ) {","missing":[{"startCol":8,"endCol":13},{"startCol":15,"endCol":20}]},"908":{"partial":false,"source":"      console.error(\"matchOne loop\")","missing":[{},{"startCol":6,"endCol":36}]},"909":{"partial":false,"source":"    }","missing":[{}]},"910":{"partial":false,"source":"    var p = pattern[pi]","missing":[{}]},"911":{"partial":false,"source":"      , f = file[fi]","missing":[{}]},"912":{"partial":false,"source":"","missing":[{}]},"913":{"partial":false,"source":"    if (options.debug) {","missing":[{}]},"914":{"partial":false,"source":"      console.error(pattern, p, f)","missing":[{"startCol":6,"endCol":34},{}]},"915":{"partial":false,"source":"    }","missing":[{}]},"919":{"partial":false,"source":"    if (p === false) return false","missing":[{},{"startCol":8,"endCol":19}]},"920":{"partial":false,"source":"","missing":[{}]},"921":{"partial":false,"source":"    if (p === GLOBSTAR) {","missing":[{"startCol":8,"endCol":22},{}]},"923":{"partial":false,"source":"        console.error('GLOBSTAR', [pattern, p, f])","missing":[{"startCol":8,"endCol":50},{}]},"924":{"partial":false,"source":"","missing":[{}]},"925":{"partial":false,"source":"      // \"**\"","missing":[{}]},"926":{"partial":false,"source":"      // a/**/b/**/c would match the following:","missing":[{}]},"927":{"partial":false,"source":"      // a/b/x/y/z/c","missing":[{}]},"928":{"partial":false,"source":"      // a/x/y/z/b/c","missing":[{}]},"929":{"partial":false,"source":"      // a/b/x/b/x/c","missing":[{}]},"930":{"partial":false,"source":"      // a/b/c","missing":[{}]},"931":{"partial":false,"source":"      // To do this, take the rest of the pattern after","missing":[{}]},"932":{"partial":false,"source":"      // the **, and see if it would match the file remainder.","missing":[{}]},"933":{"partial":false,"source":"      // If so, return success.","missing":[{}]},"934":{"partial":false,"source":"      // If not, the ** \"swallows\" a segment, and try again.","missing":[{}]},"935":{"partial":false,"source":"      // This is recursively awful.","missing":[{}]},"936":{"partial":false,"source":"      //","missing":[{}]},"937":{"partial":false,"source":"      // a/**/b/**/c matching a/b/x/y/z/c","missing":[{}]},"938":{"partial":false,"source":"      // - a matches a","missing":[{}]},"939":{"partial":false,"source":"      // - doublestar","missing":[{}]},"940":{"partial":false,"source":"      //   - matchOne(b/x/y/z/c, b/**/c)","missing":[{}]},"941":{"partial":false,"source":"      //     - b matches b","missing":[{}]},"942":{"partial":false,"source":"      //     - doublestar","missing":[{}]},"943":{"partial":false,"source":"      //       - matchOne(x/y/z/c, c) -> no","missing":[{}]},"944":{"partial":false,"source":"      //       - matchOne(y/z/c, c) -> no","missing":[{}]},"945":{"partial":false,"source":"      //       - matchOne(z/c, c) -> no","missing":[{}]},"946":{"partial":false,"source":"      //       - matchOne(c, c) yes, hit","missing":[{}]},"947":{"partial":false,"source":"      var fr = fi","missing":[{}]},"948":{"partial":false,"source":"        , pr = pi + 1","missing":[{"startCol":15,"endCol":21},{}]},"949":{"partial":false,"source":"      if (pr === pl) {","missing":[{},{"startCol":10,"endCol":19}]},"951":{"partial":false,"source":"          console.error('** at the end')","missing":[{"startCol":10,"endCol":40},{}]},"952":{"partial":false,"source":"        // a ** at the end will just swallow the rest.","missing":[{}]},"953":{"partial":false,"source":"        // We have found a match.","missing":[{}]},"954":{"partial":false,"source":"        // however, it will not swallow /.x, unless","missing":[{}]},"955":{"partial":false,"source":"        // options.dot is set.","missing":[{}]},"956":{"partial":false,"source":"        // . and .. are *never* matched by **, for explosively","missing":[{}]},"957":{"partial":false,"source":"        // exponential reasons.","missing":[{}]},"958":{"partial":false,"source":"        for ( ; fi < fl; fi ++) {","missing":[{},{"startCol":16,"endCol":23},{"startCol":25,"endCol":30}]},"959":{"partial":false,"source":"          if (file[fi] === \".\" || file[fi] === \"..\" ||","missing":[{"startCol":14,"endCol":30},{},{"startCol":34,"endCol":51}]},"960":{"partial":false,"source":"              (!options.dot && file[fi].charAt(0) === \".\")) return false","missing":[{},{"startCol":14,"endCol":58},{"startCol":31,"endCol":57}]},"961":{"partial":false,"source":"        }","missing":[{}]},"962":{"partial":false,"source":"        return true","missing":[{}]},"963":{"partial":false,"source":"      }","missing":[{}]},"966":{"partial":false,"source":"      WHILE: while (fr < fl) {","missing":[{"startCol":20,"endCol":27}]},"967":{"partial":false,"source":"        var swallowee = file[fr]","missing":[{}]},"968":{"partial":false,"source":"","missing":[{}]},"969":{"partial":false,"source":"        if (options.debug) {","missing":[{}]},"970":{"partial":false,"source":"          console.error('\\nglobstar while',","missing":[{}]},"971":{"partial":false,"source":"                        file, fr, pattern, pr, swallowee)","missing":[{}]},"972":{"partial":false,"source":"        }","missing":[{}]},"975":{"partial":false,"source":"        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {","missing":[{"startCol":12,"endCol":69},{"startCol":26,"endCol":40},{"startCol":42,"endCol":59}]},"977":{"partial":false,"source":"            console.error('globstar found match!', fr, fl, swallowee)","missing":[{"startCol":12,"endCol":69},{}]},"978":{"partial":false,"source":"          // found a match.","missing":[{}]},"979":{"partial":false,"source":"          return true","missing":[{}]},"980":{"partial":false,"source":"        } else {","missing":[{}]},"983":{"partial":false,"source":"          if (swallowee === \".\" || swallowee === \"..\" ||","missing":[{"startCol":14,"endCol":31},{},{"startCol":35,"endCol":53}]},"984":{"partial":false,"source":"              (!options.dot && swallowee.charAt(0) === \".\")) {","missing":[{"startCol":14,"endCol":59},{"startCol":31,"endCol":50},{}]},"986":{"partial":false,"source":"              console.error(\"dot detected!\", file, fr, pattern, pr)","missing":[{},{"startCol":14,"endCol":67}]},"987":{"partial":false,"source":"            break WHILE","missing":[{}]},"992":{"partial":false,"source":"            console.error('globstar swallow a segment, and continue')","missing":[{},{"startCol":12,"endCol":69}]},"993":{"partial":false,"source":"          fr ++","missing":[{},{"startCol":10,"endCol":15}]},"994":{"partial":false,"source":"        }","missing":[{}]},"1002":{"partial":false,"source":"        if (fr === fl) return true","missing":[{"startCol":12,"endCol":21},{}]},"1003":{"partial":false,"source":"      }","missing":[{}]},"1004":{"partial":false,"source":"      return false","missing":[{}]},"1005":{"partial":false,"source":"    }","missing":[{}]},"1010":{"partial":false,"source":"    var hit","missing":[{}]},"1011":{"partial":false,"source":"    if (typeof p === \"string\") {","missing":[{},{"startCol":8,"endCol":29}]},"1013":{"partial":false,"source":"        hit = f.toLowerCase() === p.toLowerCase()","missing":[{},{"startCol":14,"endCol":29},{"startCol":34,"endCol":49}]},"1014":{"partial":false,"source":"      } else {","missing":[{}]},"1015":{"partial":false,"source":"        hit = f === p","missing":[{},{"startCol":14,"endCol":21}]},"1016":{"partial":false,"source":"      }","missing":[{}]},"1018":{"partial":false,"source":"        console.error(\"string match\", p, f, hit)","missing":[{},{"startCol":8,"endCol":48}]},"1019":{"partial":false,"source":"      }","missing":[{}]},"1021":{"partial":false,"source":"      hit = f.match(p)","missing":[{},{"startCol":12,"endCol":22}]},"1022":{"partial":false,"source":"      if (options.debug) {","missing":[{}]},"1023":{"partial":false,"source":"        console.error(\"pattern match\", p, f, hit)","missing":[{"startCol":8,"endCol":49},{}]},"1024":{"partial":false,"source":"      }","missing":[{}]},"1027":{"partial":false,"source":"    if (!hit) return false","missing":[{}]},"1028":{"partial":false,"source":"  }","missing":[{}]},"1042":{"partial":false,"source":"  if (fi === fl && pi === pl) {","missing":[{"startCol":6,"endCol":15},{"startCol":19,"endCol":28}]},"1045":{"partial":false,"source":"    return true","missing":[{}]},"1046":{"partial":false,"source":"  } else if (fi === fl) {","missing":[{},{"startCol":13,"endCol":22}]},"1050":{"partial":false,"source":"    return partial","missing":[{}]},"1051":{"partial":false,"source":"  } else if (pi === pl) {","missing":[{"startCol":13,"endCol":22},{}]},"1056":{"partial":false,"source":"    var emptyFileEnd = (fi === fl - 1) && (file[fi] === \"\")","missing":[{},{"startCol":23,"endCol":38},{"startCol":31,"endCol":37},{"startCol":42,"endCol":59}]},"1057":{"partial":false,"source":"    return emptyFileEnd","missing":[{}]},"1058":{"partial":false,"source":"  }","missing":[{}]},"1061":{"partial":false,"source":"  throw new Error(\"wtf?\")","missing":[{}]},"1062":{"partial":false,"source":"}","missing":[{}]},"1072":{"partial":false,"source":"  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")","missing":[{},{"startCol":9,"endCol":54}]},"1073":{"partial":false,"source":"}","missing":[{}]},"1075":{"partial":true,"source":"})( typeof require === \"function\" ? require : null,","missing":[{"startCol":46,"endCol":50}]},"1077":{"partial":true,"source":"    typeof module === \"object\" ? module : null,","missing":[{"startCol":42,"endCol":46}]},"1078":{"partial":true,"source":"    typeof process === \"object\" ? process.platform : \"win32\"","missing":[{"startCol":53,"endCol":60}]}},"source":";(function (require, exports, module, platform) {\n\nif (module) module.exports = minimatch\nelse exports.minimatch = minimatch\n\nif (!require) {\n  require = function (id) {\n    switch (id) {\n      case \"sigmund\": return function sigmund (obj) {\n        return JSON.stringify(obj)\n      }\n      case \"path\": return { basename: function (f) {\n        f = f.split(/[\\/\\\\]/)\n        var e = f.pop()\n        if (!e) e = f.pop()\n        return e\n      }}\n      case \"lru-cache\": return function LRUCache () {\n        // not quite an LRU, but still space-limited.\n        var cache = {}\n        var cnt = 0\n        this.set = function (k, v) {\n          cnt ++\n          if (cnt >= 100) cache = {}\n          cache[k] = v\n        }\n        this.get = function (k) { return cache[k] }\n      }\n    }\n  }\n}\n\nminimatch.Minimatch = Minimatch\n\nvar LRU = require(\"lru-cache\")\n  , cache = minimatch.cache = new LRU({max: 100})\n  , GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\n  , sigmund = require(\"sigmund\")\n\nvar path = require(\"path\")\n  // any single thing other than /\n  // don't need to escape / when using new RegExp()\n  , qmark = \"[^/]\"\n\n  // * => any number of characters\n  , star = qmark + \"*?\"\n\n  // ** when dots are allowed.  Anything goes, except .. and .\n  // not (^ or / followed by one or two dots followed by $ or /),\n  // followed by anything, any number of times.\n  , twoStarDot = \"(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?\"\n\n  // not a ^ or / followed by a dot,\n  // followed by anything, any number of times.\n  , twoStarNoDot = \"(?:(?!(?:\\\\\\/|^)\\\\.).)*?\"\n\n  // characters that need to be escaped in RegExp.\n  , reSpecials = charSet(\"().*{}+?[]^$\\\\!\")\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split(\"\").reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.monkeyPatch = monkeyPatch\nfunction monkeyPatch () {\n  var desc = Object.getOwnPropertyDescriptor(String.prototype, \"match\")\n  var orig = desc.value\n  desc.value = function (p) {\n    if (p instanceof Minimatch) return p.match(this)\n    return orig.call(this, p)\n  }\n  Object.defineProperty(String.prototype, desc)\n}\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  a = a || {}\n  b = b || {}\n  var t = {}\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return minimatch\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig.minimatch(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return Minimatch\n  return minimatch.defaults(def).Minimatch\n}\n\n\nfunction minimatch (p, pattern, options) {\n  if (typeof pattern !== \"string\") {\n    throw new TypeError(\"glob pattern string required\")\n  }\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === \"#\") {\n    return false\n  }\n\n  // \"\" only matches \"\"\n  if (pattern.trim() === \"\") return p === \"\"\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options, cache)\n  }\n\n  if (typeof pattern !== \"string\") {\n    throw new TypeError(\"glob pattern string required\")\n  }\n\n  if (!options) options = {}\n  pattern = pattern.trim()\n\n  // windows: need to use /, not \\\n  // On other platforms, \\ is a valid (albeit bad) filename char.\n  if (platform === \"win32\") {\n    pattern = pattern.split(\"\\\\\").join(\"/\")\n  }\n\n  // lru storage.\n  // these things aren't particularly big, but walking down the string\n  // and turning it into a regexp can get pretty costly.\n  var cacheKey = pattern + \"\\n\" + sigmund(options)\n  var cached = minimatch.cache.get(cacheKey)\n  if (cached) return cached\n  minimatch.cache.set(cacheKey, this)\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.make = make\nfunction make () {\n  // don't do it more than once.\n  if (this._made) return\n\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === \"#\") {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) console.error(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  if (options.debug) console.error(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  if (options.debug) console.error(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return -1 === s.indexOf(false)\n  })\n\n  if (options.debug) console.error(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n    , negate = false\n    , options = this.options\n    , negateOffset = 0\n\n  if (options.nonegate) return\n\n  for ( var i = 0, l = pattern.length\n      ; i < l && pattern.charAt(i) === \"!\"\n      ; i ++) {\n    negate = !negate\n    negateOffset ++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return new Minimatch(pattern, options).braceExpand()\n}\n\nMinimatch.prototype.braceExpand = braceExpand\nfunction braceExpand (pattern, options) {\n  options = options || this.options\n  pattern = typeof pattern === \"undefined\"\n    ? this.pattern : pattern\n\n  if (typeof pattern === \"undefined\") {\n    throw new Error(\"undefined pattern\")\n  }\n\n  if (options.nobrace ||\n      !pattern.match(/\\{.*\\}/)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  var escaping = false\n\n  // examples and comments refer to this crazy pattern:\n  // a{b,c{d,e},{f,g}h}x{y,z}\n  // expected:\n  // abxy\n  // abxz\n  // acdxy\n  // acdxz\n  // acexy\n  // acexz\n  // afhxy\n  // afhxz\n  // aghxy\n  // aghxz\n\n  // everything before the first \\{ is just a prefix.\n  // So, we pluck that off, and work with the rest,\n  // and then prepend it to everything we find.\n  if (pattern.charAt(0) !== \"{\") {\n    // console.error(pattern)\n    var prefix = null\n    for (var i = 0, l = pattern.length; i < l; i ++) {\n      var c = pattern.charAt(i)\n      // console.error(i, c)\n      if (c === \"\\\\\") {\n        escaping = !escaping\n      } else if (c === \"{\" && !escaping) {\n        prefix = pattern.substr(0, i)\n        break\n      }\n    }\n\n    // actually no sets, all { were escaped.\n    if (prefix === null) {\n      // console.error(\"no sets\")\n      return [pattern]\n    }\n\n    var tail = braceExpand(pattern.substr(i), options)\n    return tail.map(function (t) {\n      return prefix + t\n    })\n  }\n\n  // now we have something like:\n  // {b,c{d,e},{f,g}h}x{y,z}\n  // walk through the set, expanding each part, until\n  // the set ends.  then, we'll expand the suffix.\n  // If the set only has a single member, then'll put the {} back\n\n  // first, handle numeric sets, since they're easier\n  var numset = pattern.match(/^\\{(-?[0-9]+)\\.\\.(-?[0-9]+)\\}/)\n  if (numset) {\n    // console.error(\"numset\", numset[1], numset[2])\n    var suf = braceExpand(pattern.substr(numset[0].length), options)\n      , start = +numset[1]\n      , end = +numset[2]\n      , inc = start > end ? -1 : 1\n      , set = []\n    for (var i = start; i != (end + inc); i += inc) {\n      // append all the suffixes\n      for (var ii = 0, ll = suf.length; ii < ll; ii ++) {\n        set.push(i + suf[ii])\n      }\n    }\n    return set\n  }\n\n  // ok, walk through the set\n  // We hope, somewhat optimistically, that there\n  // will be a } at the end.\n  // If the closing brace isn't found, then the pattern is\n  // interpreted as braceExpand(\"\\\\\" + pattern) so that\n  // the leading \\{ will be interpreted literally.\n  var i = 1 // skip the \\{\n    , depth = 1\n    , set = []\n    , member = \"\"\n    , sawEnd = false\n    , escaping = false\n\n  function addMember () {\n    set.push(member)\n    member = \"\"\n  }\n\n  // console.error(\"Entering for\")\n  FOR: for (i = 1, l = pattern.length; i < l; i ++) {\n    var c = pattern.charAt(i)\n    // console.error(\"\", i, c)\n\n    if (escaping) {\n      escaping = false\n      member += \"\\\\\" + c\n    } else {\n      switch (c) {\n        case \"\\\\\":\n          escaping = true\n          continue\n\n        case \"{\":\n          depth ++\n          member += \"{\"\n          continue\n\n        case \"}\":\n          depth --\n          // if this closes the actual set, then we're done\n          if (depth === 0) {\n            addMember()\n            // pluck off the close-brace\n            i ++\n            break FOR\n          } else {\n            member += c\n            continue\n          }\n\n        case \",\":\n          if (depth === 1) {\n            addMember()\n          } else {\n            member += c\n          }\n          continue\n\n        default:\n          member += c\n          continue\n      } // switch\n    } // else\n  } // for\n\n  // now we've either finished the set, and the suffix is\n  // pattern.substr(i), or we have *not* closed the set,\n  // and need to escape the leading brace\n  if (depth !== 0) {\n    // console.error(\"didn't close\", pattern)\n    return braceExpand(\"\\\\\" + pattern, options)\n  }\n\n  // x{y,z} -> [\"xy\", \"xz\"]\n  // console.error(\"set\", set)\n  // console.error(\"suffix\", pattern.substr(i))\n  var suf = braceExpand(pattern.substr(i), options)\n  // [\"b\", \"c{d,e}\",\"{f,g}h\"] ->\n  //   [[\"b\"], [\"cd\", \"ce\"], [\"fh\", \"gh\"]]\n  var addBraces = set.length === 1\n  // console.error(\"set pre-expanded\", set)\n  set = set.map(function (p) {\n    return braceExpand(p, options)\n  })\n  // console.error(\"set expanded\", set)\n\n\n  // [[\"b\"], [\"cd\", \"ce\"], [\"fh\", \"gh\"]] ->\n  //   [\"b\", \"cd\", \"ce\", \"fh\", \"gh\"]\n  set = set.reduce(function (l, r) {\n    return l.concat(r)\n  })\n\n  if (addBraces) {\n    set = set.map(function (s) {\n      return \"{\" + s + \"}\"\n    })\n  }\n\n  // now attach the suffixes.\n  var ret = []\n  for (var i = 0, l = set.length; i < l; i ++) {\n    for (var ii = 0, ll = suf.length; ii < ll; ii ++) {\n      ret.push(set[i] + suf[ii])\n    }\n  }\n  return ret\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  var options = this.options\n\n  // shortcuts\n  if (!options.noglobstar && pattern === \"**\") return GLOBSTAR\n  if (pattern === \"\") return \"\"\n\n  var re = \"\"\n    , hasMagic = false\n    , escaping = false\n    // ? => one single character\n    , patternListStack = []\n    , plType\n    , stateChar\n    , inClass = false\n    , reClassStart = -1\n    , classStart = -1\n    // . and .. never match anything that doesn't start with .,\n    // even when options.dot is set.\n    , patternStart = pattern.charAt(0) === \".\" ? \"\" // anything\n      // not (start or / followed by . or .. followed by / or end)\n      : options.dot ? \"(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))\"\n      : \"(?!\\\\.)\"\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case \"*\":\n          re += star\n          hasMagic = true\n          break\n        case \"?\":\n          re += qmark\n          hasMagic = true\n          break\n        default:\n          re += \"\\\\\"+stateChar\n          break\n      }\n      stateChar = false\n    }\n  }\n\n  for ( var i = 0, len = pattern.length, c\n      ; (i < len) && (c = pattern.charAt(i))\n      ; i ++ ) {\n\n    if (options.debug) {\n      console.error(\"%s\\t%s %s %j\", pattern, i, re, c)\n    }\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += \"\\\\\" + c\n      escaping = false\n      continue\n    }\n\n    SWITCH: switch (c) {\n      case \"/\":\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n\n      case \"\\\\\":\n        clearStateChar()\n        escaping = true\n        continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case \"?\":\n      case \"*\":\n      case \"+\":\n      case \"@\":\n      case \"!\":\n        if (options.debug) {\n          console.error(\"%s\\t%s %s %j <-- stateChar\", pattern, i, re, c)\n        }\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          if (c === \"!\" && i === classStart + 1) c = \"^\"\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n        continue\n\n      case \"(\":\n        if (inClass) {\n          re += \"(\"\n          continue\n        }\n\n        if (!stateChar) {\n          re += \"\\\\(\"\n          continue\n        }\n\n        plType = stateChar\n        patternListStack.push({ type: plType\n                              , start: i - 1\n                              , reStart: re.length })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === \"!\" ? \"(?:(?!\" : \"(?:\"\n        stateChar = false\n        continue\n\n      case \")\":\n        if (inClass || !patternListStack.length) {\n          re += \"\\\\)\"\n          continue\n        }\n\n        hasMagic = true\n        re += \")\"\n        plType = patternListStack.pop().type\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        switch (plType) {\n          case \"!\":\n            re += \"[^/]*?)\"\n            break\n          case \"?\":\n          case \"+\":\n          case \"*\": re += plType\n          case \"@\": break // the default anyway\n        }\n        continue\n\n      case \"|\":\n        if (inClass || !patternListStack.length || escaping) {\n          re += \"\\\\|\"\n          escaping = false\n          continue\n        }\n\n        re += \"|\"\n        continue\n\n      // these are mostly the same in regexp and glob\n      case \"[\":\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += \"\\\\\" + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n        continue\n\n      case \"]\":\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += \"\\\\\" + c\n          escaping = false\n          continue\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n        continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n                   && !(c === \"^\" && inClass)) {\n          re += \"\\\\\"\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    var cs = pattern.substr(classStart + 1)\n      , sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + \"\\\\[\" + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  var pl\n  while (pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + 3)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2})*)(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = \"\\\\\"\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + \"|\"\n    })\n\n    // console.error(\"tail=%j\\n   %s\", tail, tail)\n    var t = pl.type === \"*\" ? star\n          : pl.type === \"?\" ? qmark\n          : \"\\\\\" + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart)\n       + t + \"\\\\(\"\n       + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += \"\\\\\\\\\"\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case \".\":\n    case \"[\":\n    case \"(\": addPatternStart = true\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== \"\" && hasMagic) re = \"(?=.)\" + re\n\n  if (addPatternStart) re = patternStart + re\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [ re, hasMagic ]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? \"i\" : \"\"\n    , regExp = new RegExp(\"^\" + re + \"$\", flags)\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) return this.regexp = false\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n      : options.dot ? twoStarDot\n      : twoStarNoDot\n    , flags = options.nocase ? \"i\" : \"\"\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n           : (typeof p === \"string\") ? regExpEscape(p)\n           : p._src\n    }).join(\"\\\\\\/\")\n  }).join(\"|\")\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = \"^\" + re + \"$\"\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = \"^(?!\" + re + \").*$\"\n\n  try {\n    return this.regexp = new RegExp(re, flags)\n  } catch (ex) {\n    return this.regexp = false\n  }\n}\n\nminimatch.match = function (list, pattern, options) {\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = match\nfunction match (f, partial) {\n  // console.error(\"match\", f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === \"\"\n\n  if (f === \"/\" && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  // On other platforms, \\ is a valid (albeit bad) filename char.\n  if (platform === \"win32\") {\n    f = f.split(\"\\\\\").join(\"/\")\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  if (options.debug) {\n    console.error(this.pattern, \"split\", f)\n  }\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  // console.error(this.pattern, \"set\", set)\n\n  for (var i = 0, l = set.length; i < l; i ++) {\n    var pattern = set[i]\n    var hit = this.matchOne(f, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  if (options.debug) {\n    console.error(\"matchOne\",\n                  { \"this\": this\n                  , file: file\n                  , pattern: pattern })\n  }\n\n  if (options.matchBase && pattern.length === 1) {\n    file = path.basename(file.join(\"/\")).split(\"/\")\n  }\n\n  if (options.debug) {\n    console.error(\"matchOne\", file.length, pattern.length)\n  }\n\n  for ( var fi = 0\n          , pi = 0\n          , fl = file.length\n          , pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi ++, pi ++ ) {\n\n    if (options.debug) {\n      console.error(\"matchOne loop\")\n    }\n    var p = pattern[pi]\n      , f = file[fi]\n\n    if (options.debug) {\n      console.error(pattern, p, f)\n    }\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      if (options.debug)\n        console.error('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n        , pr = pi + 1\n      if (pr === pl) {\n        if (options.debug)\n          console.error('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for ( ; fi < fl; fi ++) {\n          if (file[fi] === \".\" || file[fi] === \"..\" ||\n              (!options.dot && file[fi].charAt(0) === \".\")) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      WHILE: while (fr < fl) {\n        var swallowee = file[fr]\n\n        if (options.debug) {\n          console.error('\\nglobstar while',\n                        file, fr, pattern, pr, swallowee)\n        }\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          if (options.debug)\n            console.error('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === \".\" || swallowee === \"..\" ||\n              (!options.dot && swallowee.charAt(0) === \".\")) {\n            if (options.debug)\n              console.error(\"dot detected!\", file, fr, pattern, pr)\n            break WHILE\n          }\n\n          // ** swallows a segment, and continue.\n          if (options.debug)\n            console.error('globstar swallow a segment, and continue')\n          fr ++\n        }\n      }\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then \n      if (partial) {\n        // ran out of file\n        // console.error(\"\\n>>> no match, partial?\", file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === \"string\") {\n      if (options.nocase) {\n        hit = f.toLowerCase() === p.toLowerCase()\n      } else {\n        hit = f === p\n      }\n      if (options.debug) {\n        console.error(\"string match\", p, f, hit)\n      }\n    } else {\n      hit = f.match(p)\n      if (options.debug) {\n        console.error(\"pattern match\", p, f, hit)\n      }\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === \"\")\n    return emptyFileEnd\n  }\n\n  // should be unreachable.\n  throw new Error(\"wtf?\")\n}\n\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, \"$1\")\n}\n\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")\n}\n\n})( typeof require === \"function\" ? require : null,\n    this,\n    typeof module === \"object\" ? module : null,\n    typeof process === \"object\" ? process.platform : \"win32\"\n  )","blocks":{"total":196,"seen":37,"missing":159,"percentage":0.18877551020408162}},"hash":"b577b8794acddcfe40e95df80b14a6da"},"/usr/local/lib/node_modules/grunt-cli/node_modules/glob/node_modules/minimatch/node_modules/lru-cache/lib/lru-cache.js":{"stats":{"percentage":0.680628272251309,"lines":[{"lineno":7},{"lineno":18},{"lineno":23},{"lineno":24},{"lineno":28},{"lineno":33},{"lineno":37},{"lineno":54},{"lineno":55},{"lineno":58},{"lineno":60},{"lineno":67},{"lineno":68},{"lineno":69},{"lineno":71},{"lineno":74},{"lineno":75},{"lineno":77},{"lineno":78},{"lineno":82},{"lineno":84},{"lineno":89},{"lineno":95},{"lineno":102},{"lineno":105},{"lineno":106},{"lineno":107},{"lineno":108},{"lineno":109},{"lineno":115},{"lineno":121},{"lineno":122},{"lineno":123},{"lineno":124},{"lineno":125},{"lineno":129},{"lineno":134},{"lineno":135},{"lineno":142},{"lineno":148},{"lineno":149},{"lineno":150},{"lineno":151},{"lineno":153},{"lineno":154},{"lineno":155},{"lineno":156},{"lineno":160},{"lineno":161},{"lineno":162},{"lineno":163},{"lineno":164},{"lineno":165},{"lineno":166},{"lineno":170},{"lineno":172},{"lineno":173},{"lineno":174},{"lineno":175},{"lineno":176},{"lineno":177}],"missing":61,"seen":130,"total":191,"coverage":{"7":{"partial":false,"source":"  this.LRUCache = LRUCache","missing":[{}]},"8":{"partial":false,"source":"}","missing":[{}]},"18":{"partial":false,"source":"    return new LRUCache(options)","missing":[{}]},"19":{"partial":false,"source":"  }","missing":[{}]},"23":{"partial":false,"source":"    max = options","missing":[{}]},"24":{"partial":false,"source":"    options = { max: max }","missing":[{}]},"25":{"partial":false,"source":"  }","missing":[{}]},"28":{"partial":false,"source":"  if (!options) options = {}","missing":[{}]},"29":{"partial":false,"source":"","missing":[{}]},"30":{"partial":true,"source":"  var lengthCalculator = options.length || naiveLength","missing":[{}]},"33":{"partial":false,"source":"    lengthCalculator = naiveLength","missing":[{}]},"34":{"partial":false,"source":"  }","missing":[{}]},"37":{"partial":false,"source":"    max = Infinity","missing":[{}]},"38":{"partial":false,"source":"  }","missing":[{}]},"54":{"partial":false,"source":"        if (!mL || !(typeof mL === \"number\") || mL <= 0 ) mL = Infinity","missing":[{"startCol":20,"endCol":44},{},{"startCol":12,"endCol":44},{"startCol":48,"endCol":55}]},"55":{"partial":false,"source":"        max = mL","missing":[{}]},"56":{"partial":false,"source":"        // if it gets above double max, trim right away.","missing":[{}]},"57":{"partial":false,"source":"        // otherwise, do it whenever it's convenient.","missing":[{}]},"58":{"partial":false,"source":"        if (length > max) trim()","missing":[{"startCol":12,"endCol":24},{},{"startCol":26,"endCol":32}]},"59":{"partial":false,"source":"      }","missing":[{}]},"60":{"partial":false,"source":"    , get : function () { return max }","missing":[{"startCol":26,"endCol":37}]},"67":{"partial":false,"source":"        if (typeof lC !== \"function\") {","missing":[{"startCol":12,"endCol":36}]},"68":{"partial":false,"source":"          lengthCalculator = naiveLength","missing":[{}]},"69":{"partial":false,"source":"          length = itemCount","missing":[{}]},"70":{"partial":false,"source":"          for (var key in cache) {","missing":[{}]},"71":{"partial":false,"source":"            cache[key].length = 1","missing":[{}]},"72":{"partial":false,"source":"          }","missing":[{}]},"74":{"partial":false,"source":"          lengthCalculator = lC","missing":[{}]},"75":{"partial":false,"source":"          length = 0","missing":[{}]},"76":{"partial":false,"source":"          for (var key in cache) {","missing":[{}]},"77":{"partial":false,"source":"            cache[key].length = lengthCalculator(cache[key].value)","missing":[{},{"startCol":32,"endCol":66}]},"78":{"partial":false,"source":"            length += cache[key].length","missing":[{}]},"79":{"partial":false,"source":"          }","missing":[{}]},"82":{"partial":false,"source":"        if (length > max) trim()","missing":[{"startCol":12,"endCol":24},{},{"startCol":26,"endCol":32}]},"83":{"partial":false,"source":"      }","missing":[{}]},"84":{"partial":false,"source":"    , get : function () { return lengthCalculator }","missing":[{"startCol":26,"endCol":50}]},"89":{"partial":false,"source":"    { get : function () { return length }","missing":[{"startCol":26,"endCol":40}]},"95":{"partial":false,"source":"    { get : function () { return itemCount }","missing":[{"startCol":26,"endCol":43}]},"102":{"partial":false,"source":"        dispose(k, cache[k].value)","missing":[{"startCol":8,"endCol":34},{}]},"103":{"partial":false,"source":"      }","missing":[{}]},"105":{"partial":false,"source":"    cache = {}","missing":[{}]},"106":{"partial":false,"source":"    lruList = {}","missing":[{}]},"107":{"partial":false,"source":"    mru = 0","missing":[{}]},"108":{"partial":false,"source":"    length = 0","missing":[{}]},"109":{"partial":false,"source":"    itemCount = 0","missing":[{}]},"110":{"partial":false,"source":"  }","missing":[{}]},"115":{"partial":false,"source":"    return cache","missing":[{}]},"116":{"partial":false,"source":"  }","missing":[{}]},"121":{"partial":false,"source":"      if (dispose) dispose(key, cache[key].value)","missing":[{},{"startCol":19,"endCol":49}]},"122":{"partial":false,"source":"      if (maxAge) cache[key].now = Date.now()","missing":[{},{"startCol":35,"endCol":45}]},"123":{"partial":false,"source":"      cache[key].value = value","missing":[{}]},"124":{"partial":false,"source":"      this.get(key)","missing":[{"startCol":6,"endCol":19},{}]},"125":{"partial":false,"source":"      return true","missing":[{}]},"126":{"partial":false,"source":"    }","missing":[{}]},"129":{"partial":true,"source":"    var age = maxAge ? Date.now() : 0","missing":[{"startCol":23,"endCol":33}]},"134":{"partial":false,"source":"      if (dispose) dispose(key, value)","missing":[{},{"startCol":19,"endCol":38}]},"135":{"partial":false,"source":"      return false","missing":[{}]},"136":{"partial":false,"source":"    }","missing":[{}]},"142":{"partial":true,"source":"    if (length > max) trim()","missing":[{"startCol":22,"endCol":28},{}]},"143":{"partial":true,"source":"    return true","missing":[{}]},"148":{"partial":false,"source":"    var hit = cache[key]","missing":[{}]},"149":{"partial":false,"source":"    if (maxAge && (Date.now() - hit.now > maxAge)) {","missing":[{"startCol":8,"endCol":49},{"startCol":19,"endCol":29},{},{"startCol":18,"endCol":49}]},"150":{"partial":false,"source":"      this.del(key)","missing":[{},{"startCol":6,"endCol":19}]},"151":{"partial":false,"source":"      return","missing":[{},{"startCol":6,"endCol":12}]},"153":{"partial":false,"source":"    delete lruList[hit.lu]","missing":[{}]},"154":{"partial":false,"source":"    hit.lu = mru ++","missing":[{},{"startCol":13,"endCol":19}]},"155":{"partial":false,"source":"    lruList[hit.lu] = hit","missing":[{}]},"156":{"partial":false,"source":"    return hit.value","missing":[{}]},"157":{"partial":false,"source":"  }","missing":[{}]},"160":{"partial":false,"source":"    if (!hOP(cache, key)) return","missing":[{"startCol":9,"endCol":24},{"startCol":26,"endCol":32}]},"161":{"partial":false,"source":"    var hit = cache[key]","missing":[{}]},"162":{"partial":false,"source":"    if (dispose) dispose(key, hit.value)","missing":[{"startCol":17,"endCol":40},{}]},"163":{"partial":false,"source":"    delete cache[key]","missing":[{}]},"164":{"partial":false,"source":"    delete lruList[hit.lu]","missing":[{}]},"165":{"partial":false,"source":"    length -= hit.length","missing":[{}]},"166":{"partial":false,"source":"    itemCount --","missing":[{},{"startCol":4,"endCol":16}]},"167":{"partial":false,"source":"  }","missing":[{}]},"170":{"partial":false,"source":"    if (length <= max) return","missing":[{"startCol":8,"endCol":21},{"startCol":23,"endCol":29}]},"172":{"partial":false,"source":"      if (length <= max) break;","missing":[{"startCol":10,"endCol":23}]},"173":{"partial":false,"source":"      var hit = lruList[k]","missing":[{}]},"174":{"partial":false,"source":"      if (dispose) dispose(hit.key, hit.value)","missing":[{"startCol":19,"endCol":46},{}]},"175":{"partial":false,"source":"      length -= hit.length","missing":[{}]},"176":{"partial":false,"source":"      delete cache[ hit.key ]","missing":[{}]},"177":{"partial":false,"source":"      delete lruList[k]","missing":[{}]},"178":{"partial":false,"source":"    }","missing":[{}]}},"source":";(function () { // closure for web browsers\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = LRUCache\n} else {\n  // just set the global for non-node platforms.\n  this.LRUCache = LRUCache\n}\n\nfunction hOP (obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key)\n}\n\nfunction naiveLength () { return 1 }\n\nfunction LRUCache (options) {\n  if (!(this instanceof LRUCache)) {\n    return new LRUCache(options)\n  }\n\n  var max\n  if (typeof options === 'number') {\n    max = options\n    options = { max: max }\n  }\n  max = options.max\n\n  if (!options) options = {}\n\n  var lengthCalculator = options.length || naiveLength\n\n  if (typeof lengthCalculator !== \"function\") {\n    lengthCalculator = naiveLength\n  }\n  if (!max || !(typeof max === \"number\") || max <= 0 ) {\n    // a little bit silly.  maybe this should throw?\n    max = Infinity\n  }\n\n  var maxAge = options.maxAge || null\n\n  var dispose = options.dispose\n\n  var cache = Object.create(null) // hash of items by key\n    , lruList = Object.create(null) // list of items in order of use recency\n    , mru = 0 // most recently used\n    , length = 0 // number of items in the list\n    , itemCount = 0\n\n\n  // resize the cache when the max changes.\n  Object.defineProperty(this, \"max\",\n    { set : function (mL) {\n        if (!mL || !(typeof mL === \"number\") || mL <= 0 ) mL = Infinity\n        max = mL\n        // if it gets above double max, trim right away.\n        // otherwise, do it whenever it's convenient.\n        if (length > max) trim()\n      }\n    , get : function () { return max }\n    , enumerable : true\n    })\n\n  // resize the cache when the lengthCalculator changes.\n  Object.defineProperty(this, \"lengthCalculator\",\n    { set : function (lC) {\n        if (typeof lC !== \"function\") {\n          lengthCalculator = naiveLength\n          length = itemCount\n          for (var key in cache) {\n            cache[key].length = 1\n          }\n        } else {\n          lengthCalculator = lC\n          length = 0\n          for (var key in cache) {\n            cache[key].length = lengthCalculator(cache[key].value)\n            length += cache[key].length\n          }\n        }\n\n        if (length > max) trim()\n      }\n    , get : function () { return lengthCalculator }\n    , enumerable : true\n    })\n\n  Object.defineProperty(this, \"length\",\n    { get : function () { return length }\n    , enumerable : true\n    })\n\n\n  Object.defineProperty(this, \"itemCount\",\n    { get : function () { return itemCount }\n    , enumerable : true\n    })\n\n  this.reset = function () {\n    if (dispose) {\n      for (var k in cache) {\n        dispose(k, cache[k].value)\n      }\n    }\n    cache = {}\n    lruList = {}\n    mru = 0\n    length = 0\n    itemCount = 0\n  }\n\n  // Provided for debugging/dev purposes only. No promises whatsoever that\n  // this API stays stable.\n  this.dump = function () {\n    return cache\n  }\n\n  this.set = function (key, value) {\n    if (hOP(cache, key)) {\n      // dispose of the old one before overwriting\n      if (dispose) dispose(key, cache[key].value)\n      if (maxAge) cache[key].now = Date.now()\n      cache[key].value = value\n      this.get(key)\n      return true\n    }\n\n    var len = lengthCalculator(value)\n    var age = maxAge ? Date.now() : 0\n    var hit = new Entry(key, value, mru++, len, age)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > max) {\n      if (dispose) dispose(key, value)\n      return false\n    }\n\n    length += hit.length\n    lruList[hit.lu] = cache[key] = hit\n    itemCount ++\n\n    if (length > max) trim()\n    return true\n  }\n\n  this.get = function (key) {\n    if (!hOP(cache, key)) return\n    var hit = cache[key]\n    if (maxAge && (Date.now() - hit.now > maxAge)) {\n      this.del(key)\n      return\n    }\n    delete lruList[hit.lu]\n    hit.lu = mru ++\n    lruList[hit.lu] = hit\n    return hit.value\n  }\n\n  this.del = function (key) {\n    if (!hOP(cache, key)) return\n    var hit = cache[key]\n    if (dispose) dispose(key, hit.value)\n    delete cache[key]\n    delete lruList[hit.lu]\n    length -= hit.length\n    itemCount --\n  }\n\n  function trim () {\n    if (length <= max) return\n    for (var k in lruList) {\n      if (length <= max) break;\n      var hit = lruList[k]\n      if (dispose) dispose(hit.key, hit.value)\n      length -= hit.length\n      delete cache[ hit.key ]\n      delete lruList[k]\n    }\n  }\n}\n\n// classy, since V8 prefers predictable objects.\nfunction Entry (key, value, mru, len, age) {\n  this.key = key\n  this.value = value\n  this.lu = mru\n  this.length = len\n  this.now = age\n}\n\n})()","blocks":{"total":47,"seen":9,"missing":38,"percentage":0.19148936170212766}},"hash":"b3070e0938a8e24eb263e0ab780fbf6d"},"/usr/local/lib/node_modules/grunt-cli/node_modules/glob/node_modules/minimatch/node_modules/sigmund/sigmund.js":{"stats":{"percentage":0.8717948717948718,"lines":[{"lineno":9},{"lineno":13},{"lineno":22},{"lineno":28},{"lineno":30}],"missing":5,"seen":34,"total":39,"coverage":{"9":{"partial":true,"source":"        if (session > maxSessions) return;","missing":[{"startCol":35,"endCol":42}]},"13":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"22":{"partial":true,"source":"        if (notes.indexOf(subject) !== -1 || session === maxSessions) return;","missing":[{"startCol":70,"endCol":77}]},"28":{"partial":true,"source":"            if (issue.charAt(0) === '_') return;","missing":[{"startCol":41,"endCol":48}]},"30":{"partial":true,"source":"            if (to === 'function' || to === 'undefined') return;","missing":[{"startCol":57,"endCol":64}]}},"source":"module.exports = sigmund\nfunction sigmund (subject, maxSessions) {\n    maxSessions = maxSessions || 10;\n    var notes = [];\n    var analysis = '';\n    var RE = RegExp;\n\n    function psychoAnalyze (subject, session) {\n        if (session > maxSessions) return;\n\n        if (typeof subject === 'function' ||\n            typeof subject === 'undefined') {\n            return;\n        }\n\n        if (typeof subject !== 'object' || !subject ||\n            (subject instanceof RE)) {\n            analysis += subject;\n            return;\n        }\n\n        if (notes.indexOf(subject) !== -1 || session === maxSessions) return;\n\n        notes.push(subject);\n        analysis += '{';\n        Object.keys(subject).forEach(function (issue, _, __) {\n            // pseudo-private values.  skip those.\n            if (issue.charAt(0) === '_') return;\n            var to = typeof subject[issue];\n            if (to === 'function' || to === 'undefined') return;\n            analysis += issue;\n            psychoAnalyze(subject[issue], session + 1);\n        });\n    }\n    psychoAnalyze(subject, 0);\n    return analysis;\n}\n\n// vim: set softtabstop=4 shiftwidth=4:","blocks":{"total":9,"seen":4,"missing":5,"percentage":0.4444444444444444}},"hash":"0670d2bd15f4b994717188e3b459999f"},"/usr/local/lib/node_modules/grunt-cli/node_modules/glob/node_modules/inherits/inherits.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":29,"total":29,"coverage":{},"source":"module.exports = inherits\n\nfunction inherits (c, p, proto) {\n  proto = proto || {}\n  var e = {}\n  ;[c.prototype, proto].forEach(function (s) {\n    Object.getOwnPropertyNames(s).forEach(function (k) {\n      e[k] = Object.getOwnPropertyDescriptor(s, k)\n    })\n  })\n  c.prototype = Object.create(p.prototype, e)\n  c.super = p\n}\n\n//function Child () {\n//  Child.super.call(this)\n//  console.error([this\n//                ,this.constructor\n//                ,this.constructor === Child\n//                ,this.constructor.super === Parent\n//                ,Object.getPrototypeOf(this) === Child.prototype\n//                ,Object.getPrototypeOf(Object.getPrototypeOf(this))\n//                 === Parent.prototype\n//                ,this instanceof Child\n//                ,this instanceof Parent])\n//}\n//function Parent () {}\n//inherits(Child, Parent)\n//new Child","blocks":{"total":3,"seen":3,"missing":0,"percentage":1}},"hash":"4c245eeca5ebc2b3a40df7123c1a9f88"},"/usr/local/lib/node_modules/grunt-cli/node_modules/findup-sync/lib/findup-sync.js":{"stats":{"percentage":0.9130434782608695,"lines":[{"lineno":39},{"lineno":40},{"lineno":42},{"lineno":45}],"missing":4,"seen":42,"total":46,"coverage":{"39":{"partial":false,"source":"    lastpath = globOptions.cwd;","missing":[{"startCol":4,"endCol":31}]},"40":{"partial":false,"source":"    globOptions.cwd = path.resolve(globOptions.cwd, '..');","missing":[{"startCol":4,"endCol":58},{"startCol":22,"endCol":57}]},"42":{"partial":false,"source":"  } while (globOptions.cwd !== lastpath);","missing":[{"startCol":11,"endCol":39}]},"45":{"partial":false,"source":"  return null;","missing":[{"startCol":2,"endCol":14}]}},"source":"/*\n * findup-sync\n * https://github.com/cowboy/node-findup-sync\n *\n * Copyright (c) 2012 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n// Nodejs libs.\nvar path = require('path');\n\n// External libs.\nvar glob = require('glob');\nvar _ = require('lodash');\n\n// Search for a filename in the given directory or all parent directories.\nmodule.exports = function(patterns, options) {\n  // Normalize patterns to an array.\n  if (!Array.isArray(patterns)) { patterns = [patterns]; }\n  // Create globOptions so that it can be modified without mutating the\n  // original object.\n  var globOptions = Object.create(options);\n  globOptions.maxDepth = 1;\n  globOptions.cwd = path.resolve(globOptions.cwd);\n\n  var files, lastpath;\n  do {\n    // Search for files matching patterns.\n    files = _.chain(patterns).map(function(pattern) {\n      return glob.sync(pattern, globOptions);\n    }).flatten().uniq().value();\n    // Return file if found.\n    if (files.length > 0) {\n      return path.resolve(path.join(globOptions.cwd, files[0]));\n    }\n    // Go up a directory.\n    lastpath = globOptions.cwd;\n    globOptions.cwd = path.resolve(globOptions.cwd, '..');\n  // If parentpath is the same as basedir, we can't go any higher.\n  } while (globOptions.cwd !== lastpath);\n\n  // No files were found!\n  return null;\n};","blocks":{"total":5,"seen":5,"missing":0,"percentage":1}},"hash":"ea0ae1047e43563efed1492455bdd57a"},"/Users/joverson/development/src/plato/Gruntfile.js":{"stats":{"percentage":0.9423076923076923,"lines":[{"lineno":78},{"lineno":80},{"lineno":90},{"lineno":91},{"lineno":92},{"lineno":94}],"missing":6,"seen":98,"total":104,"coverage":{"78":{"partial":false,"source":"    var done = this.async();","missing":[{"startCol":4,"endCol":28},{"startCol":15,"endCol":27}]},"80":{"partial":false,"source":"    grunt.util.spawn({","missing":[{}]},"81":{"partial":false,"source":"        cmd : './bin/plato',","missing":[{}]},"82":{"partial":false,"source":"        args : [","missing":[{}]},"83":{"partial":false,"source":"          '-dtmp',","missing":[{}]},"84":{"partial":false,"source":"          '-q',","missing":[{}]},"85":{"partial":false,"source":"          '-ttest report',","missing":[{}]},"86":{"partial":false,"source":"          'test/fixtures/a.js','test/fixtures/b.js','test/fixtures/empty.js'","missing":[{}]},"87":{"partial":false,"source":"        ]","missing":[{}]},"88":{"partial":false,"source":"      },","missing":[{}]},"89":{"partial":false,"source":"      function(err, result, code){","missing":[{}]},"90":{"partial":false,"source":"        console.log(result.stdout);","missing":[{},{"startCol":8,"endCol":34}]},"91":{"partial":false,"source":"        if (err || code !== 0) {","missing":[{},{"startCol":12,"endCol":29},{"startCol":19,"endCol":29}]},"92":{"partial":false,"source":"          grunt.fail('Running plato binary failed');","missing":[{"startCol":10,"endCol":51},{}]},"93":{"partial":false,"source":"        }","missing":[{}]},"94":{"partial":false,"source":"        done();","missing":[{"startCol":8,"endCol":14},{}]},"95":{"partial":false,"source":"      }","missing":[{}]},"96":{"partial":false,"source":"    );","missing":[{}]}},"source":"'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    nodeunit: {\n      files: ['test/**/*_test.js'],\n    },\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc'\n      },\n      gruntfile: {\n        src: 'Gruntfile.js'\n      },\n      lib: {\n        src: ['lib/**/*.js', '!lib/assets/**/*.js']\n      },\n      test: {\n        src: ['test/**/*.js','!test/fixtures/**/*.js']\n      },\n      assets: {\n        src: ['lib/assets/scripts/*.js']\n      }\n    },\n    uglify: {\n      'assets' : {\n        files : {\n          'lib/assets/scripts/bundles/core-bundle.js' : [\n            'lib/assets/scripts/vendor/jquery-1.8.3.min.js',\n            'lib/assets/scripts/vendor/lodash.min.js',\n            'lib/assets/scripts/vendor/raphael-min.js',\n            'lib/assets/scripts/vendor/morris.min.js',\n            'lib/assets/scripts/vendor/jquery.fittext.js',\n            'lib/assets/scripts/vendor/bootstrap-tooltip.js',\n            'lib/assets/scripts/vendor/bootstrap-popover.js'\n          ],\n          'lib/assets/scripts/bundles/codemirror.js' : [\n            'lib/assets/scripts/vendor/codemirror/codemirror.js',\n            'lib/assets/scripts/vendor/codemirror/javascript.js',\n            'lib/assets/scripts/vendor/codemirror/util/searchcursor.js'\n          ]\n        }\n      },\n    },\n    watch: {\n      gruntfile: {\n        files: '<%= jshint.gruntfile.src %>',\n        tasks: ['jshint:gruntfile']\n      },\n      lib: {\n        files: '<%= jshint.lib.src %>',\n        tasks: ['jshint:lib', 'nodeunit']\n      },\n      test: {\n        files: '<%= jshint.test.src %>',\n        tasks: ['jshint:test', 'nodeunit']\n      },\n    },\n    casperjs : {\n      test : {\n        src: 'test/casper-overview.js',\n        options : {\n          test : true,\n          direct : true\n        }\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-casper');\n\n  grunt.registerTask('runbin',function(){\n    var done = this.async();\n\n    grunt.util.spawn({\n        cmd : './bin/plato',\n        args : [\n          '-dtmp',\n          '-q',\n          '-ttest report',\n          'test/fixtures/a.js','test/fixtures/b.js','test/fixtures/empty.js'\n        ]\n      },\n      function(err, result, code){\n        console.log(result.stdout);\n        if (err || code !== 0) {\n          grunt.fail('Running plato binary failed');\n        }\n        done();\n      }\n    );\n  });\n\n  grunt.registerTask('optimize', ['uglify']);\n  // Default task.\n  grunt.registerTask('test', ['jshint', 'nodeunit', 'runbin', 'casperjs']);\n  grunt.registerTask('default', ['test']);\n\n};","blocks":{"total":4,"seen":1,"missing":3,"percentage":0.25}},"hash":"982de245f387614e5b298191a637e4cb"},"/Users/joverson/development/src/plato/test/plato_test.js":{"stats":{"percentage":0.8598130841121495,"lines":[{"lineno":59},{"lineno":60},{"lineno":72},{"lineno":73},{"lineno":74},{"lineno":76},{"lineno":92},{"lineno":93},{"lineno":94},{"lineno":95},{"lineno":96},{"lineno":98},{"lineno":99},{"lineno":102},{"lineno":104}],"missing":15,"seen":92,"total":107,"coverage":{"59":{"partial":false,"source":"      test.equal(reports.length, 2, 'Should not attempt to report on empty files');","missing":[{"startCol":6,"endCol":82}]},"60":{"partial":false,"source":"      test.done();","missing":[{"startCol":6,"endCol":17}]},"72":{"partial":false,"source":"      reports.forEach(function(report){","missing":[{}]},"73":{"partial":false,"source":"        test.ok(report.complexity, 'Should contain a complexity report');","missing":[{"startCol":8,"endCol":72},{}]},"74":{"partial":false,"source":"        test.ok(report.jshint, 'Should contain a jshint report');","missing":[{},{"startCol":8,"endCol":64}]},"75":{"partial":false,"source":"      });","missing":[{}]},"76":{"partial":false,"source":"      test.done();","missing":[{"startCol":6,"endCol":17}]},"92":{"partial":false,"source":"      var overview = plato.getOverviewReport(reports);","missing":[{"startCol":6,"endCol":54},{"startCol":21,"endCol":53}]},"93":{"partial":false,"source":"      test.ok(overview.summary.total.sloc > 0, 'Should contain total sloc');","missing":[{"startCol":6,"endCol":75},{"startCol":14,"endCol":45}]},"94":{"partial":false,"source":"      test.ok(overview.summary.total.maintainability > 0, 'Should contain total maintainability');","missing":[{"startCol":6,"endCol":97},{"startCol":14,"endCol":56}]},"95":{"partial":false,"source":"      test.ok(overview.summary.average.sloc > 0, 'Should contain average sloc');","missing":[{"startCol":6,"endCol":79},{"startCol":14,"endCol":47}]},"96":{"partial":false,"source":"      test.ok(overview.summary.average.maintainability > 0, 'Should contain average maintainability');","missing":[{"startCol":6,"endCol":101},{"startCol":14,"endCol":58}]},"98":{"partial":false,"source":"      overview.reports.forEach(function(report){","missing":[{}]},"99":{"partial":false,"source":"        test.ok('total' in report.jshint, 'Each report should contain a summary of jshint errors');","missing":[{},{"startCol":16,"endCol":40},{"startCol":8,"endCol":98}]},"100":{"partial":false,"source":"      });","missing":[{}]},"102":{"partial":false,"source":"      test.equal(overview.reports.length, files.length,'Should contain right number of reports');","missing":[{"startCol":6,"endCol":96}]},"104":{"partial":false,"source":"      test.done();","missing":[{"startCol":6,"endCol":17}]}},"source":"'use strict';\n\nvar util = require('../lib/util'),\n    plato = require('../lib/plato');\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nexports['grunt-plato'] = {\n  setUp: function(done) {\n    // setup here\n    done();\n  },\n  'common prefix': function(test) {\n    test.expect(2);\n\n    var files = [\n      '/lib/foo/bar/a.js',\n      '/lib/foo/bar/baz/b.js',\n      '/lib/foo/bar/qux/c.js',\n    ];\n\n    test.equal(util.findCommonBase(files), '/lib/foo/bar/', 'should find common prefix');\n\n    files = [\n      'single/file/foo.js'\n    ];\n    test.equal(util.findCommonBase(files), '', 'should nto find common prefix for one file');\n\n    test.done();\n  },\n  'test empty file' : function(test) {\n    test.expect(1);\n\n    var files = [\n      'test/fixtures/a.js',\n      'test/fixtures/b.js',\n      'test/fixtures/empty.js'\n    ];\n\n    plato.inspect(files, null, {}, function(reports){\n      test.equal(reports.length, 2, 'Should not attempt to report on empty files');\n      test.done();\n    });\n  },\n  'test report structure' : function(test) {\n    test.expect(4);\n\n    var files = [\n      'test/fixtures/a.js',\n      'test/fixtures/b.js'\n    ];\n\n    plato.inspect(files, null, {}, function(reports){\n      reports.forEach(function(report){\n        test.ok(report.complexity, 'Should contain a complexity report');\n        test.ok(report.jshint, 'Should contain a jshint report');\n      });\n      test.done();\n    });\n  },\n  'test overview report structure' : function(test) {\n\n    var files = [\n      'test/fixtures/a.js',\n      'test/fixtures/b.js'\n    ];\n\n    var numberAggregateProperties = 2,\n        numberReportProperties = 1;\n\n    test.expect((files.length * numberAggregateProperties) + (files.length * numberReportProperties) + 1);\n\n    plato.inspect(files, null, {}, function(reports){\n      var overview = plato.getOverviewReport(reports);\n      test.ok(overview.summary.total.sloc > 0, 'Should contain total sloc');\n      test.ok(overview.summary.total.maintainability > 0, 'Should contain total maintainability');\n      test.ok(overview.summary.average.sloc > 0, 'Should contain average sloc');\n      test.ok(overview.summary.average.maintainability > 0, 'Should contain average maintainability');\n\n      overview.reports.forEach(function(report){\n        test.ok('total' in report.jshint, 'Each report should contain a summary of jshint errors');\n      });\n\n      test.equal(overview.reports.length, files.length,'Should contain right number of reports');\n\n      test.done();\n    });\n  },\n};","blocks":{"total":10,"seen":5,"missing":5,"percentage":0.5}},"hash":"175fa9145e6baf819d29d66919523754"},"/Users/joverson/development/src/plato/lib/util.js":{"stats":{"percentage":0.8695652173913043,"lines":[{"lineno":19},{"lineno":20},{"lineno":21}],"missing":3,"seen":20,"total":23,"coverage":{"19":{"partial":false,"source":"  return JSON.stringify(report, function(k,v){","missing":[{}]},"20":{"partial":false,"source":"    if (k === 'identifiers') return ['__stripped__'];","missing":[{},{"startCol":8,"endCol":27},{"startCol":29,"endCol":53}]},"21":{"partial":false,"source":"    return v;","missing":[{},{"startCol":4,"endCol":13}]},"22":{"partial":false,"source":"  },2);","missing":[{}]}},"source":"'use strict';\n\nexports.findCommonBase = function(files) {\n  if (!files || files.length === 1) return '';\n  var first = files[0];\n  var prefixlen = first.length;\n  files.forEach(function(file){\n    for (var i = prefixlen; i > 0; i--) {\n      if (file.substr(0,i) === first.substr(0,i)) {\n        prefixlen = i;\n        break;\n      }\n    }\n  });\n  return first.substr(0,prefixlen);\n};\n\nexports.formatJSON = function (report) {\n  return JSON.stringify(report, function(k,v){\n    if (k === 'identifiers') return ['__stripped__'];\n    return v;\n  },2);\n};","blocks":{"total":8,"seen":5,"missing":3,"percentage":0.625}},"hash":"4b0df99d8d86f60b1d864bf9bfaee9cd"},"/Users/joverson/development/src/plato/lib/plato.js":{"stats":{"percentage":0.6666666666666666,"lines":[{"lineno":51},{"lineno":55},{"lineno":57},{"lineno":59},{"lineno":61},{"lineno":63},{"lineno":64},{"lineno":65},{"lineno":66},{"lineno":67},{"lineno":69},{"lineno":70},{"lineno":71},{"lineno":73},{"lineno":74},{"lineno":75},{"lineno":77},{"lineno":78},{"lineno":80},{"lineno":83},{"lineno":86},{"lineno":89},{"lineno":91},{"lineno":92},{"lineno":93},{"lineno":95},{"lineno":97},{"lineno":98},{"lineno":99},{"lineno":100},{"lineno":104},{"lineno":105},{"lineno":107},{"lineno":108},{"lineno":109},{"lineno":113},{"lineno":117},{"lineno":118},{"lineno":121},{"lineno":122},{"lineno":123},{"lineno":124},{"lineno":126},{"lineno":127},{"lineno":128},{"lineno":129},{"lineno":134},{"lineno":143},{"lineno":145},{"lineno":156},{"lineno":158},{"lineno":159},{"lineno":161},{"lineno":162},{"lineno":168},{"lineno":171},{"lineno":176},{"lineno":177},{"lineno":179},{"lineno":186},{"lineno":187},{"lineno":191},{"lineno":193},{"lineno":195},{"lineno":197},{"lineno":201},{"lineno":202},{"lineno":206},{"lineno":210},{"lineno":211},{"lineno":215},{"lineno":216},{"lineno":217},{"lineno":221}],"missing":74,"seen":148,"total":222,"coverage":{"51":{"partial":true,"source":"    if (flag in options) flags[flag] = _.clone(options[flag]);","missing":[{"startCol":25,"endCol":62},{"startCol":39,"endCol":61}]},"55":{"partial":false,"source":"  console.log(coverage);","missing":[{"startCol":2,"endCol":23}]},"57":{"partial":false,"source":"  var reports = [];","missing":[{"startCol":2,"endCol":19}]},"59":{"partial":false,"source":"  var fileOutputDir = path.join(outputDir,fileDir);","missing":[{"startCol":2,"endCol":51},{"startCol":22,"endCol":50}]},"61":{"partial":false,"source":"  var commonBasePath = util.findCommonBase(files);","missing":[{"startCol":2,"endCol":50},{"startCol":23,"endCol":49}]},"63":{"partial":false,"source":"  var runReports = function(files,done) {","missing":[{}]},"64":{"partial":false,"source":"    files.forEach(function(file) {","missing":[{}]},"65":{"partial":false,"source":"      if (options.recurse && fs.statSync(file).isDirectory()) {","missing":[{"startCol":10,"endCol":60},{},{"startCol":29,"endCol":60},{"startCol":40,"endCol":46}]},"66":{"partial":false,"source":"        files = fs.readdirSync(file).map(function(innerFile){","missing":[{},{"startCol":30,"endCol":36}]},"67":{"partial":false,"source":"          return path.join(file,innerFile);","missing":[{},{"startCol":17,"endCol":42},{"startCol":10,"endCol":43}]},"68":{"partial":false,"source":"        });","missing":[{}]},"69":{"partial":false,"source":"        runReports(files);","missing":[{},{"startCol":8,"endCol":26}]},"70":{"partial":false,"source":"      } else if (file.match(/\\.js$/)) {","missing":[{"startCol":17,"endCol":36},{}]},"71":{"partial":false,"source":"        log('Reading \"%s\"', file);","missing":[{},{"startCol":8,"endCol":33}]},"72":{"partial":false,"source":"","missing":[{}]},"73":{"partial":false,"source":"        var fileShort = file.replace(commonBasePath, '');","missing":[{},{"startCol":8,"endCol":57},{"startCol":24,"endCol":56}]},"74":{"partial":false,"source":"        var fileSafe = fileShort.replace(/[^a-zA-Z0-9]/g,'_');","missing":[{},{"startCol":8,"endCol":62},{"startCol":23,"endCol":61}]},"75":{"partial":false,"source":"        var source = fs.readFileSync(file).toString().trim();","missing":[{"startCol":8,"endCol":61},{"startCol":21,"endCol":60},{},{"startCol":36,"endCol":42},{"startCol":51,"endCol":53}]},"76":{"partial":false,"source":"        if (!source) {","missing":[{}]},"77":{"partial":false,"source":"          log('Not parsing empty file \"%s\"', file);","missing":[{},{"startCol":10,"endCol":50}]},"78":{"partial":false,"source":"          return;","missing":[{"startCol":10,"endCol":17},{}]},"79":{"partial":false,"source":"        }","missing":[{}]},"80":{"partial":false,"source":"        var report = {","missing":[{}]},"81":{"partial":false,"source":"          info : {","missing":[{}]},"82":{"partial":false,"source":"            file : file,","missing":[{}]},"83":{"partial":false,"source":"            fileLong : path.resolve(file),","missing":[{},{"startCol":23,"endCol":41}]},"84":{"partial":false,"source":"            fileShort : fileShort,","missing":[{}]},"85":{"partial":false,"source":"            fileSafe : fileSafe,","missing":[{}]},"86":{"partial":false,"source":"            link : fileDir + '/' + fileSafe + '/index.html'","missing":[{},{"startCol":19,"endCol":32}]},"87":{"partial":false,"source":"          }","missing":[{}]},"88":{"partial":false,"source":"        };","missing":[{}]},"89":{"partial":false,"source":"        console.log(report);","missing":[{},{"startCol":8,"endCol":27}]},"90":{"partial":false,"source":"","missing":[{}]},"91":{"partial":false,"source":"        var error = false;","missing":[{},{"startCol":8,"endCol":26}]},"92":{"partial":false,"source":"        _.each(reporters,function(reporter, name){","missing":[{}]},"93":{"partial":false,"source":"          if (flags[name] === false) return;","missing":[{"startCol":14,"endCol":35},{},{"startCol":37,"endCol":44}]},"94":{"partial":false,"source":"          try {","missing":[{}]},"95":{"partial":false,"source":"            report[name] = reporter.process(source, flags[name], report.info);","missing":[{},{"startCol":12,"endCol":78},{"startCol":27,"endCol":77}]},"96":{"partial":false,"source":"          } catch(e) {","missing":[{}]},"97":{"partial":false,"source":"            error = true;","missing":[{},{"startCol":12,"endCol":25}]},"98":{"partial":false,"source":"            log('Error reading file : ', e.toString());","missing":[{},{"startCol":12,"endCol":55},{"startCol":41,"endCol":53}]},"99":{"partial":false,"source":"            log(e.stack);","missing":[{"startCol":12,"endCol":25},{}]},"100":{"partial":false,"source":"            return;","missing":[{},{"startCol":12,"endCol":19}]},"101":{"partial":false,"source":"          }","missing":[{}]},"102":{"partial":false,"source":"        });","missing":[{}]},"103":{"partial":false,"source":"","missing":[{}]},"104":{"partial":false,"source":"        if (error) return;","missing":[{},{"startCol":19,"endCol":26}]},"105":{"partial":false,"source":"        reports.push(report);","missing":[{},{"startCol":8,"endCol":29}]},"106":{"partial":false,"source":"        if (outputDir) {","missing":[{}]},"107":{"partial":false,"source":"          var outdir = path.join(fileOutputDir, report.info.fileSafe);","missing":[{},{"startCol":10,"endCol":70},{"startCol":23,"endCol":69}]},"108":{"partial":false,"source":"          if (!fs.existsSync(outdir)) fs.mkdirSync(outdir);","missing":[{"startCol":38,"endCol":58},{},{"startCol":15,"endCol":36}]},"109":{"partial":false,"source":"          writeFileReport(outdir, report, source);","missing":[{},{"startCol":10,"endCol":49}]},"110":{"partial":false,"source":"        }","missing":[{}]},"111":{"partial":false,"source":"      }","missing":[{}]},"112":{"partial":false,"source":"    });","missing":[{}]},"113":{"partial":false,"source":"    if (done) done();","missing":[{"startCol":14,"endCol":20},{}]},"114":{"partial":false,"source":"  };","missing":[{}]},"117":{"partial":false,"source":"    runReports(files,function(){","missing":[{}]},"118":{"partial":false,"source":"      done(reports);","missing":[{},{"startCol":6,"endCol":19}]},"119":{"partial":false,"source":"    });","missing":[{}]},"121":{"partial":false,"source":"    fs.mkdirp(fileOutputDir,function(){","missing":[{}]},"122":{"partial":false,"source":"      runReports(files,function(){","missing":[{}]},"123":{"partial":false,"source":"        var reportFile = path.join(outputDir, 'report');","missing":[{"startCol":25,"endCol":55},{"startCol":8,"endCol":56},{}]},"124":{"partial":false,"source":"        var overview = path.join(outputDir, 'index.html');","missing":[{},{"startCol":8,"endCol":58},{"startCol":23,"endCol":57}]},"125":{"partial":false,"source":"","missing":[{}]},"126":{"partial":false,"source":"        fs.copy(assets, path.join(outputDir, 'assets'), function(){","missing":[{},{"startCol":24,"endCol":54}]},"127":{"partial":false,"source":"          var overviewReport = exports.getOverviewReport(reports);","missing":[{"startCol":10,"endCol":66},{"startCol":31,"endCol":65},{}]},"128":{"partial":false,"source":"          writeReport(reportFile, overviewReport);","missing":[{},{"startCol":10,"endCol":49}]},"129":{"partial":false,"source":"          writeOverview(overview, overviewReport, {","missing":[{}]},"130":{"partial":false,"source":"            title : options.title,","missing":[{}]},"131":{"partial":false,"source":"            jshint : flags.jshint,","missing":[{}]},"132":{"partial":false,"source":"            complexity : flags.complexity","missing":[{}]},"133":{"partial":false,"source":"          });","missing":[{}]},"134":{"partial":false,"source":"          done(reports);","missing":[{},{"startCol":10,"endCol":24}]},"135":{"partial":false,"source":"        });","missing":[{}]},"136":{"partial":false,"source":"      });","missing":[{}]},"137":{"partial":false,"source":"    });","missing":[{}]},"143":{"partial":false,"source":"  var culledReports = [];","missing":[{"startCol":2,"endCol":25}]},"145":{"partial":false,"source":"  var summary = {","missing":[{}]},"146":{"partial":false,"source":"    total : {","missing":[{}]},"147":{"partial":false,"source":"      sloc : 0,","missing":[{}]},"148":{"partial":false,"source":"      maintainability : 0,","missing":[{}]},"149":{"partial":false,"source":"    },","missing":[{}]},"150":{"partial":false,"source":"    average : {","missing":[{}]},"151":{"partial":false,"source":"      sloc : 0,","missing":[{}]},"152":{"partial":false,"source":"      maintainability : 0,","missing":[{}]},"153":{"partial":false,"source":"    }","missing":[{}]},"154":{"partial":false,"source":"  };","missing":[{}]},"156":{"partial":false,"source":"  reports.forEach(function(report){","missing":[{}]},"157":{"partial":false,"source":"    // clone objects so we don't have to worry about side effects","missing":[{}]},"158":{"partial":false,"source":"    summary.total.sloc += report.complexity.aggregate.complexity.sloc.physical;","missing":[{},{"startCol":4,"endCol":79}]},"159":{"partial":false,"source":"    summary.total.maintainability += report.complexity.maintainability;","missing":[{"startCol":4,"endCol":71},{}]},"160":{"partial":false,"source":"","missing":[{}]},"161":{"partial":false,"source":"    var aggregate = _.cloneDeep(report.complexity.aggregate);","missing":[{"startCol":4,"endCol":61},{},{"startCol":20,"endCol":60}]},"162":{"partial":false,"source":"    culledReports.push({","missing":[{}]},"163":{"partial":false,"source":"      info : report.info,","missing":[{}]},"164":{"partial":false,"source":"      complexity : {","missing":[{}]},"165":{"partial":false,"source":"        aggregate : aggregate,","missing":[{}]},"166":{"partial":false,"source":"        module : report.complexity.module,","missing":[{}]},"167":{"partial":false,"source":"        module_safe : report.complexity.module_safe,","missing":[{}]},"168":{"partial":false,"source":"        maintainability : _.cloneDeep(report.complexity.maintainability)","missing":[{},{"startCol":26,"endCol":72}]},"169":{"partial":false,"source":"      },","missing":[{}]},"170":{"partial":false,"source":"      jshint : {","missing":[{}]},"171":{"partial":false,"source":"        total : report.jshint && report.jshint.messages.length","missing":[{"startCol":16,"endCol":62},{}]},"172":{"partial":false,"source":"      }","missing":[{}]},"173":{"partial":false,"source":"    });","missing":[{}]},"174":{"partial":false,"source":"  });","missing":[{}]},"176":{"partial":false,"source":"  summary.average.sloc = ~~(summary.total.sloc / reports.length);","missing":[{"startCol":2,"endCol":65},{"startCol":27,"endCol":64}]},"177":{"partial":false,"source":"  summary.average.maintainability = (summary.total.maintainability / reports.length).toFixed(2);","missing":[{"startCol":2,"endCol":96},{"startCol":36,"endCol":84}]},"179":{"partial":false,"source":"  return {","missing":[{}]},"180":{"partial":false,"source":"    summary : summary,","missing":[{}]},"181":{"partial":false,"source":"    reports : culledReports","missing":[{}]},"182":{"partial":false,"source":"  };","missing":[{}]},"186":{"partial":false,"source":"  log('Writing file \"%s\".', file);","missing":[{"startCol":2,"endCol":33}]},"187":{"partial":false,"source":"  fs.writeFileSync(file, source, 'utf8');","missing":[{"startCol":2,"endCol":40}]},"191":{"partial":false,"source":"  var formatted = util.formatJSON(report);","missing":[{"startCol":2,"endCol":42},{"startCol":18,"endCol":41}]},"193":{"partial":false,"source":"  writeFile(outfile + '.json', formatted);","missing":[{"startCol":2,"endCol":41},{"startCol":12,"endCol":29}]},"195":{"partial":false,"source":"  var module = '__report = ' + formatted;","missing":[{"startCol":2,"endCol":41},{"startCol":15,"endCol":40}]},"197":{"partial":false,"source":"  writeFile(outfile + '.js', module);","missing":[{"startCol":2,"endCol":36},{"startCol":12,"endCol":27}]},"201":{"partial":false,"source":"  var overviewSource = fs.readFileSync(overviewTemplate).toString();","missing":[{"startCol":2,"endCol":68},{"startCol":23,"endCol":67},{"startCol":38,"endCol":56}]},"202":{"partial":false,"source":"  var parsed = _.template(overviewSource, {","missing":[{}]},"203":{"partial":false,"source":"    report : report,","missing":[{}]},"204":{"partial":false,"source":"    options : options","missing":[{}]},"205":{"partial":false,"source":"  });","missing":[{}]},"206":{"partial":false,"source":"  writeFile(outfile, parsed);","missing":[{"startCol":2,"endCol":28}]},"210":{"partial":false,"source":"  var overviewSource = fs.readFileSync(fileTemplate).toString();","missing":[{"startCol":2,"endCol":64},{"startCol":23,"endCol":63},{"startCol":38,"endCol":52}]},"211":{"partial":false,"source":"  var parsed = _.template(overviewSource, {","missing":[{}]},"212":{"partial":false,"source":"    source : source,","missing":[{}]},"213":{"partial":false,"source":"    report : report","missing":[{}]},"214":{"partial":false,"source":"  });","missing":[{}]},"215":{"partial":false,"source":"  var indexPath = path.join(outdir,'index.html');","missing":[{"startCol":2,"endCol":49},{"startCol":18,"endCol":48}]},"216":{"partial":false,"source":"  writeFile(indexPath, parsed);","missing":[{"startCol":2,"endCol":30}]},"217":{"partial":false,"source":"  writeReport(path.join(outdir,'report'), report);","missing":[{"startCol":2,"endCol":49},{"startCol":14,"endCol":40}]},"221":{"partial":false,"source":"  if (!exports.options.quiet) console.log.apply(console, arguments);","missing":[{"startCol":30,"endCol":67}]}},"source":"/*\n * plato\n * https://github.com/joverson/plato\n *\n * Copyright (c) 2012 Jarrod Overson\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n// node api\nvar path = require('path');\n\n// node api with sugar\nvar fs = require('fs-extra');\n\n// vendor\nvar _ = require('lodash');\n\n// local lib\nvar util = require('./util'),\n    reporters = {\n      complexity : require('./reporters/complexity'),\n      jshint : require('./reporters/jshint')\n    };\n\nvar overviewTemplate = __dirname + '/templates/overview.html',\n    fileTemplate = __dirname + '/templates/file.html',\n    assets = __dirname + '/assets/',\n    fileDir = 'files';\n\nexports.options = {};\n\nexports.inspect = function(files, outputDir, options, done) {\n  exports.options = options;\n\n  var flags = {\n    complexity : {\n      logicalor : true,\n      switchcase : true,\n      forin : false,\n      trycatch : false\n    },\n    jshint : {\n      options : {},  // use jshint defaults\n      globals : {}\n    }\n  };\n\n  Object.keys(flags).forEach(function(flag){\n    if (flag in options) flags[flag] = _.clone(options[flag]);\n  });\n\n  var coverage = util.normalizeCoverage(options.coverage);\n  console.log(coverage);\n\n  var reports = [];\n\n  var fileOutputDir = path.join(outputDir,fileDir);\n\n  var commonBasePath = util.findCommonBase(files);\n\n  var runReports = function(files,done) {\n    files.forEach(function(file) {\n      if (options.recurse && fs.statSync(file).isDirectory()) {\n        files = fs.readdirSync(file).map(function(innerFile){\n          return path.join(file,innerFile);\n        });\n        runReports(files);\n      } else if (file.match(/\\.js$/)) {\n        log('Reading \"%s\"', file);\n\n        var fileShort = file.replace(commonBasePath, '');\n        var fileSafe = fileShort.replace(/[^a-zA-Z0-9]/g,'_');\n        var source = fs.readFileSync(file).toString().trim();\n        if (!source) {\n          log('Not parsing empty file \"%s\"', file);\n          return;\n        }\n        var report = {\n          info : {\n            file : file,\n            fileLong : path.resolve(file),\n            fileShort : fileShort,\n            fileSafe : fileSafe,\n            link : fileDir + '/' + fileSafe + '/index.html'\n          }\n        };\n        console.log(report);\n\n        var error = false;\n        _.each(reporters,function(reporter, name){\n          if (flags[name] === false) return;\n          try {\n            report[name] = reporter.process(source, flags[name], report.info);\n          } catch(e) {\n            error = true;\n            log('Error reading file : ', e.toString());\n            log(e.stack);\n            return;\n          }\n        });\n\n        if (error) return;\n        reports.push(report);\n        if (outputDir) {\n          var outdir = path.join(fileOutputDir, report.info.fileSafe);\n          if (!fs.existsSync(outdir)) fs.mkdirSync(outdir);\n          writeFileReport(outdir, report, source);\n        }\n      }\n    });\n    if (done) done();\n  };\n\n  if (!outputDir) {\n    runReports(files,function(){\n      done(reports);\n    });\n  } else {\n    fs.mkdirp(fileOutputDir,function(){\n      runReports(files,function(){\n        var reportFile = path.join(outputDir, 'report');\n        var overview = path.join(outputDir, 'index.html');\n\n        fs.copy(assets, path.join(outputDir, 'assets'), function(){\n          var overviewReport = exports.getOverviewReport(reports);\n          writeReport(reportFile, overviewReport);\n          writeOverview(overview, overviewReport, {\n            title : options.title,\n            jshint : flags.jshint,\n            complexity : flags.complexity\n          });\n          done(reports);\n        });\n      });\n    });\n  }\n};\n\n// Filters out information unused in the overview for space/performance\nexports.getOverviewReport = function (reports) {\n  var culledReports = [];\n\n  var summary = {\n    total : {\n      sloc : 0,\n      maintainability : 0,\n    },\n    average : {\n      sloc : 0,\n      maintainability : 0,\n    }\n  };\n\n  reports.forEach(function(report){\n    // clone objects so we don't have to worry about side effects\n    summary.total.sloc += report.complexity.aggregate.complexity.sloc.physical;\n    summary.total.maintainability += report.complexity.maintainability;\n\n    var aggregate = _.cloneDeep(report.complexity.aggregate);\n    culledReports.push({\n      info : report.info,\n      complexity : {\n        aggregate : aggregate,\n        module : report.complexity.module,\n        module_safe : report.complexity.module_safe,\n        maintainability : _.cloneDeep(report.complexity.maintainability)\n      },\n      jshint : {\n        total : report.jshint && report.jshint.messages.length\n      }\n    });\n  });\n\n  summary.average.sloc = ~~(summary.total.sloc / reports.length);\n  summary.average.maintainability = (summary.total.maintainability / reports.length).toFixed(2);\n\n  return {\n    summary : summary,\n    reports : culledReports\n  };\n};\n\nfunction writeFile(file, source) {\n  log('Writing file \"%s\".', file);\n  fs.writeFileSync(file, source, 'utf8');\n}\n\nfunction writeReport(outfile, report) {\n  var formatted = util.formatJSON(report);\n\n  writeFile(outfile + '.json', formatted);\n\n  var module = '__report = ' + formatted;\n\n  writeFile(outfile + '.js', module);\n}\n\nfunction writeOverview(outfile, report, options) {\n  var overviewSource = fs.readFileSync(overviewTemplate).toString();\n  var parsed = _.template(overviewSource, {\n    report : report,\n    options : options\n  });\n  writeFile(outfile, parsed);\n}\n\nfunction writeFileReport(outdir, report, source) {\n  var overviewSource = fs.readFileSync(fileTemplate).toString();\n  var parsed = _.template(overviewSource, {\n    source : source,\n    report : report\n  });\n  var indexPath = path.join(outdir,'index.html');\n  writeFile(indexPath, parsed);\n  writeReport(path.join(outdir,'report'), report);\n}\n\nfunction log(/* args */) {\n  if (!exports.options.quiet) console.log.apply(console, arguments);\n}","blocks":{"total":31,"seen":2,"missing":29,"percentage":0.06451612903225806}},"hash":"d2d1944d266120cffd2ed1e8b4458ada"},"/Users/joverson/development/src/plato/lib/reporters/complexity/index.js":{"stats":{"percentage":0.6666666666666666,"lines":[{"lineno":6},{"lineno":7},{"lineno":8}],"missing":3,"seen":6,"total":9,"coverage":{"6":{"partial":false,"source":"  var report = cr.run(source, options);","missing":[{"startCol":2,"endCol":39},{"startCol":15,"endCol":38}]},"7":{"partial":false,"source":"  report.module = reportInfo.fileShort;","missing":[{"startCol":2,"endCol":39}]},"8":{"partial":false,"source":"  return report;","missing":[{"startCol":2,"endCol":16}]}},"source":"\"use strict\";\n\nvar cr = require('complexity-report');\n\nexports.process = function(source, options, reportInfo) {\n  var report = cr.run(source, options);\n  report.module = reportInfo.fileShort;\n  return report;\n};","blocks":{"total":1,"seen":0,"missing":1,"percentage":0}},"hash":"57ab7e95c11debbb1b54535456ada3da"},"/Users/joverson/development/src/plato/lib/reporters/jshint/index.js":{"stats":{"percentage":0.6730769230769231,"lines":[{"lineno":6},{"lineno":7},{"lineno":8},{"lineno":13},{"lineno":17},{"lineno":18},{"lineno":27},{"lineno":31},{"lineno":33},{"lineno":34},{"lineno":37},{"lineno":39},{"lineno":40},{"lineno":41},{"lineno":45},{"lineno":46},{"lineno":48}],"missing":17,"seen":35,"total":52,"coverage":{"6":{"partial":false,"source":"  var results = lint(source, options.options, options.globals);","missing":[{"startCol":2,"endCol":63},{"startCol":16,"endCol":62}]},"7":{"partial":false,"source":"  var report = generateReport(results);","missing":[{"startCol":2,"endCol":39},{"startCol":15,"endCol":38}]},"8":{"partial":false,"source":"  return report;","missing":[{"startCol":2,"endCol":16}]},"13":{"partial":false,"source":"  var out = {","missing":[{}]},"14":{"partial":false,"source":"    messages : []","missing":[{}]},"15":{"partial":false,"source":"  };","missing":[{}]},"17":{"partial":false,"source":"  data.results.forEach(function (result) {","missing":[{}]},"18":{"partial":false,"source":"    out.messages.push({","missing":[{}]},"19":{"partial":false,"source":"      severity : 'error',","missing":[{}]},"20":{"partial":false,"source":"      line     : result.error.line,","missing":[{}]},"21":{"partial":false,"source":"      column   : result.error.character,","missing":[{}]},"22":{"partial":false,"source":"      message  : result.error.reason,","missing":[{}]},"23":{"partial":false,"source":"      source   : result.error.raw","missing":[{}]},"24":{"partial":false,"source":"    });","missing":[{}]},"25":{"partial":false,"source":"  });","missing":[{}]},"27":{"partial":false,"source":"  return out;","missing":[{"startCol":2,"endCol":13}]},"31":{"partial":false,"source":"  config = config || {};","missing":[{"startCol":2,"endCol":24},{"startCol":11,"endCol":23}]},"33":{"partial":false,"source":"  var results = [];","missing":[{"startCol":2,"endCol":19}]},"34":{"partial":false,"source":"  var data = [];","missing":[{"startCol":2,"endCol":16}]},"37":{"partial":false,"source":"  source = source.replace(/^\\uFEFF/, \"\");","missing":[{"startCol":2,"endCol":41},{"startCol":11,"endCol":40}]},"39":{"partial":false,"source":"  if (!JSHINT(source, config, globals)) {","missing":[{"startCol":7,"endCol":38}]},"40":{"partial":false,"source":"    JSHINT.errors.forEach(function (err) {","missing":[{}]},"41":{"partial":false,"source":"      if (err) results.push({ error: err });","missing":[{"startCol":15,"endCol":43},{}]},"42":{"partial":false,"source":"    });","missing":[{}]},"45":{"partial":false,"source":"  var lintData = JSHINT.data();","missing":[{"startCol":2,"endCol":31},{"startCol":17,"endCol":30}]},"46":{"partial":false,"source":"  if (lintData) data.push(lintData);","missing":[{"startCol":16,"endCol":35}]},"48":{"partial":false,"source":"  return {","missing":[{}]},"49":{"partial":false,"source":"    results : results,","missing":[{}]},"50":{"partial":false,"source":"    data : data","missing":[{}]},"51":{"partial":false,"source":"  };","missing":[{}]}},"source":"\"use strict\";\n\nvar JSHINT = require(\"jshint\").JSHINT;\n\nexports.process = function (source, options/*, reportInfo */) {\n  var results = lint(source, options.options, options.globals);\n  var report = generateReport(results);\n  return report;\n};\n\nfunction generateReport(data) {\n\n  var out = {\n    messages : []\n  };\n\n  data.results.forEach(function (result) {\n    out.messages.push({\n      severity : 'error',\n      line     : result.error.line,\n      column   : result.error.character,\n      message  : result.error.reason,\n      source   : result.error.raw\n    });\n  });\n\n  return out;\n}\n\nfunction lint(source, config, globals) {\n  config = config || {};\n\n  var results = [];\n  var data = [];\n\n  // Remove potential Unicode BOM.\n  source = source.replace(/^\\uFEFF/, \"\");\n\n  if (!JSHINT(source, config, globals)) {\n    JSHINT.errors.forEach(function (err) {\n      if (err) results.push({ error: err });\n    });\n  }\n\n  var lintData = JSHINT.data();\n  if (lintData) data.push(lintData);\n\n  return {\n    results : results,\n    data : data\n  };\n}","blocks":{"total":8,"seen":0,"missing":8,"percentage":0}},"hash":"910ef2e887438a7d0cdc8fa923b1ce94"}}}